A, B 반 설치를 먼저 진행하세요 ~

* 파이썬 수업 

1. 파이썬을 왜 배워야하는가 ?

   데이터 분석가와 데이터 엔지니어, 딥러닝 개발자(연구원)가 기본적으로 
   갖추어야할 기술
        ↓
      SQL
      파이썬          --------------> 예제 중심으로 기본기를 쌓고 ----->
      R                    ----->  알고리즘 문제들 풀면서 코드를 창의성 있게 작성
     리눅스, 하둡      -----> 하는 근육을 키워야한다. 
     딥러닝               ---> 머신러닝 이론을 코드로 구현을 할 수 있으면

파이썬으로 최종적으로 구현할 내용?

 1. 빅데이터 수집을 윟한 웹스크롤링 기술 능력 키우기
 2. SQL 처럼 파이썬으로 데이터를 검색하고 데이터를 분석할 수 있는 능력키우기
 3. 딥러닝 개발자(연구원)이  되기 위한 기본 코딩 능력 갖추기 
     (예제중심 ----> 알고리즘 문제----->  논문을 코드로 구현 )

■ 예제1.  대화식 모드로 프로그래밍 하기 

* 파이썬을 실행하는 방법 2가지 

1. 대화식 모드 : 한라인 한라인씩 실행하는 모드
예제:
>>> a=1
>>> b=2
>>> a+b
3

 2. 배치 모드    : 여러개의 스크립트로 작성해서 한번에 실행하는 모드

  스파이더에서 아래와 같이 스크립트를 적어주고 전체선택한 후에 
   ctl + enter 로 실행하는것이 배치모드이다. 

문제1.  아래의 스크립트를 배치모드로 실행하시오 !  

a = 1
b = 5
c = 4
d = 6
print ( a + b * c + d )

문제2. 위의 코드에서 곱하기 먼저가 아니라 더하기가 먼저 실행되게하시오 !

a = 1
b = 5
c = 4
d = 6
print ( (a + b) * (c + d) )

■ 예제2. 텍스트 에디터로 프로그래밍 하기 

 spyder 와 같은 텍스트 창에서 프로그램 코드를 작성하는것을 말한다. 
 spyder 프로그램에서 ctl + enter 키로 코드를 실행하거나 F5 를 누르면
 실행이 됩니다. 

예제:  아래의 코드를 spyder 에서 실행하세요 

for  i  in  [2,3,4]:
    print (i)

45분까지 쉬세요 ~~

■ 예제3.  변수명 만들기 

 " 어떤값을 임시로 저장하는 변수의 이름을 만드는 방법과 규칙을 배웁니다."

예:  
a = 1
b = 2
print (a+b)

설명:  a 라는 변수에 숫자 1을 할당한다. 
        b 라는 변수에 숫자 2를 할당한다. 

※ 변수이름을 생성할 때 주의할 사항

1.  변수 이름에는 다음 문자만 사용할 수 있습니다.

 - 소문자(a~z)
 - 대문자(A~Z)
 - 숫자(0~9)
 - 언더스코어(_)

2. 변수 이름은 숫자로 시작할 수 없습니다.(문자로 시작해야합니다.)
3. 예약어를 사용할 수 없습니다. (파이썬에서 이미 사용되고 있는 단어를
                                           예약어라고 합니다.)
예: True, False, class,  is,  return 

문제3.  파이썬의 예약어가 무엇이 있는지 확인하시오 !

import   keyword  # keyword 라는 모듈을 이 코드창에서 사용하겠다. 
                         # 모듈(module) 은 어떤 목적을 위해서 작성된 프로그램 코드
                         # 의 집합 

print ( keyword.kwlist )

['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 
'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 
'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 
'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

True_2 = 1 

■ 예제4.  변수에 값 대입하기 

 파이썬은 변수에 값을 대입할 때 = (assingment) 기호를 사용합니다. 

예제:

a = 1
b = 'scott'
print  (b)
 
다른 프로그램 언어에서는 아래와 같이 좀더 복잡한 코드로 작성해야합니다.
(오라클 pl/sql의 예)

b  varchar2(10) := 'scott' ;

문제4.  파이썬의 기본 철학을 확인하세요 ~

import  this 


The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

문제5.  아래의 변수 b의 자료형을 확인하시오 !
                                   ↓
                       문자형, 숫자형, 리스트형, 튜플형, 사전형 

b = 'scott'

print (b)  # b 변수의 값이 출력됨
print  ( type(b)  )   # b변수의 자료형이 출력됨 

결과: <class 'str'>  <--- 문자형 자료형임이 확인됩니다. 

문제6.  숫자 변수를 만들고 자료형을 확인해보세요 ~

a = 2
print (type(a))  # <class 'int'>

■ 5. 주석 처리하기 (#)

 프로그램에서 주석부분은 인터프리터에 의해 무시되는 텍스트의 한 부분입니다.
 코드를 설명하거나 나중에 어떤 문제를 고치기 위해 표시하는등 
 다양한 목적으로 주석을 사용할 수 있습니다.
 코드를 작성할 때 주석을 잘 작성해두면 차후에 코드를 다시 보거나
 타인이 코드를 검토할  때 매우 중요한 정보로 활용이 될 수 있습니다.
 그래서 주석을 항상 달아주는 습관을 가지는것이 좋습니다. 

예제:  
1. 한줄 주석

a = 1  # 변수 a 에 숫자 1을 할당 합니다.
print (a) # 변수 a에 들어있는 값을 출력합니다. 

2. 여러줄 주석 

"""  아래의 프로그램은 a 변수에 1을 할당해서 프린트하는
     프로그램입니다. """ 

a = 1
print (a) 

문제7.  알파벳 a부터 z 까지 출력하는 아래의 코드를 실행하고 주석을 달아주세요.

import   string 

print ( string.ascii_lowercase )

결과:  abcdefghijklmnopqrstuvwxyz

■ 예제6.  자료형 개념 배우기

 자료형이란 프로그래밍을 할 때 쓰이는 숫자, 문자열등의
 자료 형태로 사용되는 모든것을 뜻합니다.

* 파이썬에서 자주 다루게 되는 자료형이 5가지가 있습니다.

1. 숫자형 :  숫자를 표현하는 자료형 
    예:  a = 1 

2. 문자형 :  문자를 표현하는 자료형 
    예:  b = 'scott' 

3. 리스트형 :  [ ] 대괄호 안에 임의 객체를 순서있게 나열한 자료형 
    예:  d = [ 1, 2, 3 ] 
 
4. 튜플형 :  리스트 자료형과 비슷하지만 요소값을 변경할 수 없다는것이 
               리스트와 다른점입니다. 
    예:  c = ( 1, 2, 3 )  # 소괄호를 사용합니다 

5. 사전형 :  {  } 중괄호 안의 키:값 으로 된 쌍이 요소로 구성된 순서가 없는
               자료형입니다. 

예:  m = { 'i' : '나는', 'am' : '입니다.', 'boy' : '소년' }

문제8.  주사위의 눈 6개를 담는 dice 라는 리스트 변수를 만드시오 !

dice = [ 1, 2, 3, 4, 5, 6 ] 

문제9. 주사위를 한번 파이썬으로 던져보세요 !

import   random  # random 이라는 모듈을 이 코드창에서 사용하겠다. 

dice = [ 1, 2, 3, 4, 5, 6 ]

print ( random.choice(dice) )  # random 이라는 모듈안에 choice 라는 함수를
                                       # 호출하겠다. 

오라클 SQL 함수:   select  lower(ename)  from  emp; 

문제10. 동전을 한번 던져서 앞면이 나오는지 뒷면이 나오는지 확인하시오 !  

import   random

coin = ['앞면', '뒷면']

print ( random.choice(coin) )

점심시간 SQL 문제.  SQL 작성하시고 검사받으세요 ~~
오늘의 마지막 문제로 변경하겠습니다. 

A반은 라인검사 입니다. 
B반은 카페에 올리고 검사받으세요 

힌트:  stud_1000000 테이블과  숫자 1~200 개가 들어있는 테이블과 조인 



■ 예제7. 자료형 출력 개념 배우기 (print)

print 함수를 이용하면 다양한 자료형을 화면에 출력할 수 있습니다.

예제1:
a = 200
b = 'python'
c = [ 'a', 'b', 'c']
print ( a )
print ( b)
print ( c )

print ( a, b ,c)

예제2.  아래의 b 변수에 들어있는 문자에서 철자 p 를 출력하시오 !

b = 'python' 

print ( b[0] )

※ 파이썬은 0 번부터 시작합니다.  
   변수명[인덱스번호] 를 써서 출력하면 됩니다. 

문제11. 아래의 리스트에서  첫번째 요소인 알파벳 a 를 출력하시오 !

c = ['a', 'b', 'c' ]

print ( c[0] )

■ 8. 들여쓰기 개념 배우기 

  파이썬에는 실행코드 부분을 묶어주는 괄호가 없습니다. 
  괄호 대신 들여쓰기를 사용합니다. 
  파이썬은 다른 프로그래밍 언어와 달리 if문,  for loop문 등과 같은 
  제어문과 루프문의 실행코드를 부분을 구분해주는 괄호가 없습니다. 
  대신 들여쓰기로 괄호를 대신합니다.
  
예제1.  아래의 a 리스트안의 요소를 하나씩 뽑아내서 출력하시오 !

a = [  1,  2,  3,  4 ]  

답:
for  i   in   a:    #  반복문을 작성합니다.  뭘 반복하냐면 a 리스트의 요소를 하나씩 빼내는
    print (i)       # 작업을 반복합니다.

설명:  a 리스트의 있는 요소들을 하나씩 뽑아내면서 i 에 담고 아래의 실행문에서
        i 에 있는 요소를 출력합니다. 

문제12.  아래의 리스트의 요소를 하나씩 빼내서 출력하시오 !

m = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] 

답:
for  i  in   m:
    print (i)

반복문 문법 설명:

for  인덱스카운터  in  반복범위:
    실행문  

문제13.  주사위 리스트 변수를 생성하고 주사위에 있는 주사위의 눈을 하나씩 빼내서
           출력하시오 !

dice = [ 1, 2, 3, 4, 5, 6 ]

for  i  in  dice: 
    print (i)

설명:  콜론 다음행에 실행문을 작성할 때는 4칸 들여쓰기 해야합니다.
        다음행에 작성하지 않고 for  문 옆에 작성할때는 들여쓰기 할 필요없습니다. 

■ 9. if 문 개념 배우기 1

 어떤 조건을 참과 거짓으로 판달 할 때 if 문을 사용합니다.
 참과 거짓을 구분하여 코드를 실행하면 if ~ else 를 사용합니다. 
 코드를 작성하다 보면 조건에 따라 수행하는 일을 달리 해야하는 경우가 있습니다.
 조건이 참인지 거짓인지 검사를 하고 , 참인 경우에는 이 일을 하고 거짓인 경우에는
 저일을 해라 ~ 라는 식으로 처리를 할 수 있습니다.

예제1:

if  조건:
    실행코드1
else:
    실행코드2

예제2:
dice = [ 1, 2, 3, 4, 5, 6 ]  #  숫자 1부터 6까지의 요소를 담는 dice 변수를 생성합니다. 

for  i  in  dice:   # for 반복문을 이용해서 dice 변수의 요소를 하나씩 뽑아냅니다. 
    print ('a')      #  a 를 출력하는 실행문을 6번 실행합니다. 

예제3: 

for  i  in  dice:  # for 반복문을 이용해서 dice 변수의 요소를 하나씩 뽑아냅니다. 
    if  i % 2 == 0:  # i 의 요소를 2로 나눈 나머지값이 0 이라면 다음 실행문을 실행합니다. 
        print('a')      # a 를 출력하는 실행문이 3번 실행됩니다. 

설명: 파이썬은 이퀄(같다) 이 == 입니다. 같지 않다는 != 입니다. 
        for 문 끝과 if 문 끝에는 콜론(:) 을 반드시 작성해야합니다. 
        콜론 다음 실행문은 반드시 4칸 들여쓰기 해줘야 합니다. 
        그리고 % 는 오라클의 mod 함수와 같은것 입니다. 

문제14. 주사위 변수 dice 에서 주사위의 눈 홀수만 출력하시오 !

dice = [ 1, 2, 3, 4, 5, 6 ]

for  i  in  dice:
    if  i % 2 == 1:
        print (i) 

문제15.  위의 결과를 아래와 같이 문자열로 출력하시오 !

홀수의 눈이 1
홀수의 눈이 3
홀수의 눈이 5

답:
dice = [ 1, 2, 3, 4, 5, 6 ]

for  i  in  dice:
    if  i % 2 == 1:
        print ('홀수의 눈이 ' , i)

※ 콜론(:) 다음행은 반드시 들여쓰기 해야합니다. 콜론 다음행은 실행문이기 때문입니다. 


 45분까지 쉬세요 ~~~

예제4:  위의 코드를 이용해서 그 아래쪽에 짝수의 눈을 출력하시오 !

dice = [ 1, 2, 3, 4, 5, 6 ]

for  i  in  dice:
    if  i % 2 == 1:
        print ('홀수의 눈이 ' , i)
    else:                   #  위의 조건이 아니라면 다음의 실행문을 실행합니다. 
        print ('짝수의 눈이',  i )

문제15. 다음과 같이 동전 리스트를 만들고 동전을 2번 던져서 한번은 앞면 나왔습니다.
          한번은 뒷면이 나왔습니다. 가 출력되게하시오 !
          (coin 이 1이면 동전 앞면, coin 2 면 동전 뒷면 입니다. )

coin = [ 1,  2]

결과:
        동전 앞면이 나왔습니다.
        동전 뒷면이 나왔습니다. 

답:
coin = [ 1,  2]
for  i  in  coin:
    if  i%2 ==1:
        print ('동전 앞면이 나왔습니다.')
    else:
        print ('동전 뒷면이 나왔습니다.')

예제5.  오라클에서 사용한 emp 테이블의 csv 파일을 파이썬으로 로드하시오 !
         (emp2.csv) 

import  csv  # csv 라는 모듈을 이 코드창에서 사용하겠다.
                #  csv 파일을 파이썬에서 읽을 수 있게 만든 코드의 모음이
                #  csv 파일 모듈입니다. 

file = open("d:\\data\\emp2.csv") # d드라이브 밑에 data 폴더 밑에 있는
                                               # emp2.csv 파일을 파이썬 변수 file 에
                                               # 할당해라 ~
emp_csv = csv.reader(file) # csv 모듈에 reader 함수에 file 변수를 넣어서 
                                   # csv 파일을 읽어서 emp_csv 변수에 넣어라 ~ 
print (emp_csv)  # 변수의 메모리주소만 출력됩니다. 

for  i  in  emp_csv:  # emp_csv 의 내용을 한행씩 읽어서 리스트에 담고 
    print (i)             # 출력합니다. 

['7839', 'KING', 'PRESIDENT', '0', '1981-11-17', '5000', '0', '10']
['7698', 'BLAKE', 'MANAGER', '7839', '1981-05-01', '2850', '0', '30']
['7782', 'CLARK', 'MANAGER', '7839', '1981-05-09', '2450', '0', '10']
['7566', 'JONES', 'MANAGER', '7839', '1981-04-01', '2975', '0', '20']
['7654', 'MARTIN', 'SALESMAN', '7698', '1981-09-10', '1250', '1400', '30']
['7499', 'ALLEN', 'SALESMAN', '7698', '1981-02-11', '1600', '300', '30']
['7844', 'TURNER', 'SALESMAN', '7698', '1981-08-21', '1500', '0', '30']
['7900', 'JAMES', 'CLERK', '7698', '1981-12-11', '950', '0', '30']
['7521', 'WARD', 'SALESMAN', '7698', '1981-02-23', '1250', '500', '30']
['7902', 'FORD', 'ANALYST', '7566', '1981-12-11', '3000', '0', '20']
['7369', 'SMITH', 'CLERK', '7902', '1980-12-09', '800', '0', '20']
['7788', 'SCOTT', 'ANALYST', '7566', '1982-12-22', '3000', '0', '20']
['7876', 'ADAMS', 'CLERK', '7788', '1983-01-15', '1100', '0', '20']
['7934', 'MILLER', 'CLERK', '7782', '1982-01-11', '1300', '0', '10']

예제6.  사원번호만 출력하시오 !

file = open("d:\\data\\emp2.csv") 
emp_csv = csv.reader(file)  

for  i  in  emp_csv:  
    print (i[0])             

예제7.  사원이름과 월급을 출력하시오 !

힌트 :['7934', 'MILLER', 'CLERK', '7782', '1982-01-11', '1300', '0', '10']

import  csv 
file = open("d:\\data\\emp2.csv") 
emp_csv = csv.reader(file)  

for  i  in  emp_csv:  
    print (i[1], i[5])             

예제8.  사원번호가  7788 번인 사원의 사원번호, 이름과 월급을 출력하시오 !

import  csv 
file = open("d:\\data\\emp2.csv") 
emp_csv = csv.reader(file)  

for  i  in  emp_csv:   # emp_csv 파일 변수의 내용을 for 반복문으로 하나씩
    if  i[0] == '7788': 
        print (i[0], i[1], i[5])     
                               
예제9.  월급이 3000 이상인 사원들의 이름과 월급을 출력하시오 !

import  csv 
file = open("d:\\data\\emp2.csv") 
emp_csv = csv.reader(file)  

for  i  in  emp_csv:   # emp_csv 파일 변수의 내용을 for 반복문으로 하나씩
    if  int(i[5]) >= 3000:
        print (i[1], i[5])     

설명: 오라클의 to_number 와 같은 함수가 파이썬에서는 int  입니다. 
       리스트의 안의 요소들이 다 문자라고 숫자로 형변환을 해줘야 비교연산자를
       사용할 수 있습니다. 

문제16.  mtcars.csv 를  파이썬으로 로드하고 전체행을 출력하시오 !

import  csv 
file = open("d:\\data\\mtcars.csv") 
mtcars_csv = csv.reader(file)  

for  i  in  mtcars_csv:  
    print(i)

문제17.  mtcars.csv 를 열어서 맨위의 컬럼행을 지우고 mtcars2.csv 로 
           저장하시오

"","mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"

문제18.  mtcars2.csv 를 파이썬으로 로드하고 qsec 가 2.0 이상인 레코드만 출력
           하시오 !  ( 행전체를 다 출력하세요)

import  csv 
file = open("d:\\data\\mtcars.csv") 
mtcars_csv = csv.reader(file)  

for  i  in  mtcars_csv:  
    if  float(i[7]) >= 2.0:   
        print(i)

설명: float 함수를 이용해서 실수형으로 데이터 유형을 변환해줘야합니다.
       qsec 라는 컬럼의 데이터가 실수형으로 되어있으므로 int 로 변환하면 
       안되고 실수형으로 변환해줘야합니다. 

문제19. 직업이 SALESMAN 인 사원들의 이름과 직업과 월급을 출력하시오 !

import  csv 
file = open("d:\\data\\emp2.csv") 
emp_csv = csv.reader(file)  

for  i  in  emp_csv:  # 14번 반복하면서 csv 파일의 행을 하나씩 가져온다. 
    if  i[2] =='SALESMAN':  # 리스트의 2번째 요소가 SALESMAN 이면 
        print ( i[1], i[2], i[5] )  # 그 행의 1번째, 2번째, 5번째 컬럼을 출력해라 ~

문제20. 부서번호가 20번인 사원들의 이름과 월급과 부서번호를 출력하시오 !

import  csv 
file = open("d:\\data\\emp2.csv") 
emp_csv = csv.reader(file)  

for  i  in  emp_csv:  # 14번 반복하면서 csv 파일의 행을 하나씩 가져온다. 
    if  int(i[7]) == 20:  # 리스트의 7번째 요소가 20이면 
        print ( i[1], i[5], i[7] )  # 그 행의 1번째, 5번째, 7번째 컬럼을 출력해라 ~

예제1:

if  조건:
    실행코드1
else:
    실행코드2

문제21.   input  함수를 이용해서 숫자를 물어보게 하고 숫자를 입력하면
            해당 숫자가 출력되게하시오 !

a = input('숫자를 입력하세요 ~')

print (a) 

설명: input 함수를 이용하면 질문에 대한 입력값을 변수에 담을 수 있습니다. 

문제22. input 함수와 if ~ else 문을 이용해서 다음의 결과가 출력되게하시오 !
           (카페에 답을 올려주세요)

숫자를 입력하세요 ~    2

짝수 입니다.

숫자를 입력하세요 ~  3

홀수 입니다.

답:

a = input('숫자를 입력하세요')   #  값을 입력하면 문자로 a 변수에 담깁니다. 

if int(a) %2 == 1:  # 숫자로 변환해주고 2로 나눈 나머지값이 1이면 
    print ('홀수 입니다.')   # 이 문장을 실행합니다. 
else:                     # 그렇지 않으면 
    print ('짝수 입니다.')  # 이 문장을 실행합니다. 

문제23.  주사위의 눈을 담은 dice 변수를 만들고 숫자를 물어보게 해서
            해당 숫자가 주사위의 눈중에 있으면 해당 숫자가 있습니다. 라는
            메세지가 출력되게하고 없으면 해당 숫자가 없습니다. 라는 메세지가
            출력되게하시오 !  (카페에 답코드를 올려주세요)

숫자를 입력하세요 ~  2

  2(은/가) 주사위의 눈에 있습니다.

숫자를 입력하세요 ~  7

  7(은/가) 주사위의 눈에 없습니다. 

45분까지 쉬세요 ~~

문제24. (오늘의 마지막 문제)  숫자 두개를 아래와 같이 각각 물어보게 하고
         아래 처럼 메세지가 출력되게하시오 !

 첫번째 숫자를 입력하세요 ~  2
 두번째 숫자를 입력하세요 ~  3

  2는 3보다 작습니다.

 첫번째 숫자를 입력하세요 ~  3
 두번째 숫자를 입력하세요 ~  2

  3은 2보다 큽니다.      오늘은 같은 숫자는 넣지 마세요 

 5신호 보냈습니다.  자유롭게 자습하거나 상담있으면 상담진행하세요.
                  A반 스터디 진행자를 5시에 옆반에서 30분간 스터디가 있습니다

■ 10. if 문 개념 배우기 2 (if~elif)

 여러개의 조건을 순차적으로 체크하고 해당 조건이 참이면 특정 로직을
 수행하고자 할 때 if ~ elif 문을 사용합니다. 

예제1:  

if 조건1:
    실행코드1
elif  조건2:
    실행코드2
elif  조건3:
    실행코드3 
else:
    실행코드4   #  조건1, 조건2, 조건3에 해당하지 않으면 실행하는 코드 

예제2.  두개의 숫자를 물어보게하고 아래와 같이 두개의 숫자의 크기를 비교
          하는 결과가 출력되게하시오 !

첫번째 숫자를 입력하세요 ~  2
두번째 숫자를 입력하세요 ~  3

2 (는/은) 3보다 작습니다. 

첫번째 숫자를 입력하세요 ~  2
두번째 숫자를 입력하세요 ~  2

2 (는/은) 2와 같습니다. 

답:
a = input('첫번째 숫자를 입력하세요')
b = input('두번째 숫자를 입력하세요')
if int(a) > int(b):
    print(a, '는', b, '보다 큽니다')
elif  int(a) < int(b):
    print(a, '는', b, '보다 작습니다')
else:
    print(a, '는',b, '와 같습니다')

문제25.  emp2.csv 를 파이썬으로 로드하고 이름을 물어보게하고 이름을 입력하면
           해당 사원의 월급이 출력되게하시오 !

import  csv   # csv 모듈을 이 코드창에서 사용하겠다

file = open("d:\\data\\emp2.csv")  # os 의 emp2.csv 를 읽어서 file 변수에 입력
emp_csv = csv.reader(file)  # file 변수 csv 형태로 읽ㅇ서 emp_csv 변수에 넣는다. 

a = input('이름을 입력하세요 ~' )  # 이름을 입력하세요 ~ 질문을 화면에 출력
                                             # 값을 받아서 a 변수에 넣는다. 
for   i   in   emp_csv:   # csv 파일의 14개의 행을 하나씩 읽어서 i 변수에 넣는다
    if  i[1]== a:
        print (i[5])

문제26.  이름을 물어보게하고  이름을 입력해서 해당 사원의 월급이 3000 
            이상이면 고소득자 입니다. 그렇지 않고 2000이상이고 3000 보다 작으면
            중간 소득자 입니다.  위의 조건에 다 해당되지 않으면 월급 인상 대상자
            입니다. 라고 출력되게하시오 !

이름을 입력하세요 ~   SCOTT

고소득자입니다. 

import  csv   # csv 모듈을 이 코드창에서 사용하겠다

file = open("d:\\data\\emp2.csv")  # os 의 emp2.csv 를 읽어서 file 변수에 입력
emp_csv = csv.reader(file)  # file 변수 csv 형태로 읽어서 emp_csv 변수에 넣는다. 

a = input('이름을 입력하세요 ~' )  # 이름을 입력하세요 ~ 질문을 화면에 출력
                                             # 값을 받아서 a 변수에 넣는다. 
for   i   in   emp_csv:   # csv 파일의 14개의 행을 하나씩 읽어서 i 변수에 넣는다
    if  i[1]== a:
        if  int(i[5]) >= 3000:
            print ('고소득자 입니다.')
        elif  int(i[5]) >= 2000:
            print ('중간소득자 입니다.')
        else:
            print ('월급 인상 대상자 입니다.')      45분까지 쉬세요 ~~

■ 예제11. 반복문 for 문 개념 배우기

 특정 코드를 반복적으로 수행하기 위해서는 반복문을 사용해야하는데
 파이썬에서는 for 문이 반복문을 수행하기 위해 가장 많이 사용되는 
 문법입니다. 

예제1:   
for  변수  in  범위:
    실행문(반복적으로 실행할 코드)        

1. 리스트 범위인 경우 
for  i  in  [ 1, 2, 3 ]:
    print (i)

2. 튜플 범위인 경우
for  i  in  (1, 2, 3):
    print ('나는 파이썬 예제를 끝까지 공부하겠습니다.')

3. range() 범위인 경우 
 
* 숫자 0부터 10까지 출력하시오 !
print( list(range(10)))  # 0번부터 10미만까지 숫자를 반복해서 출력하는데
                            # list 함수로 감싸서 리스트 형태로 출력합니다. 

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

print ( list(range(1,10) ) )  # 1부터 9까지 리스트 형태로 출력

[1, 2, 3, 4, 5, 6, 7, 8, 9]

for  i  in   range(1, 10):  # 1부터 10미만까지 출력
    print(i)

for  i  in  range(1,10,2):  # 1, 3,  5,  7, 9 를 출력 
    print (i)

for  i  in  range(10, 1, -1): # 10부터 1씩 차감해서 2까지 출력
    print (i)

4. 사전형 범위인 경우
m = { 'i' : '나는',  'am' : '입니다.',  'boy' : '소년' }

for  i  in  m:
    print (i)

5. 문자형 범위인 경우 

for  i  in  'i  am a  boy':
    print (i)

문제27.  ★ 을 5개를 출력하세요 !

 ★★★★★

print ('★' * 5 ) 

문제28. (파이썬 알고리즘 문제1)  아래와 같은 결과가 출력되는 파이썬 코드를
          작성하시오 ! 카페에 답을 올려주세요 

숫자를 입력하세요 ~   5

★
★★
★★★
★★★★
★★★★★

a = int( input('숫자를 입력하세요 ~ ') )  5

for i in range(0, a):  #  0~4까지 범위가 설정이 됨
    print ('★' * int(i + 1))

※ 반복문 설명
  i = 0 ,   int(i + 1) -->  ★
  i = 1,    int(i + 1) -->  ★★
  i = 2,    int(i + 1) -->  ★★★
  i = 3,    int(i + 1) -->  ★★★★
  i = 4,    int(i + 1) -->  ★★★★★

문제29. ( 파이썬 알고리즘 2번)  다음과 같이 숫자를 물어보게하고 아래의 결과를
          출력하시오 !  카페에 답 코드를 올려주세요

숫자를 입력하세요 !   5

★★★★★
★★★★
★★★
★★
★

문제30. (파이썬으로 통계문제 풀기1)  아래의 dice 리스트를 이용해서
           주사위를 한번 던지시오 !

dice = [ 1, 2, 3, 4, 5, 6 ] 

답: 
import  random  # 파이썬 내장모듈인 random 을 이 코드에서 사용합니다.

dice = [1, 2, 3, 4, 5, 6]

random.choice(dice) # random 모듈의 choice 함수를 이용해서 dice 리스트의
                           # 요소중 하나를 랜덤으로 추출합니다. 

문제31. (파이썬으로 통계문제 풀기2) 주사위를 10번 던지세요 ~

import  random  

dice = [1, 2, 3, 4, 5, 6]

for  i  in  range(1, 11):
    print( random.choice(dice) )

문제32. (파이썬으로 통계문제 풀기3) 동전을 10번 던지세요 ~  
           앞면 또는 뒷면이 나오면 됩니다. 

import  random

coin = ['앞면', '뒷면']

for  i  in   range(1, 11):
    print(random.choice(coin))

문제33. (파이썬으로 통계문제 풀기4)  동전을 10번 던져서 앞면이 나오는 
          횟수를 출력하시오 !

import  random

coin = ['앞면', '뒷면']
cnt = 0   # cnt 라는 변수에 0 을 할당 합니다. 

for  i  in   range(1, 11):
    result = random.choice(coin)  # 동전을 던진 결과를 result 변수에 할당합니다
    if  result == '앞면':  #  result 가 앞면이면 
        cnt = cnt + 1     #  cnt 를 1 증가시켜라 

print (cnt)  # for 반복문이 다 수행되고 나서 cnt 변수에 할당된 값을 출력한다.

※ print 의 위치가 for 문과 동등한 위치에 있으면 print 는 for 문이 다 수행되고
   나서 독립적으로 수행되는 코드라는 뜻입니다.

문제34.  (파이썬으로 통계문제 풀기5) 
           동전을 1000 번 던졌을때 동전이 앞면이 나오는 확률은 어떻게 되는가?

import random
coin = ['앞면','뒷면']
cnt = 0   # 건수를 카운트 하기 위해 선언한 변수 
for i in range(1,1001):   # 동전 1000 번 던진다. 
    result = random.choice(coin)  # 동전 던지기의 결과가 
    if result == '앞면':      # 앞면이 나오면
        cnt = cnt + 1        # 1 씩 증가 시키겠다. 
print(cnt / 1000)  # 전체 시행횟수로 나눠서 확률을 구합니다. 

문제35. (파이썬으로 통계문제 풀기6) 주사위를 1000 번 던지고 
          주사위의 눈이 5가 나올 확률을 구하시오 !

import random
dice = [1,2,3,4,5,6]  # 주사위를 만들고 
cnt = 0                # 건수를 카운트 하기 위한 변수를 만듭니다. 
for i in range(1,1001):   # 주사위를 1000 번 던지는데 
    result = (random.choice(dice))   #  주사위의 결과가 
    if result == 5:     # 숫자 5가 나오면 
        cnt = cnt + 1  # 1씩 카운트 합니다. 
print(cnt/1000)         # 전체 시행횟수로 나눠서 확률을 구합니다. 

문제36. (파이썬으로 통계문제 풀기7)  주사위와 동전을 동시에 던져서
           주사위의 눈이 6 이 나오고 동전이 앞면이 나오는 확률을 구하시오 !
           ( 주사위와 동전을 동시에 1000 번 던지세요 ~)

import random     # 랜덤 모듈을 이 코드창에서 사용하겠습니다. 
cnt=0                 #  건수를 카운트 하기 위한 변수를 생성하고 
dice = [1,2,3,4,5,6]  #  주사위를 만들고 
coin = ['앞','뒤']      # 동전을 만듭니다. 
for i in range(1000):  #  주사위와 동전을 1000 번 던지는데 
    result1 =random.choice(dice)  #  주사위와 
    result2 =random.choice(coin)  #  동전의 결과가 
    if result1 == 6 and result2 == '앞':  #  6과 앞이 나오면 
        cnt=cnt+1                              #  1씩 건수를 증가 시킵니다. 
print(cnt/1000)    #  그 건수를 모든 시행횟수로 나눠서 확률을 구합니다. 


■ 예제12.  중첩 for  loop 문 

  반복문 자체를 반복 시키고 싶을 때 중첩 for  loop 문을 사용합니다. 

문법:

for  인덱스변수  in  범위:
    for  인덱스변수  in  범위:

설명: loop문을 중첩시켜서 loop 문 자체를 반복시킵니다. 

예제1.  구구단 2단을 출력하세요 !

 2 x 1 = 2
 2 x 2 = 4
 2 x 3 = 6
    :
 2 x 9 = 18

for  i  in  range(1, 10):
    print ( '2 x ' , i , ' = ' , 2*i ) 

예제2.  구구단 2단부터 9단까지 출력하시오 

for  j  in  range(2, 10):  #  2부터 9까지 j 를 반복합니다.
    for  i  in  range(1, 10): # 1부터 9까지 i 를 반복합니다. 
        print ( j, ' x ' , i , ' = ' , j*i ) 

설명:  j = 2 일때 i 가 1 ~ 9까지 반복 실행 
        j = 3 일때 i 가 1 ~ 9까지 반복 실행 
              :
       j = 9  일때 i 가 1~ 9까지 반복 실행 

문제37.  동전을 100번 던져서 앞면이 나올 확률을 출력하시오 !

import  random

coin = ['앞면', '뒷면']
cnt = 0 
for  i  in  range(1, 101):
    result =random.choice(coin)
    if  result =='앞면':
        cnt = cnt + 1
print (cnt/100)

문제38.  위의 작업을 5번 반복해서 5개의 확률을 출력하시오 !

import  random

for  j in  range(1,6):
    coin = ['앞면', '뒷면']
    cnt = 0 
    for  i  in  range(1, 101):
        result =random.choice(coin)
        if  result =='앞면':
            cnt = cnt + 1
    print ('동전 앞면이 나올 확률:' , cnt/100)

■ 예제13. 리스트 자료형의 append 메소드 배우기 

 리스트에 요소를 추가하고 싶을때 사용하는 함수(메소드) 입니다. 

예제1.  

a = [ 1, 2, 3, 4, 5 ]  #  숫자 1,2,3,4,5 를 담는 리스트 변수 a 를 만들고 
a.append(6)          #  a 리스트에 요소 6을 추가시킵니다. 
print (a) 

예제2.  아래의 coin 변수를 만들고 여기에 뒷면을 추가 시키시오 

coin = ['앞면']
coin.append('뒷면')
print (coin)

예제3.  coin 리스트에 추가된 요소를 제거하시오 !

coin = ['앞면']
coin.append('뒷면')
print (coin)
coin.pop()
print(coin)

설명: append 는 추가하는 것이고 pop() 은 제거하는것 입니다. 

45분까지 쉬세요 ~~

예제4.  비어있는 리스트를 만들고 비어있는 리스트에 요소를 추가하기 

a = [ ]
a.append(1)
a.append(2)
print (a)

문제39. 아래의 문제38번 코드에 코드를 추가해서 비어있는 a 리스트에
          확률 5개를 추가하고 a 리스트를 프린트하세요

import  random

a = []  # 비어있는 리스트를 생성합니다. 
for  j in  range(1,6):
    coin = ['앞면', '뒷면']
    cnt = 0 
    for  i  in  range(1, 101):
        result =random.choice(coin)
        if  result =='앞면':
            cnt = cnt + 1
    a.append(cnt/100)
print (a)

문제40. (파이썬으로 통계문제 풀기8) 두개의 동전을 동시에 300번 던져서
          둘다 앞면이 나오는 확률을 출력하시오 ! 

import random
coin = ['앞면', '뒷면']

cnt = 0
for i in range(300):
    if random.choice(coin) == '앞면' and random.choice(coin) == '앞면':
        cnt = cnt + 1
print(cnt/300*100, '%')

문제41.  (파이썬으로 통계문제 풀기9) 위의 확률 출력하는것을 10번 수행해서
           비어있는 리스트 a 에 10개를 담고 a 리스트를 출력하시오 !

카페에 올려주세요 ~~

import random
coin1 = ['앞면','뒷면']   #  동전 2개를 
coin2 = ['앞면','뒷면']   #  만듭니다.
a = []
for i in range(1,11):    #  확률을 10개를 담기위해 10번 반복합니다. 
    num = 0
    for i in range(1,301):   # 동전 2개를 300번 던집니다. 
        result1 = random.choice(coin1)  
        result2 = random.choice(coin2)
        if result1 == '앞면' and result2 == '앞면':  # 둘다 앞면이 나오면
            num = num + 1       # num 변수를 1씩 증가 시킵니다. 
    a.append(num/300)    # 확률을 비어있는 리스트 a 에 추가시킵니다. 
print(a)  # a 리스트를 출력합니다. 


문제41.  (파이썬으로 통계문제 풀기10) 서울시 초등학생 백만명의 키를
          모집단으로 구성하는데 평균키가 140 이고 표준편차를 30으로 
          하는 모집단을 만드시오 ! 

import  numpy   as  np   #  행렬과 수학 연산을 아주 쉽게 구현할 수 있게
                                  # 해주는 파이썬 모듈입니다. 

avg = 140
std  = 30
N = 1000000
height = np.random.randn(N) * std + avg
print (height)

※ 가우시안 정규분포를 따르는 난수가 생성이 됩니다. 

 45분까지 쉬세요 ~~

오픈북은 아니고 실습으로 문제를 풀고 답을 인터넷으로 올리면 됩니다. 

다음주 금요일(5월 21일) 4시 ~ 5시: SQL 응용 10문제(SQL 문제)


그 다음주 금요일(5월 28일)  4시 ~ 5시 : SQL 10문제
                                 (수학(통계)를 코드로 구현 목차 리스트)

문제42.  (파이썬으로 통계문제 풀기11)  아래의 a 리스트의 숫자값들의 
           평균값을 출력하시오 !

a = [ 20, 22, 52, 12, 44, 29, 29, 11, 12, 100]

import  numpy   as  np

a2 = np.array(a)   #  a 리스트를 numpy  array 형태로 변경합니다. 
print (a2)   # numpy 배열로 변경해줘야 행렬연산, 수학연산, 통계작업등
               # 수학과 관련한 많은것을 아주 ~~ 편하게 할 수 있습니다.
print( a2.mean() )   # 평균값 출력

문제43.  (파이썬으로 통계문제 풀기12) 초등학생 키 백만개중에 30개를 키
           데이터를 복원 추출하시오 ~ 

import  numpy   as  np  

avg = 140
std  = 30
N = 1000000
height = np.random.randn(N) * std + avg

result = np.random.choice( height, 30)  # heght 에서 30개를 복원추출합니다. 
print(result )

문제43.  (파이썬으로 통계문제 풀기13) 위의 30개의 평균값을 출력하세요

import  numpy   as  np  

avg = 140
std  = 30
N = 1000000
height = np.random.randn(N) * std + avg

result = np.random.choice( height, 30)  # heght 에서 30개를 복원추출합니다. 
print(result.mean() )

문제44. (파이썬으로 통계문제 풀기14) 위의 작업을 200 번 반복해서 
          어제 점심시간 문제를 해결하세요 ~~

import  numpy   as  np  

avg = 140
std  = 30
N = 1000000
height = np.random.randn(N) * std + avg

for  i  in  range(1,201):
    result = np.random.choice( height, 30)  # heght 에서 30개를 복원추출합니다. 
    print(i, '번째 표본의 평균값은 ', result.mean() )
 
문제45.  emp2.csv 를 파이썬으로 로드하고  월급을 비어있는 리스트 a 에 append 시키시오

import   csv

file = open("d:\\data\\emp2.csv")
emp_csv = csv.reader(file)

a = []  # 비어있는 리스트를 만듭니다. 
for  i  in   emp_csv:  #  emp_csv 의 행을 하나씩 불러와서 i 에 입력합니다. 
    a.append( int(i[5]) )   # 가져온 행의 5번째 요소를 a 리스트에 추가합니다. 

print (a) 

[5000, 2850, 2450, 2975, 1250, 1600, 1500, 950, 1250, 3000, 800, 3000, 1100, 1300]

문제46.  emp2.csv 의 월급의 평균값을 출력하시오 !


 45분까지 쉬세요 ~~~~~

문제47. (오늘의 마지막 문제)  두개의 주사위를 동시에 던져서 하나는 짝수
           다른 하나는 홀수가 나오는 확률은 ?  10000 번 던지세요 ~


 5시 신호 보냈습니다. ~~~
 6시 신호 보냈습니다.  ~~~~
  자유롭게 자습 또는 스터디 하시면 됩니다.  ~~

■ 예제13. for문 개념 배우기 ② (for~continue~break)

  for 반복문 내에서 continue 를 만나면 그 다음 반복 실행으로 넘어가며
  break 를 만나면 for 반복문을 완전히 벗어나게 됩니다. 

예제:
for  변수  in  범위:
    실행코드 
continue  #  이 부분은 그냥 지나치고 다음 반복문을 수행해라 ~
    실행코드
break      #  for  반복문을 탈출 

문제48.  숫자 1번부터 10번까지 출력하시오 ~

for  i  in  range(1, 11): # 1부터 11미만까지 
    print (i)

문제49. 위의 결과에서 숫자 5만 출력하지 않고 나머지 숫자만 출력하시오!

for  i  in  range(1,11):
    if  i == 5:
        continue  #  이 부분을 그냥 지나치고 다음 루프 실행문을 계속 실행해라
    print (i)

문제50.  1부터 10까지를 출력하는데 짝수만 출력되게하시오 !
            ( continue 써서 해보세요)

for  i  in  range(1,11):
    if  i % 2==1:  # i 가 홀수이면
        continue  #  재껴라 ~
    print (i)

■ for 문에서 사용하는 break 문 

 " 루프문을 중단 시키는 역활을 하는 키워드"

예제:

for  i  in  range(1, 11): # 1부터 10까지 루프를 돌리는데 
    print(i)                 # i 를 출력하다가 
    if  i == 3:             # i 가 3이면 
        break              # 루프문을 종료시켜라 

문제51. 1부터 100까지 출력하는 for loop문을 작성하는데 다음과 같이
          숫자를 물어보게해서 입력된 숫자까지만 출력되게하시오 ! (break 사용)

숫자를 입력하세요 ~  7

1
2
3
4
5
6
7

답:
a = int( input('숫자를 입력하세요 ~') )  # 변수 a 에 숫자를 입력받고

for  i  in  range(1, 101):                     # i 를 1부터 100까지 
    print (i)                                     # 출력하는데 
    if  i == a:                                  # 그런데 만약 i 가 a의 변수의 값이라면
        break                                   # 멈춰라 ~

문제52. (파이썬으로 알고리즘 문제 풀기1)  두 숫자를 각각 물어보게하고 
          두 숫자를 입력받아 두 숫자의 최대 공약수를 출력하시오 

힌트:  16%i == 0  and  24%i == 0
힌트:  print (max(16,24) )   # max 함수를 쓰면 두 숫자중 큰 숫자가 출력됩니다.

첫번째 숫자를 입력하세요 ~  16
두번째 숫자를 입력하세요 ~  24

최대 공약수는 8 입니다. 

카페에 올려주세요 ~

다희답:

a = int(input('첫번째 숫자를 입력하세요')) 
b = int(input('첫번째 숫자를 입력하세요'))
c = []
for i in range(1, min(a,b)+1): 
    if a%i == 0 and b%i == 0:
        c.append(i)
print('최대공약수는',max(c), '입니다')

45분까지 쉬세요 ~~

■ 예제14.  for문 개념 배우기 ③ (for~else)

 for 반복문을 완전히 수행했을 때만 실행하는 부분을 정의하려면
 for ~ else 문을 사용해야 합니다. 
 for ~ else 에서 else 뒤에 실행되는 코드는 for 반복문을 
 성공적으로 수행해야지만 실행됩니다.

예제1:
for  i  in  range(1, 11):
    print (i)
else:
    print ('perfect')

코드설명:  break 에 의해서 루프문이 중단이 되면 else 다음에 실행문은
실행되지 않습니다. 

문제53.  위의 코드를 수정해서 숫자를 물어보게 하고 입력한 숫자까지만
           출력되게하고 맨끝에 perfect 이라는 단어가 출력되게하시오 !

a = int ( input('숫자를 입력하세요 ~') )   # 여기서 숫자를 입력하고 

for  i  in   range( 1, a+1):                     # 입력된 숫자만큼 1부터 
    print (i)                                        # 출력됩니다. 
else:                                                # 위의 루프문이 성공적으로 끝나면
    print ('perfect')                              # perfect 을 프린트 합니다. 

문제54. 위의 코드를 수정해서 중단할 숫자를 또 물어보게하고 아래와 같이
           실행되게 하시오 !

숫자를 입력하세요 ~   10
중단할 숫자를 입력하세요 ~  5

 1
 2
 3
 4
 5 


a = int ( input('숫자를 입력하세요 ~') )   # 여기서 숫자를 입력하고
b = int ( input('중단할 숫자를 입력하세요 ~') ) 

for  i  in   range( 1, a+1):                     # 입력된 숫자만큼 1부터 
    print (i)                                        # 출력됩니다. 
    if i == b:                                      # i 가 b의 변수의 값이면
        break                                      # 루프문을 멈춤니다
else:                                                # 위의 루프문이 성공적으로 끝나면
    print ('perfect')                              # perfect 을 프린트 합니다. 

■ 예제15. while문 개념 배우기(while~continue~break)

  for  루프문처럼 while 루프문도 같은 반복문 입니다. 
  for  루프문은 특정범위에서 반복 실행하게 하는 반면에
  while 루프문은 특정 조건에서 코드를 반복 실행하게 합니다. 

  for  루프문                   vs            while  루프문 
                                                 x = 1
for  i  in  range(1, 11):                    while  x < 11:   
    print (i)                                       print (x)
                                                     x = x + 1 

코드설명: 
x = 1               # x 변수에 1을 할당 합니다. 
while x < 11:     # x < 11 보다 작다는 조건하에서만 다음 실행문을 실행합니다.
    print (x)        # x 를 출력합니다.
    x = x + 1      # x 를 1 증가시킵니다. 

문제55.   구구단 2단을 while 루프문으로 출력하세요 !

2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
  :        :
2 x 9 = 18

답:
x = 1
while x < 10:
    print ('2 x ', x, '=', 2*x)
    x = x + 1

문제56.  아래와 같이 결과가 출력되게하시오 ! (while 루프문으로 하세요)

숫자를 입력하세요 ~  5

★
★★
★★★
★★★★
★★★★★

a = int(input('숫자를 입력하세요'))
x = 1
while x < a+1:
    print ('★'*x)
    x = x + 1

문제57. (파이썬 알고리즘 문제풀기 2)  아래의 결과를 코드로 구현하시오 !

숫자를 입력하세요 ~   5

★★★★★
★★★★
★★★
★★
★

while loop 문으로 하고 카페에 올려주세요 ~~

승연이 답:

a=int(input("숫자를 입력하세요~"))      # 숫자를 입력받습니다. 
x=1                                              # x 변수에 1을 할당합니다
while x<a+1:                                  # 1 < 입력받은 숫자 +1 조건하에 반복문
    print('★'*a)                                # 을 실행합니다.
    a=a-1                                       # a 변수의 값을 1씩 차감합니다. 

문제58. (파이썬으로 알고리즘 문제풀기3)  1부터 10까지의 곱은 ?
           (while loop문으로 해보세요 ~ 카페에 올려주세요)

 힌트:  cnt =  cnt + 1 
         cnt =  cnt * 1

민석이 코드:

x=1                                
a=1
while x < 11:                         x < 11         a = x * a     x = x + 1 
    a = x*a                            1 < 11         a = 1 * 1     x = 1 + 1 
    x = x+1                            2 < 11        a =  2 * 1     x = 2 + 1
print(a)                                 3 < 11        a = 3 * 2      x = 3 + 1
                                           4 < 11        a = 4 * 6     x = 4 + 1
                                             :                 :                 :
                                           10< 11       a =  ?          x = 10 +1

문제59. (파이썬으로 통계 문제 풀기15) 아래의 주머니에 빨간공 3개와 파란공 2개가
          있다.  주머니에서 1개의 공을 뽑았을때 빨간공이 나올 확률은 어떻게 
          되는가 ?   ( 공을 10000 번 추출해봅니다)  답글로 올리세요 ~



점심시간 문제: A 반은 라인 검사, B 반은 카페에 올리고 식사하러 가세요 ~~~

■ 예제16. None 개념 배우기

 None 은 아무것도 없다는 의미의 상수입니다.
 아무것도 없다는것을 나타내기 위해서 주로 활용됩니다. 

예:  
x = 0             # 숫자 0 을 할당함 
while  x < 10:
    print (x)
    x = x + 1   # x + 1 이 숫자 연산입니다. 

위의 while loop 문에서의 x 변수는 숫자만 담기는 변수입니다.
그런데 어떨때는 숫자가 들어갈 수 도 있고 어떨때는 문자가 들어갈 수도 있어서
처음에 변수 선언시 결정을 잘 못하겠다면 아래와 같이 None 을 이용해서
변수를 생성하면 됩니다. 

x = None                  # 앞으로 x 에 어떤 유형의 데이터가 들어올지 몰라서 
a = 1                       # None (아무것도 없다) 으로 할당했음
if  a == 1:
    x = [ 1, 2, 3 ]
else:
    x = 'i love python'
print(x)

■ 17. 정수형 자료 이해하기

 자연수(1, 2, 3, ....) 와 음수(-1, -2, -3, ...) 와 0 으로 이루어진 수의 체계를
 정수라고 합니다. 

예제1:
a = 123
b = -178
c = 0
print (b)

일반 프로그래밍에서 지원하는 정수형 상수의 범위는
-2,147,473,647  ~  2,147,473,647 인데 (2의 31승) 
파이썬은 메모리가 허용하는 범위에서 지원 가능한 수를 다 사용할 수 있습니다.

문제60.  위의 말이 맞는지 for loop 문으로 테스트해서 확인하시오 !
            
for  i  in   range(1000000000000000000000000000000000000000000000000):
    a = i
    print (i)

문제61.  3의 2승을 파이썬으로 출력하세요 !

print ( 3**2)  

문제62. 루트4를 파이썬으로 출력하세요  

import   math  

print ( math.sqrt(4) )

문제63.  0 ~ 1사이의 난수를 출력하시오 !

import  random
print ( random.uniform(0,1) )  # 0~1사의 난수가 출력됨

문제64.  원주율을 몬테카를로 알고리즘으로 알아내시오 !

import  random

cnt = 0
for  i  in range(1, 10001):
    x = random.uniform(0,1)  #  0~1사이의 난수 생성 
    y = random.uniform(0,1)  #  0~1사이의 난수 생성 
    if  x**2 + y**2 <= 1:   # 부채꼴안의 점이라면 
        cnt = cnt + 1

print ( cnt/10000 * 4 )

■ 18. 실수형 자료 이해하기

 실수는 소수로 나타낼 수 있는 유리수와 소수로 나타낼 수 없는 무리수로
 구성된 집합입니다. ( 무리수의 예:  원주율, 오일러 자연상수 e)
 파이썬은 실수를 지원하기 위해서 부동 소수형을 제공합니다. 

* 부동 소수형의 특징

1. 8 바이트만 이용해서 수를 표현합니다. 즉 한정된 범위의 수만 표현할 수 있다.
2. 디지털 방식으로 소수를 표현해야하므로 정밀도의 한계가 있습니다. 

예제1. 소수 43.2 에서 소수 43.1 을 빼면 얼마인지 파이썬으로 구현하시오 !


이 부동 소수형의 문제는 비단 파이썬만의 문제가 아니라 부동 소수형이
어떻게 구성되고 동작되는가를 정의하는 표준인 IEEE 754 를 따르는 
모든 컴퓨터 시스템의 문제입니다. IEEE 754 는 제한된 메모리를 이용해서
(파이썬의 경우는 8바이트) 실수를 표현하기 때문에 제한된 정밀도를 갖습니다. 

45분 까지 쉬세요 ~~

■ 예제19. 복소수형 자료 이해하기

    복소수  

실수           허수 
 ↓              ↓
정수            i 를 제곱하면 -1 이 되는 수 
유리수
무리수 
  
복소수는 실수부와 허수부로 되어있고 허수부는 숫자 뒤에 문자 i 를
이용하는데 파이썬은 j 를 사용합니다. 

예제1.  c1 = 1  + 7j
                ↑     ↑
            실수부  허수부 

c1 = 1  + 7j
print ( c1.real)  #  복소수형 자료에서 실수부만 취한다.
print ( c1.imag)  # 복소수형 자료에서 허수부만 취한다. 

c2 = complex(2, 3)  #  실수부가 2이고 허수부가 3인 복소수를 만든다.
print (c2)  # (2+3j)

문제65. 아래의 수학식을 파이썬으로 구현해서 답을 출력하시오 !

c1 = complex(1,-2)
result = c1**2 - 2*c1 -12
print (result)  # (-17+0j)

■ 예제20. 대입 연산자 이해하기(=)

 변수에 값을 대입하는데 사용되는 기호는 = 입니다. 
 수학에서는 = 은 = 왼쪽과  오른쪽의 값이 같다는 의미를 같지만
 파이썬을 포함한 컴퓨터 프로그래밍 언어에서는 = 은 = 왼쪽변수에
 값을 = 오른쪽에 대압하겠다는 의미입니다. 

예제1 :   a = 7 

* 대입연산자와 일반 연산자를 비교

1. = : 대입연산자
2. == : 같다
3. in   : 여러개의 값을 비교

문제66. 주사위 1개를 10번 던지세요

import  random

dice = [ 1, 2, 3, 4, 5, 6 ]
for  i  in  range( 1, 11):
    result = random.choice(dice)
    print (result)

문제67. 주사위를 10번 던져서 주사위의 눈이 3이 나오는 횟수를 출력하시오 !


결과:  3이 2번 나왔습니다. 

import  random

dice = [ 1, 2, 3, 4, 5, 6 ]
cnt = 0
for  i  in  range( 1, 11):
    result = random.choice(dice)
    if  result == 3:
        cnt = cnt + 1

print (' 3이 ', cnt, '번 나왔습니다')    

문제68.  주사위를 10번 던져서 주사위의 눈이 2와 5가 나오는 횟수를 출력하시오

결과: 주사위의 눈 2와 5가 합쳐서  4번 나왔습니다. 

import  random

dice = [ 1, 2, 3, 4, 5, 6 ]
cnt = 0
for  i  in  range( 1, 11):
    result = random.choice(dice)
    if  result  in  (2, 5):
        cnt = cnt + 1

print (' 2와 5가 합쳐서 ', cnt, '번 나왔습니다')    

예제21. 사칙 연산자 이해하기( , -, *, /, **)

* 사칙 연산자를 파이썬과 오라클과 비교 

   오라클                              파이썬 
      +                                     +
       -                                     -
       *                                     *
       /                                     /
      mod                                 %
      power                            power(2,3) ,  2**3
      sqrt                                sqrt
      log2                               log2      --> 밑수가 2인 로그함수
      log10                             log10     --> 밑수가 10인 로그함수 

예제1. 밑수가 10이고 진수가 10인 log 값을 출력하시오 !
         (log 함수를 사용하려면 math 모듈을 import 해야 합니다.)

import   math  

print ( math.log10(10) )

문제69. 아래의 수학식을 파이썬으로 구현하시오 !

import  math

print ( 2 * math.log2(10) + (1/3) * math.log2(10) )

인문학 (사람들이 필요로하는 서비스에 대한 아이디어)
      ↓
수학으로 식을 세운다.
      ↓
수학식을 코딩으로 구현해서 완성 

■ 예제22.  연산자 축약 이해하기( =, -=, *=, /=)

  변수에 값을 사칙 연산하여 그 결과를 동일한 변수에 대입할 때
  연산자를 축약해서 대입할 수 있습니다. 

예제1.   cnt = cnt + 1 을 다음과 같이 쓸 수 있습니다.
                   
           cnt += 1     
                                       축약 
예제2.   cnt = cnt + 1 --------------------->  cnt += 1 과 같다
           cnt = cnt - 1  --------------------->  cnt -=  1 과 같다
           cnt = cnt * 2  --------------------->  cnt *= 2 과 같다
           cnt = cnt / 4  --------------------->  cnt /= 4 와 같다. 

문제70.  아래의 문제 68번 코드를 축약 연산자로 변경해서 수행하시오 !

import  random

dice = [ 1, 2, 3, 4, 5, 6 ]
cnt = 0
for  i  in  range( 1, 11):
    result = random.choice(dice)
    if  result  in  (2, 5):
        cnt = cnt + 1                                               45분까지 쉬세요 ~~

print (' 2와 5가 합쳐서 ', cnt, '번 나왔습니다')    

■ 예제23.  True와 False 이해하기

  참을 나타내는것이 True 이고 거짓을 나타내는 것이 False 입니다.
  조건을 판단해서 그 조건이 참이면 True, 거짓이면 False 를 리턴합니다.
  True 는 1,  False 는 0 값을 가집니다. 참과 거짓을 나타낼때는
  True 와 False 로 표현하면 더 직관적이고 프로그램 코드 가독성을 높일 수 
  있습니다.

예제1.
a = True 
b = False 
print (a)
print ( 1 == 1 )  # 결과가 True 가 출력됩니다. 
print ( 1 == 2 )  # 결과가 False 가 출력됩니다. 

예제2. 
while  True:   # 무한루프가 돕니다. 
    print ('aaaa')

■ 예제24. 관계 연산자 이해하기(==, !=, ＜, ＜=, ＞, ＞=)

         오라클               vs                 파이썬
            >                                         >
            >=                                       >=
            <                                         <
            <=                                       <=
            =                                          ==
            !=                                         !=
            in                                         in 

문제71.  두개의 주사위를 동시에 던져서 하나는 짝수 하나는 홀수가 
            나오는 확률은?  (주사위를 10000 번 던지세요) 

import  random

dice1 = [ 1, 2, 3, 4, 5, 6 ]
dice2 = [ 1, 2, 3, 4, 5, 6 ]
cnt = 0 
for  i   in   range(1, 10001):
    result1 = random.choice(dice1)
    result2 = random.choice(dice2)
    if  (result1 + result2) % 2 ==1:
        cnt = cnt + 1
print ( cnt / 10000 * 100)

예제25.  논리 연산자 이해하기(and, or, not)

    오라클                 vs             파이썬 
    and                                     and
     or                                       or 
    not                                       not

문제72. emp2.csv 를 파이썬으로 로드하고  직업이 SALESMAN 이고 월급이 1000 이상인
          사원들의 이름과 월급과 직업을 출력하시오 !

import   csv

file = open("d:\\data\\emp2.csv")                   # emp2.csv 를 파이썬으로 
emp_csv = csv.reader(file)                                # 가져와서 

for  i  in   emp_csv:                                        # emp_csv 를 하나씩 읽어들여
    if  i[2] =='SALESMAN'  and  int(i[5]) >= 1000:  # 만약에 emp_csv 의 리스트 한행의
        print ( i[1], i[5], i[2] )                               # 2번째가 SALESMAN 이고 
                                                                 # 5번째가 1000 이상이면 
                                                                 # 1번째와 5번째와 2번째를 출력합니다.

■ 예제26.  판다스 모듈 이해하기

* Pandas 란 ?    1. 데이터 분석을 위한 파이썬 모듈
                      2. 엑셀의 스프레드 시트와 같은 관계형 데이터 베이스의 
                         데이터 처리 능력이 뛰어남
                      3. 판다스는 DataFrame 이라는 기본 자료구조를 사용합니다. 
                         (오라클의 테이블과 유사함)

예제1. emp3.csv 를 판다스의 데이터 프레임으로 만드시오 !
           ↓ 
  컬럼명이 있습니다. 

import  pandas  as  pd

emp = pd.read_csv("d:\\data\\emp3.csv")
emp

문제73.  사원 테이블에서 이름과 월급을 출력하시오 !

SQL> select  ename, sal
          from   emp;

Pandas>   emp[ ['ename','sal']  ]  

문제74. 월급이 3000 이상인 사원들의 이름과 월급을 출력하시오 !

SQL> select  ename, sal
          from  emp
          where  sal >= 3000;

Pandas> emp [ ['ename','sal'] ] [ emp['sal'] >= 3000 ]

문제75.  직업이 SALESMAN 이고 월급이 1000 이상인 사원들의 이름과 월급과 직업을 
           출력하시오 !

Pandas> emp [ ['ename','sal', 'job'] ] [ (emp['sal'] >= 1000) & (emp['job']=='SALESMAN') ]

설명:  판다스에서는  and 가  & 
                            or  가  |    
5시 신호 보냈습니다. 

문제76. (오늘의 마지막 문제)  지난번 문제18번을 판다스를 이용해서 출력하세요 !

문제18.  mtcars2.csv 를 파이썬으로 로드하고 qsec 가 2.0 이상인 레코드만 출력
           하시오 !  ( 행전체를 다 출력하세요)

import  csv 
file = open("d:\\data\\mtcars.csv") 
mtcars_csv = csv.reader(file)  

for  i  in  mtcars_csv:  
    if  float(i[7]) >= 2.0:   
        print(i)


문제77.  부서번호가 20번인 사원들의 이름과 월급과 부서번호를 출력하시오 !
           ( 판다스로 하세요 ~)

import  pandas   as  pd

emp = pd.read_csv("d:\\data\\emp3.csv")

emp[ ['ename', 'sal', 'deptno'] ] [ emp['deptno']==20 ] 

■ 예제27. 시퀀스 자료형 이해하기

 시퀀스 자료형은 어떤 객체가 순서를 가지고 나열되어 있는것을
 말합니다. 예를 들어 문자열 'abcd' 는 문자 a, b, c, d 가 순서를 
  가지고 차례데로 나열되어 있는 것입니다. 

예:  
a = 'scott'
print (a)  # scott

위의 scott 이라는 문자를 담은 a 변수에서 첫번째 요소만 출력하고 싶다면 ?

print (a[0])  # s
print (a[1])  # c  

문제78. 위의 scott 문자를 담은 변수 a 에서  알파벳 o 만 출력하시오 !

print ( a[2] )

문제79. emp 판다스 데이터 프레임에서 ename 만 출력하시오 !

import  pandas   as  pd

emp = pd.read_csv("d:\\data\\emp3.csv")

emp[ 컬럼명 ] [ 검색 조건 ]

print( type(emp[ 'ename' ]) )
 
            판다스                                           오라클 
<class 'pandas.core.series.Series'>                    컬럼 

<class 'pandas.core.frame.DataFrame'>             테이블 

print( emp[ 'ename' ] )

시리즈(오라클 컬럼)의 요소들을 하나씩 출력하려면 for loop 문을 사용해야합니다

for  i  in  emp['ename']:
    print (i)

문제80. 이름을 출력하고 그 옆에 이름의 첫번째 철자를 출력하시오 !

SQL> select  ename, substr(ename, 1, 1)0
          from  dual;

Pandas>  
for  i  in  emp['ename']:
    print ( i, i[0] )

문제81. 위의 결과를 루프문 쓰지 말고 판다스만 이용해서 수행하시오 !

                                         출력값 
                                            ↓
emp['ename'].apply(lambda  x :  x[0])
                                     ↑    
                                입력값을 받는 매개변수 

예:  select   lower('SCOTT') from  dual; 

  scott  <--   출력값 

설명:  apply 를 쓰게되면 emp['ename'] 의 데이터를 하나씩 apply 다음에 나오는
        함수에 넣게 됩니다. 

lambda 란 ?   함수이름이 없는 한줄 짜리 함수 

emp['ename'].apply(lambda  x :  x[0])

문제82.  이름의 끝글자만 출력하시오 !

SQL> select  substr( ename, -1, 1 )
           from  emp;

Pandas>

emp['ename'].apply(lambda  x :  x[-1])

문제83.  이름과 이름의 끝글자를 같이 출력하시오 !

# emp 데이터 프레임 맨 끝에 end_ename 이라는 이름으로 컬럼을 추가하는데
# 추가되는 데이터가 이름의 끝글자 입니다. 
emp['end_ename'] = emp['ename'].apply(lambda  x :  x[-1])
emp

emp[ 컬럼 ] [ 검색조건 ] 
emp[ ['ename', 'end_ename'] ]

예제28. 시퀀스 자료 인덱싱 이해하기

 인덱싱(indexing) 이란 시퀀스 자료형에서 인덱스를 통해 해당하는 값을
 얻는 방법입니다. 파이썬에서는 인덱스를 0 부터 시작하며 음수인 인덱스도
 가능합니다. 음수 인덱스 '끝에서 몇 번째' 라는 의미를 갖습니다. 

예:  a = 'SALESMAN'
     print ( a[2] )  #  L

문제84.  이름의 두번째 철자가 M 인 사원의 이름을 출력하시오 

SQL>  select  ename
           from  emp
           where  ename  like  '_M%'; 

Pandas> 
result =emp['ename'].apply( lambda  x : x[1]=='M' )
#emp [ 컬럼명 ] [ 검색조건 ]
emp['ename'] [ result==True ]

설명:  result 시리즈(컬럼명)에서 값이 True 인 검색조건에 해당하는 행의 이름만
        출력합니다. 

문제85.  이름의 끝글자가 T 로 끝나는 사원들의 이름을 출력하시오 !

result =emp['ename'].apply( lambda  x : x[-1]=='T' )
emp['ename'] [ result==True ]

한줄로 구현하고 싶다면 ?

emp['ename'] [ emp['ename'].apply( lambda  x : x[-1])=='T'  ]

■ 예제29. 시퀀스 자료 슬라이싱 이해하기

  인덱싱은 인덱스에 해당하는 요소 하나를 취하는 방법이지만 
  슬라이싱은 시퀀스 자료에서 일정 범위에 해당하는 부분을 취하는 방법입니다. 

예:  a = 'scott'               s  c  o  t  t 

     print ( a[1:3] )  #   co  , 1부터 3 미만 까지 출력 

문제86.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select   substr( ename, 1, 3 )
            from  emp;

Pandas>  emp['ename'].apply(lambda  x :  x[0:3])

문제87.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select  substr( ename, -3 )
            from  emp; 

Pandas> emp['ename'].apply(lambda  x :  x[-3:])

■ 예제30. 시퀀스 자료 연결 이해하기(+)

   오라클           vs            파이썬 
      ||                                +

 자료형이 동일한 두 개의 시퀀스 자료는 + 연산자로 순서있게
 연결하여 새로운 시퀀스 자료를 만들 수 있습니다. 
 문자열 + 문자열,  리스트 + 리스트, 튜플 + 튜플 과 같이 두 개의 동일한
 시퀀스 자료형에 대해 '+' 연산자로 연결이 가능합니다.
 
예제:  a = 'i  love  '
        b = 'Python' 
        print ( a + b )

문제88.  아래의 SQL을 파이썬으로 구현하시오 !

SQL>  select  ename ||  '의 직업은 ' || job
             from emp;

import   csv

file = open("d:\\data\\emp2.csv")
emp_csv = csv.reader(file)
for   i   in   emp_csv:
    print ( i[1] +  ' 의 직업은 ' + i[2] )

문제89.  사원 테이블의 이름을 소문자로 출력하시오 ~

힌트:   사원 테이블의 이름을 대문자로 출력 :  i[1].upper()
         사원 테이블의 이름을 소문자로 출력 :  i[1].lower()

1. 파이썬으로 했을때 
import   csv
file = open("d:\\data\\emp2.csv")
emp_csv = csv.reader(file)
for  i  in  emp_csv:
    print (i[1].lower() )

2. 판다스로 했을때 
emp['ename'].apply( lambda x : x.lower() )

문제90.  아래의 SQL 을 파이썬과 판다스로 구현하시오 !

SQL> select  initcap( ename )
          from  emp; 

1. 파이썬으로 구현 

힌트:   사원 테이블의 이름을 대문자로 출력 :  i[1].upper()
         사원 테이블의 이름을 소문자로 출력 :  i[1].lower()

import   csv
file = open("d:\\data\\emp2.csv")
emp_csv = csv.reader(file)
for  i  in  emp_csv:
    print (i[1][0].upper() + i[1][1:].lower() )

import   csv
file = open("d:\\data\\emp2.csv")
emp_csv = csv.reader(file)
for  i  in  emp_csv:
    print (i[1].capitalize() )

설명: capitalize() 함수는 문자열에서 이름의 첫번째 철자는 대문자 나머지는
       소문자로 출력하는 함수 

예:  'scott'.capitalize()

2. 판다스로 구현 

emp['ename'].apply( lambda  x : x.capitalize() ) 

emp ['ename'].apply(lambda x : x[0].upper() + x[1:].lower())

emp03['ename'].apply(lambda x: x[0].upper()+x[1:].lower() )

문제91.  아래의 SQL을 판다스로 구현하시오 !

SQL> select  ename,  lower(ename)
            from  emp; 

Pandas>  emp['lower_ename']= emp['ename'].apply( lambda  x : x.lower() ) 
             emp[ ['ename', 'lower_ename'] ] 

문제92.  emp 데이터 프레임에 추가된 컬럼 lower_ename 을 지우시오 !

emp.drop('lower_ename', axis=1, inplace=True)

설명:  axis= 1 : 축(컬럼)
        axis= 0 : 행

inplace =True 를 써줘야 진짜 지워지는 것입니다. 
안써주면 지워서 보여주기만 합니다. 

문제93.  end_ename 컬럼도 마져 지우세요 ~

emp.drop('end_ename', axis=1, inplace=True)
emp

점심시간 문제.  팩토리올을 파이썬으로 구현하시오 !

B반은 라인 검사, A반은 카페에 올리세요 ~~
5시에는 B반 나이브베이즈 스터디 진행자와 스터디가 있습니다. 

■ 예제31. 시퀀스 자료 반복 이해하기 (*)

 동일한 시퀀스 자료를 반복하여 새로운 시퀀스 자료를 만들고자 하면
 별표(*) 를 연산자로 사용합니다. 

예제:  print('a' * 7)  # aaaaaaa
        print( [1, 2, 3] * 5 ) # [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]

문제94.  숫자를 물어보게하고 숫자를 입력하면 해당 숫자만큼 ★ 이 아래와 같이
           출력되게하시오 !

숫자를 입력하세요 ~  5

★
★★
★★★
★★★★
★★★★★

a = int( input('숫자를 입력하세요 ~') )

for  i  in  range(1, a+1):
    print ( '★' * i )

■ 예제32. 시퀀스 자료 크기 이해하기(len)

 모든 시퀀스 자료는 고정된 길이 또는 크기를 가지고 있습니다. 
 시퀀스 자료의 크기는 시퀀스 자료를 구성하는 요소의 갯수입니다. 

예제:   k = 'abcdefg'
         print ( len(k) )  # 7

         a = [ 1, 2, 3, 4, 5 ]
         print ( len(a) )  # 5

문제95.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select  ename,  length(ename)
           from  emp;

Pandas>  

emp['ename_len2'] = emp['ename'].apply( len )
emp

emp.drop( 'ename_len', axis=1, inplace=True)
emp.drop( 'ename_len2', axis=1, inplace=True)
emp

■ 예제33. 멤버체크 이해하기(in)

 in 은 어떤 자료에 어떤 값이 있는지 없는지 확인할 때 사용하는 키워드입니다. 
 활용하는 방법은 다음과 같습니다.

예제:  값  in  자료

설명:  값이 자료에 있으면 결과가 True 이고 없으면 False 입니다.

k = [ 1, 2, 3, 4, 5 ]
a = 7  in  k
b = 2  in  k
print (a)
print (b)

문제96. 부서번호가 10번, 20번인 사원들의 이름과 월급과 부서번호를 출력하시오

1. 파이썬만 이용해서 

import   csv
file = open("d:\\data\\emp2.csv")
emp_csv = csv.reader(file)

for   i  in   emp_csv:
    if  int(i[7])  in  [10, 20]:
        print( i[1], i[7] )

2. 파이썬의 판다스를 이용해서

emp[['ename','deptno']] [ emp['deptno'].isin([10,20]) ]

* 오라클의 기타 비교연산자 4가지를 판다스와 비교 

    오라클              vs                    판다스
1. between .. and                     emp['sal'].between(1000, 3000)
2. in                                     emp['deptno'].isin([10,20])
3. is null                                emp['comm'].isnull()
4. like                                   emp['ename'].apply( lambda x:x[0])

문제97. 아래의 SQL을 판다스로 구현하시오 !

SQL> select  ename, sal
           from   emp
           where  sal  between  1000  and 3000;

Pandas> emp[ 컬럼명 ] [ 검색조건 ]
            emp[ ['ename', 'sal'] ] [ emp['sal'].between(1000,3000) ]

문제98.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select  ename, sal
            from   emp
           where  sal  not  between  1000  and 3000; 

※ 설명: pandas 에서는 ~ 이 not 입니다. 

Pandas> emp[['ename','sal']][~emp['sal'].between(1000,3000)]

문제99. 아래의 SQL을 판다스로 구현하시오 !

SQL> select  ename, job
          from  emp
          where  job  not  in ('SALESMAN', 'ANALYST');

Pandas> emp [['ename','job']] [~emp['job'].isin(['SALESMAN','ANALYST'])]

문제100.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select  ename, comm
           from  emp
           where  comm  is  null;

Pandas>  emp [['ename','comm']] [emp['comm'].isnull()]

문제101. 아래의 SQL을 판다스로 구현하시오 !

SQL>  select  ename, comm
            from  emp
            where comm  is not null;

Pandas> emp [['ename','comm']] [~emp['comm'].isnull()]

문제102. 아래의 SQL을 판다스로 구현하시오 !

SQL> select  ename
         from  emp
         where  ename  like  '%T';

Pandas> emp ['ename'] [emp['ename'].apply(lambda x:x[-1] == 'T')


■ 예제34. 문자열 이해하기

문자열은 문자나 기호 순서로 나열되어 있는 시퀀스 자료입니다. 

※ 문자열을 선언하는 방법 3가지 

 1. '문자열'  <---- 싱글 쿼테이션 마크
 2. "문자열" <---- 더블 쿼테이션 마크 
 3. """ 문자열 """  <--- 더블 쿼테이션 마크를 3개 

문자열이 아래와 같이 싱글 쿼테이션 마크(') 가 포함되어져 있으면
위의 두번째인 더블 쿼테이션 마크 한개를 둘러줘야합니다.

a = "My son's  name  is  John"

문자열이 아래와 같이 더블 쿼테이션 마크(") 가 있으면 세번째인
"""    """  더블 3개를 사용하면 됩니다. 

b = """ My son's  name  is  "jone"  """

■ 예제35.  문자열 포맷팅 이해하기

문자열 포멧팅이란 변하는 값을 포함하는 문자열을 표현하기 위해
하나의 양식으로 문자열을 만드는 것입니다. 
문자열 포멧팅에서는 변하는 값을 나타내기 위해 사용하는 기호를
'포멧 문자열' 이라고 하며, 자주 사용하는 포멧 문자열은 다음과 같습니다.

포멧 문자열                설명 
  %s                         문자열에 대응됨
  %c                         문자나 기호 한개에 대응됨
  %f                         실수에 대응됨
  %d                        정수에 대응됨
  %%                        % 기호 자체를 표시함 

예제1.  아래의 변수를 이용해서 아래와 같이 결과가 출력되게하시오 !

num1 = 5
num2 = 10

결과:  5는 10보다 작습니다. 

print( '%d 는 %d 보다 작습니다'   %(num1, num2) )

문제103.  다음의 SQL을 파이썬으로 구현하시오 !

SQL> select  ename || '의 월급은 ' || sal || ' 입니다.'
          from  emp;

import  csv
file = open("d:\\data\\emp2.csv")
emp_csv = csv.reader(file)

for  i  in  emp_csv:
    print ( '%s 의 월급은 %d입니다.'  %(i[1], int(i[5]) ) )

■ 예제36. 이스케이프 문자 이해하기

 이스케이프 문자는 키보드로 입력하기 어려운 기호를 나타내기 위해
 역슬래쉬 '\' 로 시작하는 문자입니다. 
 파이썬에서 자주 사용되는 이스케이프 문자는 다음과 같습니다. 

  이스케이프 문자                     설명 
     \n                                  줄바꾸기
     \t                                   텝
     \엔터                              줄계속
     \\                                  \기호자체
     \'   또는  \"                     ' 기호 자체 또는 " 기호자체 

예제: print (' 나는 파이썬을 배웁니다. \n 파이썬은 자바보다 훨씬 쉽습니다')

■ 예제37.  리스트 이해하기([ ])

  리스트는 파이썬에서 가장 많이 활용되는 시퀀스 자료형 중 하나입니다.
  리스트는 [ ] 로 표시하며 [  ] 안에 요소를 콤마(,) 로 구분하여 순서있게
  나열합니다. 

예제:  k = ['a', 'b', 'c', 'd', 'e' ]
        print ( type(k) )  #<class list> 

문제104. 동전의 앞면과 뒷면을 포함하는 리스트 coin 을 만드시오 !

coin = ['앞면', '뒷면']

문제105. 위에서 만든 coin 의 요소를 10000개 로 늘려서 coin_10000 변수에
             담으시오 !

coin_10000 = coin * 10000
print (coin_10000) 

문제106. 위에서 만든 coin_10000 리스트에서 표본을 10개를 랜덤 추출하시오 !

import  numpy  as  np

print ( np.random.choice( coin_10000, 10)  )  

문제107. 위에서 추출한 샘플 10개에서 앞면이 몇번 나오는지 출력하시오 !

result = np.random.choice( coin_10000, 10)
cnt = 0 
for  i  in  result:
    if  i =='앞면':
        cnt = cnt + 1

print(cnt)

문제108. 아래의 리스트의 요소중 알파벳 d 를  숫자 9 로 변경하시오 !

k = [ 'a', 'b', 'c', 'd', 'e']

k[3] = 9
print(k)

※ 리스트는 위와 같이 리스트의 요소의 값을 변경할 수 있습니다. 

45분까지 쉬세요 ~

■ 예제38.  튜플 이해하기(( ))

 튜플은 리스트와 비슷한 성질을 가지고 있는 자료형이지만
 요소값을 변경할 수 없다는 특징이 있습니다.
 리스트는 대괄호 [  ] 로 요소를 감쌌는데 튜플은 소괄호 ( ) 로 요소를 감쌈니다.
 튜플은 데이터가 변경이 안되므로 튜플로 만든 데이터에 대한 신뢰도가 
 높아집니다.

예 :   아래의 튜플 리스트의 3번째 요소를 9 로 변경하시오 !

k = ( 'a', 'b', 'c', 'd', 'e' )

k[3] = 9
print(k)

신세계 백화점, 이마트에서 사용하는 포인트 적립 카드를 개발하는 프로젝트에서
포인트 적립시 구매금액의 0.01% 로 적립해준다고 하면 아래와 리스트로 
적립율을 관리할 수 있습니다.

card_rate = [ 0.01,  0.04,  0.07 ]

card_rate[0] = 1

card_rate = ( 0.01,  0.04,  0.07 )

card_rate[0] = 1

문제109.  아래의 변수의 데이터 유형을 확인하시오 !

card_rate = ( 0.01,  0.04,  0.07 )

print ( type(card_rate) )

■ 사전 이해하기({ })

 사전형은 키와 값을 하나의 요소로 하는 순서가 없는 집합입니다. 
 그러므로 사전은 시퀀스 자료형이 아니며 인덱싱으로 값을 접근할 수도 
 없습니다. 사전은 '키:값' 쌍이 하나의 요소입니다. 

예:  a = { 'apple' : '사과',  'banana': '바나나', 'peach' : '복숭아', 'pear' : '배' }
               ↑         ↑ 
              키         값 

예제1.  apple 의 한글뜻이 무엇인가요 ?

a = { 'apple' : '사과',  'banana': '바나나', 'peach' : '복숭아', 'pear' : '배' }

a['apple']

예제2. 영어 단어를 한글 뜻과 함께 계속 a 딕셔너리에 추가하고 싶다면?

a['grape'] = '포도'
print(a)

예제3. a 사전에서 key 값만 추출하고 싶다면 ?

print(a.keys() ) 

예제4. a 사전에서 값들만 추출하고 싶다면 ?

print ( a.values()  )

문제110.  모모사의 입사문제(알고리즘) 1개를 풀기위한 자료형을 구성하는 문제
             music 이라는 사전형을 만드세요 ~   값을 리스트로 구성하면 됩니다.    

 비틀즈  --->  let it  be,  hey jude, yesterday 
 소녀시대 --->  Gee,  다시 만난 세계,  party
   ↑                       ↑
  키                      값  

music = {}  # 비어있는 사전형을 만듭니다. 
music['비틀즈'] = ['let it  be',  'hey jude', 'yesterday']    
music['소녀시대'] =  ['Gee',  '다시 만난 세계',  'party' ]
print(music)

문제111.  music 사전형에서 키값들을 다음과 같이 추출하시오 !

 비틀즈
 소녀시대 

music = {}  # 비어있는 사전형을 만듭니다. 
music['비틀즈'] = ['let it  be',  'hey jude', 'yesterday']    
music['소녀시대'] =  ['Gee',  '다시 만난 세계',  'party' ]
for  i   in  music.keys():
    print(i)

문제112.  music 사전형에서 음악들만 출력하시오 !

let it  be
hey jude
yesterday
Gee
다시 만난 세계
party

for  i  in  music.values():
    for  j  in  i:
        print(j)

문제113.  위의 음악들을 a 라는 비어있는 리스트에 append 시키고 출력하시오!

결과:
[ ['let it  be', 'hey jude', 'yesterday'] , ['Gee', '다시 만난 세계', 'party'] ]

a = [ ]
for  i  in   music.values():
    a.append(i)

print (a) 

문제114. (오늘의 마지막 문제) 아티스트들의 노래를 서로 섞어서 아래와 같이 
            결과를 출력하시오 !

let it  be
Gee
hey jude
다시 만난 세계
yesterday
party

마지막 문제 올리시고 자유롭게 자습하세요 ~
b반 나이브베이즈 스터디 진행자들은 5시에 선생님과 스터디 하러 모이세요 ~~
5시 신호 보냈습니다. 
6시 신호 보냈습니다. 


■ 40. 함수 이해하기(def)

  오라클의 배울때 함수를 다음과 같이 사용했었습니다. 
1. 오라클의 함수들 
  select  max(sal)
   from  emp;

  select substr('smith', 1, 3)
    from dual;

2. 문자열 메소드(함수)
 'smith'.upper()

3. 리스트 메소드(함수)
 a = [] 
 a.append(1)

4. 외부 모듈의 함수 

 import   math

 math.sqrt(4) 

 위의 math 같은 모듈은 그냥 우리가 import 명령어로 불러와서 
 math 모듈을 만든 개발자가 작성한 코드를 우리 코드에서 편하게 사용할 수 
 있는데 나에게 필요한 함수를 직접 만들어서 사용을 해보자 !

*  함수 생성방법

def  함수명:
    실행문 
    return   출력값이 있는 변수명

* 파이썬에서 콜론(:) 으로 끝을 맺는 경우 4가지

1. if 문 종료시 
   예:  if 조건:

2. loop 문 종료시
   예:  for  i  in  range(1,11):

3. 함수 생성시 
   예:  def  함수이름(입력매개변수):

4. 클래스 생성시
    예:  class  클래스이름:

함수 생성 예제:  두개의 입력값을 받아서 더하는 함수를 생성

def  add_number(n1, n2): 
    result = n1 + n2
    return  result 

print ( add_number(1,2) )

문제115.  인공신경망의 들어가는 함수인 계단함수(step function) 을
              생성하세요 ~  양수 입력하면 1 이 출력되고 음수 또는 0 을 
              넣으면 0 이 출력되게 하는 함수를 생성하시오 !

print ( step_function( 3 ) )   #    1 

print ( step_function(-5)  )   #   0

def  step_function(num1):
    if  num1 > 0:
        return  1
    else:
        return 0 

print ( step_function( 3 ) )   #    1 

print ( step_function(-5)  )   #   0

문제116.  abs 함수와 똑같은 기능을 갖는 함수를 my_abs 라는 이름으로 
             만드시오 ! (절대값을 출력하는 함수)

print( my_abs(-3) )   #  3
print( my_abs(7) )    #  7

def  my_abs(num1):
    if  num1 >= 0:
        return  num1
    else:
        return -num1

문제117. 유클리드 거리계산하는 함수를 distance_function 이라는 이름으로
            생성하시오 !

print ( distance_function( 2, 3, 4, 5)  )

import  math 

def   distance_function( x1, y1, x2, y2):
    result1 = (x2 - x1 ) **2
    result2 = (y2 - y1 ) **2
    result3 = math.sqrt( result1 + result2)
    return  result3

print ( distance_function( 2, 3, 4, 5)  )

문제118.  최대 공약수를 출력하는 함수를 아래와 같이 생성하시오 !

print ( max_yaksu(16, 24 )  ) 

 8  

def max_yaksu(n1,n2):                        # 두수를 입력받게 구성하고
    a = []                                         # 약수를 담기 위한 리스트를 생성합니다.
    for i in range(1,max(n1,n2)+1):         # 두수중 최대값만큼 반복문을 돌리는데
        if n1 % i == 0 and n2 % i == 0:  #  두수를 1부터 나눈 나머지값이 0이되면
            a.append(i)                         #  그 약수를 a 리스트에 추가합니다. 
            result = max(a)                    #  약수들중에 최대값을 result 에 담아
    return result                                #  리턴합니다. 

print(max_yaksu(16,24))  

■ 예제41. 함수 인자값 이해하기

  인자란 함수에서 사용한 입력 매개변수를 말합니다. 

예제:  
def  add_text(t1, t2):
    return  t1 + '  ' + t2

print ( add_text('파이썬', '자바') )
 
만약에 매개변수에 아무것도 입력하지 않고 실행해도 실행되겠금하려면
기본값이 출력되겠금 함수를 구성해야합니다. 

def  add_text(t1,  t2='최고'):
    return  t1 + '  ' + t2 

print ( add_text('파이썬', '자바') )
print ( add_text('파이썬') )  # t2 에 아무것도 입력하지 않으면 기본값이 들어갑니다

* 파이썬 함수를 만드는 이유 ?

    큰 문제에 대한 해결을 하는 방법을 큰 문제를 작은 문제로 나누고
    작은 문제들을 하나씩 해결하면 큰 문제를 해결하기 위해서 

    작은 문제들을 함수로 하나씩 만들고 그 함수들을 조합해서 큰 문제를
    구현합니다. 

* 함수를 생성할 때 주의사항 ?

 1. 함수는 가급적 기능이 하나여야한다.
 2. 함수는 재사용이 가능해야합니다. 

문제119. 1일차 스터디 내용인 퍼셉트론을 구현하기 위해 and 게이트의
            표를 리스트로 구현하시오 !

and_table = [ [ -1, 0, 0, 0 ],
                  [ -1, 0, 1, 0 ],
                  [ -1, 1, 0, 0 ],
                  [ -1, 1, 1, 1 ] ]

문제120.  and_table 의 특정 요소에 접근하시오. 아래에 빨간색으로 표시된
             요소를 출력하시오 !

and_table = [ [ -1, 0, 0, 0 ],
                  [ -1, 0, 1, 0 ],
                  [ -1, 1, 0, 0 ],
                  [ -1, 1, 1, 1 ] ]

print ( and_table[1] )

문제121. 아래의 빨간색으로 표신된 요소를 출력하시오 !

and_table = [ [ -1, 0, 0, 0 ],
                  [ -1, 0, 1, 0 ],
                  [ -1, 1, 0, 0 ],
                  [ -1, 1, 1, 1 ] ]

print ( and_table[1][0] )

문제122. 아래의 빨간색으로 표신된 리스트의 요소들을 모두 더한값을 출력하세요
                    x0 x1 x2 t
and_table = [ [ -1, 0, 0, 0 ],
                  [ -1, 0, 1, 0 ],
                  [ -1, 1, 0, 0 ],
                  [ -1, 1, 1, 1 ] ]

a = and_table[3]
print ( sum(a) )

문제123.  and_table 에서 아래의 결과를 출력하시오 ! (코드 올려주세요!)

                    x0 x1 x2 t
and_table = [ [ -1, 0, 0, 0 ],
                  [ -1, 0, 1, 0 ],
                  [ -1, 1, 0, 0 ],
                  [ -1, 1, 1, 1 ] ]
결과:
 -1  0   0
 -1  0   1 
 -1  1   0
 -1  1   1

for  i  in  and_table:
    print (i[0],i[1],i[2])

문제124.  가중치 w0, w1, w2 를 리스트로 담고 and_table 과 연산을 해서
             아래의 방정식의 결과가 출력되게 하시오 !  (카페에 올려주세요)

w = [ 0.3, 0.4, 0.1 ]

 x0*w0 + x1*w2 + w2*w2 =k
 

결과:   -0.3
         -0.2
          0.1
          0.2

w =[0.3, 0.4, 0.1]
and_table = [ [-1,0,0,0], [-1,0,1,0], [-1,1,0,0], [-1,1,1,1] ]

for i in range(0,4):
    print(and_table[i][0]*w[0] + and_table[i][1]*w[1]+and_table[i][2]*w[2])

문제125. 위에서 만들었던 step_function 을 이용해서 위의 k 값을 step_function
            에 넣고 아래의 결과를 출력하시오 !

  0 
  0
  1
  1 



#1.  and 게이트 테이블과 가중치를 구성합니다.
w =[0.3, 0.4, 0.1]
and_table = [ [-1,0,0,0], [-1,0,1,0], [-1,1,0,0], [-1,1,1,1] ]

#2. 계단함수를 만듭니다.
def  step_function(num1):
    if  num1 > 0:
        return  1
    else:
        return 0 

3. 입력값과 가중치의 곱의 합을 계단함수에 입력합니다. 
for i in range(0,4):
    k = and_table[i][0]*w[0] + and_table[i][1]*w[1]+and_table[i][2]*w[2]
    print ( step_function(k) )

※ 코드 작성은 순차적으로 잘 정리되겠금 작성하고 꼭 주석을 달아서 설명을 
   추가한다. 

문제126.   오후에 다시 내도록 하겠습니다.

점심시간 문제 검사 받고 식사하러 가겠습니다. (최소공배수)

A 반은 라인검사
b 반은 카페에 올려주세요 !

■  42. 지역변수와 전역변수 이해하기(global)

 변수는 자신이 생성된 범위(코드블럭) 안에서만 유효합니다.
 함수 안에서 만든 변수는 함수 안에서 살아 있다가
 함수 코드의 실행이 종료되면 그 생명을 다한다. 
 이것을 '지역변수' 라고 합니다.

 예: 스타벅스내에서의 머그컵 

 이와는 반대로 함수 외부에서 만든 변수는 프로그램이 살아있는 동안에
 함께 살아있다가 프로그램이 종료되면 같이 소멸이 됩니다.
 이렇게 프로그램 전체를 유효범위로 가지는 변수를 '전역변수' 라고 합니다. 

 예: 텀블러 

예제1. 

a = 'scott'   # 전역변수 

def  func12():
    b = 'allen'   # 지역변수 
    return  b 

print ( func12()  )

예제2.  전역변수 사용예

pi = 3.1415926  # 전역변수 생성

def  cycle_func1(num1):            # 원의 넓이를 구하는 함수입니다.
    global  pi                        # 전역변수 함수내에서 사용하려면 global 
    return  pi * num1 * num1     #  키워드를 앞에 붙여줘야 합니다. 

def  cycle_func2( num2):           # 부채꼴의 넓이를 구하는 함수 
    global  pi
    return  1/4 * pi * num2 * num2 

문제127. 반지름을 5로 해서 위의 2개의 함수를 각각 실행하시오 !~

print ( cycle_func1(5) )
print ( cycle_func2(5) )

■예제43.  함수 리턴값 이해하기(return)

  모든 함수는 이름을 갖고 있습니다. 이 이름을 불러주면 파이썬은
  그 이름 아래에 정의되어있는 코드를 실행합니다. 
  이때 함수를 부르는 코드를 호출자라고 합니다. 
  함수가 호출자에게 결과를 돌려주는것을 반환(return) 이라고 합니다. 

예제1.  
pi =3.14159

def  cycle_func1(num1):
    global  pi
    return  pi * num1 * num1

print ( cycle_func1(5) )  # 함수를 호출하는 호출자 코드 

문제128.  아래의 행렬 연산을 수행하시오 !

import  numpy  as  np 
a = [ [1, 3], [5, 7] ]
b = [ [4, 3], [2, 1] ]

x = np.array(a)
y = np.array(b)
print ( x + y )

문제129.  아래의 2개의 리스트를 각각 받아서 행렬덧셈 연산을 하는 함수를 
             생성하시오 !

a = [ [1, 3], [5, 7] ]
b = [ [4, 3], [2, 1] ]

print ( add_matrix(a,b) )

[[5 6]
 [7 8]]

def  add_matrix(m1, m2):
    x = np.array(m1)
    y = np.array(m2)
    return   x + y 

print ( add_matrix(a,b) )

문제130. 아래의 행렬을 계산하시오 !

a = [ [ 6,7,4], [1,2,5], [3,2,4] ]
b = [ [4,1,2], [5,6,1], [2, 9,3] ] 

print ( add_matrix(a,b) )

문제131.  아래의 행렬곱을 계산하시오 !

import  numpy  as  np

a = [ [ 3, 2 ], [ 6, 7 ] ] 
b = [ [ 2, 4 ], [ 3, 1 ] ]

x = np.array(a)
y = np.array(b)
print ( np.dot(x,y) )   # 행렬곱 수행

문제132. 아래의 두 행렬곱을 출력하는 함수를  gob_matrix 로 생성하시오 !

print ( go_matrix(a,b) )                  #  47분까지 쉬세요 ~~

■ 예제44. 파이썬 모듈 이해하기

 파이썬에서는 각각의 소스 파일을 일컬어 모듈이라고 합니다. 
 이미 만들어져 있고 안정성이 검증된 함수들을 성격에 맞게 
 하나의 파일로 묶어 놓은것을 모듈이라고 합니다. 
 외부의 모듈에 있는 함수를 사용하려면 이 모듈을 먼저 우리 코드로
 가져와서 자유롭게 사용할 수 있도록 해야하는데 이런일을 파이썬에서는
 모듈을 import 한다 라고 합니다. 
 
예제1.  numpy 모듈을 임폴트해서 다음 모집단을 구성하시오 !
          평균이 30이고 표준편차가 5인 가우시안 정규분포를 따르는 
          모집단을 백만개 구성하시오 !

import   numpy  as   np  # numpy 라는 모듈을 import 하겠다. 

avg = 30
std = 5
N = 1000000
mogipdan = np.random.randn(N) * std + avg
print(mogipdan )

문제133. 서울시 초등학생 백만명의 키 모집단을 구성하는데
            평균키가 148.5 이고 표준편차가 30인 모집단을 만드시오 

import   numpy  as   np  # numpy 라는 모듈을 import 하겠다. 

avg = 148.5
std = 30
N = 1000000
mogipdan = np.random.randn(N) * std + avg
print(mogipdan )

문제134.  위의 모집단에서 100명을 표본추출하여 100명의 평균키를
             비어있는 리스트 a 에 입력하는 작업을 10000번 수행되게하시오!

힌트:  np.random.choice(모집단, 100).mean()

import   numpy  as   np  # numpy 라는 모듈을 import 하겠다. 

avg = 148.5
std = 30
N = 1000000
mogipdan = np.random.randn(N) * std + avg          # 모집단을 구성합니다. 

a = []                                                             # 100명의 평균키를 입력하기 위한
for  i  in  range( 1, 10001):                               # 리스트를 만듭니다.
    result = np.random.choice( mogipdan , 100).mean() # 100명씩 복원추출해서 평균값을
    a.append(result)                                            # a 리스트에 입력합니다. 

print (a)

문제135. 통계학을 전문으로 구현하는 모듈인 scipy 모듈을 임폴트하여
            위의 a 리스트에 입력된 표본의 평균키값 들에 대한 확률밀도함수값을
            출력하시오 !

from   scipy.stats  import  norm  # scipy 의 stats 패키지로 부터 norm 이라는
                                            # 모듈을 임폴트해라 

x = np.arange( 140, 160, 0.001) # 140 ~ 160 까지 0.001 간격으로 숫자를 생성 
y = norm.pdf( x  ,  np.mean(a),  np.std(a) )
print (y) 

전체코드:
import   numpy  as   np  # numpy 라는 모듈을 import 하겠다. 

avg = 148.5
std = 30
N = 1000000
mogipdan = np.random.randn(N) * std + avg          # 모집단을 구성합니다. 

a = []                                                             # 100명의 평균키를 입력하기 위한
for  i  in  range( 1, 10001):                               # 리스트를 만듭니다.
    result = np.random.choice( mogipdan , 100).mean() # 100명씩 복원추출해서 평균값을
    a.append(result)                                            # a 리스트에 입력합니다. 

from   scipy.stats  import  norm  # scipy 의 stats 패키지로 부터 norm 이라는
                                            # 모듈을 임폴트해라 

x = np.arange( 140, 160, 0.001) # 140 ~ 160 까지 0.001 간격으로 숫자를 생성 
y = norm.pdf( x  ,  np.mean(a),  np.std(a) )

print(y)

문제136.  데이터 시각화 전문 모듈인 matplotlib 를 임폴트하여 
              위의 표본 평균값 10000개의 데이터에 대한 확률밀도함수값으로
             정규분포 그래프를 그리시오 !

import  matplotlib.pyplot  as  plt  # matplotlib 모듈안에 pyplot 함수를
                                             # 임폴트하는데 별칭을 plt 로 해라 ~

x = np.arange( 140, 160, 0.001) # 140 ~ 160 까지 0.001 간격으로 숫자를 생성 
y = norm.pdf( x  ,  np.mean(a),  np.std(a) ) # 확률밀도함수값 
plt.plot( x, y, color='blue')
plt.show()

문제137.   평균이 60이고 표준편차가 10인 몸무게 데이터를 십만개 생성하고
              이 모집단에서 표본을 50개씩 수집해서 평균을 구하는 작업을 1000 번
              수행해서 그 1000개의 평균값과 표준편차를 이용해서 확률 밀도함수
              그래프를 그리시오 ~~

import numpy as np
import matplotlib.pyplot as plt

avg = 60
std = 10
N = 100000
population2 = np.random.randn(N) * std + avg

a2 = []
for i in range(1,1001):
    a2.append(np.random.choice(population2,50).mean())

from scipy.stats import norm

x = np.arange(55,65,0.01)
y = norm.pdf(x, np.mean(a2), np.std(a2))
plt.plot(x,y,color = 'blue')
plt.fill_between( x, y, interpolate =True, color='skyblue', alpha=0.7)
plt.show()
                            
설명:  plt 모듈안에 fill_between 함수를 이용해서 확률밀도함수 그래프의 아래 영역을
        색깔로 채우는데 interpolate = True 를 이용해서 아래의 영역이 색깔로 
        채워지게 하고 alpha 는 색깔의 투명도인데 0.0 ~ 1.0 사이로 줄 수 있습니다. 

■ 모듈을 직접 만드는 방법 

def  add_number(n1, n2):
    result = n1 + n2
    return  result 

메모장을 열고 위의 함수 스크립트를 저장하세요


#1.  and 게이트 테이블과 가중치를 구성합니다.
w =[0.3, 0.4, 0.1]
and_table = [ [-1,0,0,0], [-1,0,1,0], [-1,1,0,0], [-1,1,1,1] ]

#2. 계단함수를 만듭니다.
def  step_function(num1):
    if  num1 > 0:
        return  1
    else:
        return 0 

3. 입력값과 가중치의 곱의 합을 계단함수에 입력합니다. 
for i in range(0,4):
    k = and_table[i][0]*w[0] + and_table[i][1]*w[1]+and_table[i][2]*w[2]
    print ( step_function(k) )

문제138.  and 게이트의 정답인 target 과 step function 의 결과값과의 차이를
             출력하시오 !

and_gate = [[-1,0,0,0],
                 [-1,0,1,0],
                 [-1,1,0,0],
                  [-1,1,1,1]]

w=[0.3, 0.4, 0.1]


3. 입력값과 가중치의 곱의 합을 계단함수에 입력합니다. 
for i in range(0,4):
    k = and_table[i][0]*w[0] + and_table[i][1]*w[1]+and_table[i][2]*w[2]
    print ( and_table[i][3] - step_function(k) )

전체코드:
import  my_cal  as  m

#1.  and 게이트 테이블과 가중치를 구성합니다.
w =[0.3, 0.4, 0.1]
and_table = [ [-1,0,0,0], [-1,0,1,0], [-1,1,0,0], [-1,1,1,1] ]

#2. 입력값과 가중치의 곱의 합을 계단함수에 입력합니다. 
for i in range(0,4):
    k = and_table[i][0]*w[0] + and_table[i][1]*w[1]+and_table[i][2]*w[2]
    cost = and_table[i][3] - m.step_function(k) 
    if  cost  != 0:
        for  j  in  range(0,3):
            w[j] =  ?       
문제139. (오늘의 마지막 문제) 위의 cost 의 값이 0 아니면 아래의 가중치를
           갱신하는 방정식이 수행되게하시오 !


 5시 신호보냈습니다.  마지막 문제 올리고 자유롭게 자습하세요 ~~~
 6시 신호보냈습니다.  


문제140.  아래의 코드가 실행될 수 있도록 패키지를 만들고 실행되게 하시오 

from  my_loc2  import   my_cal

print ( my_cal.step_function(3) )

* 설명:  쥬피터 노트북에서 현재 워킹 디렉토리를 확인하고 싶다면 ?

윈도우 :   !dir
리눅스 :   !pwd

패키지를 만들었을때의 장점 ?

   우리가 옷도 서랍장에 계절별로 관리하듯이 
   폴더별로 각각 별도의 스크립트들을 따로 잘 관리할 수있습니다.
   
예제46. 파이썬 모듈 임포트 이해하기 ① (import)

  이미 만들어져 있는 어떤 함수를 우리가 작성하는 코드에서
  자유롭게 활용할 수 있으려면 해당 함수가 포함된 모듈을 임폴트해야합니다.
  임폴트하는 방법은 다음과 같습니다. 

import 모듈이름
from  패키지 import  모듈이름
import  패키지이름.모듈이름 

예제. 아래와 같이 우리가 만든 모듈이 아니라 다른 사람이 만든 모듈을
        임폴트를 해서 썼는데 이 모듈은 어디에 있는것일까 ?

import  pandas    # import  패키지 
import  numpy  as np   # import  패키지 

np.random

46분까지 쉬세요 ~~

* import 를 만나면 파이썬 모듈을 찾는 순서 

1. 파이썬 내장 모듈에 있는지 확인

예제:  import  sys
        print ( sys.builtin_module_names)

2. sys.path 에 정의되어있는 디렉토리를 뒤져봅니다. 

예제:  import  sys
        for  i  in   sys.path:
            print (i)

문제141. 모듈을 임폴트할때 모듈이 있는 위치는 지금 실행되고 있는
            코드 파일의 위치와 동일한 곳이어야합니다. 그렇다면 
            윈도우와 리눅스에서 각각 아래의 모듈을 저장하고 실행해봅니다. 

1. 윈도우: 
 
* 현재 스크립트가 수행되고 있는 곳이 어딘지 확인합니다.

!dir 
from my_loc import  my_cal
print (my_cal.step_function(2))

2. 리눅스(구글의 코랩을 사용)

!pwd
import  my_cal
print (my_cal.step_function(2))

예제47. 파이썬 모듈 임포트 이해하기 ② (from~import)

from  패키지명  import 모듈명 
 
    또는

import  패키지이름.모듈이름 

원래는 위와같이 모듈을 임폴트할 때는 패키지명을 먼저 불러오고 모듈을 불러와야하는데
그런데 아래와 같이 패키지 이름을 안주고 바로 모듈만 import 해도 잘 수행되는 경우는
언제 인가 ?

import  pandas
import  numpy 

위와 같이 패키지 이름을 안주고 모듈만 임폴트 했는데 잘 실행이 되었습니다.
위와 같은 모듈은 어떤 모율인가요 ?

1. 파이썬 내장 모듈 
2. sys.path 에 정의되어 있는 모듈

문제142. numpy  모듈을 이용해서 아래의 행렬연산을 수행하시오 !

import  numpy  as  np  

a = [ [ 3, 4 ], [ 1, 2 ] ]
b = [ [ 1, 2 ], [ 5, 4 ] ]
x = np.array(a)
y = np.array(b)  
print (x + y)

문제143. numpy 모듈을 이용하지 말고 그냥 위의 행렬 연산을 수행하시오 !
           ( 카페에 답을 올려주세요)

a = [ [ 3, 4 ], [ 1, 2 ] ]
b = [ [ 1, 2 ], [ 5, 4 ] ]

결과1:  [4, 6, 6, 6]    <---  이걸로 하세요 ~~

결과2:  [[4, 6], [6, 6]]

import  numpy  as  np  

a = [ [ 3, 4 ], [ 1, 2 ] ]
b = [ [ 1, 2 ], [ 5, 4 ] ]

aa=[]
for  i  in  range(2):
    for j in range(2):                            45분까지 쉬세요 ~~
        print(i, j)
        aa.append(a[i][j] + b[i][j])

print(aa)        

■ 예제48. 파이썬 모듈 임포트 이해하기 ③ (import~as)

import   모듈이름  as  별칭 

예제:  
import  numpy  as  np 

dice = [ 1, 2, 3, 4, 5, 6 ] 
print (np.random.choice(dice) ) 

예제.  아래의 리스트에서 최대값, 최소값, 평균값, 최빈값, 중앙값을 출력하시오 !

a = [ 28, 23, 21, 29, 30, 40, 23, 21, 21 ]

import   numpy   as  np
from  scipy.stats   import  mode   # 최빈값을 구하기 위해 임폴트 

a2 = np.array(a)
print( np.max(a2) )  
print( np.min(a2) )
print( np.mean(a2) )
print( np.median(a2) )
print ( mode(a) )    # ModeResult(mode=array([21]), count=array([3]))

문제144.  emp3.csv 를 판다스로 로드하고  사원 테이블의 월급의 최대값,
             최소값, 평균값, 중앙값과 최빈값을 출력하시오 !

import  pandas  as  pd
emp = pd.read_csv("d:\\data\\emp3.csv")

print( emp['sal'].max() )
print( emp['sal'].min() )
print( emp['sal'].mean())
print( emp['sal'].median())
print( emp['sal'].mode())

문제145. iris.csv 데이터를 판다스로 로드하고 sepal.width 의 최대값, 최소값,
            최빈값, 평균값, 중앙값을 출력하시오 !

import  pandas  as  pd 

iris = pd.read_csv("d:\\data\\iris.csv")

print( iris['sepal.width'].max() )
print( iris['sepal.width'].min() )
print( iris['sepal.width'].mean() )
print( iris['sepal.width'].mode() )
print( iris['sepal.width'].median() )
 
점심시간 문제: 오라클 instr 함수를 파이썬의 함수로 생성하시오 ~

A반은 카페에 올리시오 ~
B반은 라인 검사 입니다.  

■ 예제49. 파일 열고 닫기(open, close)

 파일은 텍스트 파일과 바이너리 파일 두가지 종류가 있습니다. 
 텍스트 파일은 사람이 읽을 수 있는 글자로 저장된 파일이고
 바이너리 파일은 컴퓨터가 읽고 이해할 수 있는 이진 데이터를
 기록한 파일입니다. 
 예를들어 윈도우에서 제공하는 메모장 프로그램을 이용하여 내용을 적고
 저장하면 텍스트 파일로 저장됩니다. 
 이미지 뷰어로 볼 수 있는 jpg 이미지 파일은 이진 데이터를 jpg 형식의
 파일로 저장한 바이너리 파일입니다. 
 파이썬에서 파일을 다루기 위해서 가장 먼저 해야할 일은 파일을 오픈
 하는것입니다. 파일을 오픈하기 위해서는 open() 함수를 이용합니다. 

문법:  open( 파일이름, 모드 )
                               ↓
                               r    : 텍스트 모드로 읽기 
                              w    : 텍스트 모드로 쓰기
                              rb    : 바이너리 모드로 읽기
                              wb   : 바이너리 모드로 쓰기

카페에서 lena 사진과 폐사진을 다운로드 받으세요 ~

예제1. 이미지 파일을 파이썬에서 여는 방법 

1. lena.png 를 내려받아 d:\\data\\ 밑에 저장합니다.
2. 아래의 코드를 실행합니다. 

import  PIL.Image  as  pilimg        # 이미지를 파이썬에서 시각화하기 위한 모듈
import  numpy  as  np
import  matplotlib.pyplot  as  plt  # 데이터 시각화 전문 모듈을 임폴트 합니다.

im = pilimg.open("d:\\data\\lena.png") # lena.png 를 읽어서 im 에 입력 
pix = np.array(im)                                # im 를 넘파이 배열로 변환합니다.
plt.imshow(pix)                                    # 화면에 띄웁니다. 

문제146.  폐사진을 파이썬에서 시각화 하시오 !

import  PIL.Image  as  pilimg        # 이미지를 파이썬에서 시각화하기 위한 모듈
import  numpy  as  np
import  matplotlib.pyplot  as  plt  # 데이터 시각화 전문 모듈을 임폴트 합니다.

im = pilimg.open("d:\\data\\1.png") # lena.png 를 읽어서 im 에 입력 
pix = np.array(im)                                # im 를 넘파이 배열로 변환합니다.
plt.imshow(pix)                                    # 화면에 띄웁니다. 

예제1.  파이썬 내장 함수인 open 함수를 이용해서 아래의 리스트의 내용을
          파일로 저장하시오 !

a = ['red', 'blue', 'yellow']

with  open("d:\\data\\a.txt", "w")  as  file:
    for  i  in  a:
        file.write( i + '\n')

문제147.  이번에는 아래의 리스트를  a2.txt 로 저장하는데 아래와 같이 
             저장되게하시오 

a = ['red', 'blue', 'yellow']


저장된 텍스트 파일의 내용:  

red,  blue, yellow 

a = ['red', 'blue', 'yellow']

답:
with  open("d:\\data\\a2.txt", "w")  as  file:
    for  i  in  a:
        file.write( i + ',')

문제148.  emp3.csv 에서  월급이 2500 이상인 사원들의 이름과 월급을 
             출력하시오 !  (판다스를 이용하세요)

import  pandas   as  pd

emp = pd.read_csv("d:\\data\\emp3.csv")
emp[['ename', 'sal']] [ emp['sal'] >= 2500 ]

문제149. 위의 결과를  result.csv 로 저장하시오 !

힌트:  df.to_csv("파일이름")

import  pandas   as  pd

emp = pd.read_csv("d:\\data\\emp3.csv")
emp[['ename', 'sal']] [ emp['sal'] >= 2500 ].to_csv("d:\\data\\result.csv")

문제150.  iris.csv 의 데이터를 판다스로 읽어서  sepal.width 가 2.0 보다 
             큰 모든 컬럼의 데이터를 읽어서  result150.csv 로 저장하시오 !

import  pandas  as  pd

iris = pd.read_csv("d:\\data\\iris.csv")
iris[ iris['sepal.width'] >= 2.0 ].to_csv("d:\\data\\result150.csv") 

문제151. (복습문제) 다음과 같이 숫자를 입력하고 실행하면 다음의 결과가
            출력되는 함수를 생성하시오 !

shoot(3)

탕!
탕!
탕! 

def  shoot(num):
    for  i  in  range(1,num+1):
        print ('탕!')

shoot(3)

문제152.  아래의 charge 함수를 생성하시오 !

charge(5)

5발 장전되었습니다. 

def  charge(num):
    print ( num, '발이 장전되었습니다')

설명:  shoot 과 charge 함수는 총의 기능을 갖는 함수입니다.
        지금은 따로 따로 만들어서 별개로 작동하고 있습니다. 
        그런데 만약 장전(충전)된만큼 총을 shoot 있게 하려면 이 함수들을
        하나의 클래스에 넣어야 합니다. 즉 클래스(class) 를 이용해야 합니다.

 45분까지 쉬세요 ~

■ 예제50. 클래스 이해하기(class)

 객체 지향 프로그램에서 가장 중요한 단어가 바로 클래스 입니다. 
  클래스는 프로그래머가 지정한 이름을 만든 하나의 독립된 공간이며,
  이름공간(name space)이라 부릅니다.

  클래스를 구성하는 주요 요소는 클래스에서 변수 역활을 하는 클래스 멤버와
  함수와 동일한 역활을 하는 클래스 메소드 입니다. 

예:    총 설계도     ----------------------->  총 (제품)
        ( 클래스 )                                   (객체)

예제1.  총 클래스(설계도) 를 생성하시오 !

총의 기능(함수):  1.  총알을 장전하는 기능 (charge) 
                      2.  총을 쏘는 기능 (shoot) 

class  Gun():                                      # 총 설계도를 만듭니다. 
    def  charge(self, num):                     # 총알 충전하는 함수 입니다. 
        self.bullet = num                        # 총알을 num 숫자만큼 장전합니다. 
        print ( self.bullet , ' 이 충전되었습니다')

    def  shoot(self, num):                      # 총을 쏘는 함수입니다. 
        for  i  in  range(1, num+1):           # 입력된 숫자만큼 반복합니다. 
            if  self.bullet > 0 :                   #  총알이 있다면  
                print ('탕!')                        #  한발 쏩니다. 
                self.bullet -= 1                   # 그리고 한발 차감합니다. 
            elif   self.bullet == 0:               # 총알이 없다면 
                print('총알이 없습니다')        #  없다는 메세지를 출력합니다. 
                break                               # 그리고 loop 문을 종료 시킵니다. 

예제2.  설계도(클래스) 를 가지고 총 제품(객체) 을 하나 만듭니다. 

gun1 = Gun()
 ↑            ↑
제품이름   설계도 이름 

예제3. 총알을 충전합니다. 

gun1.charge(10)

예제4. 총을 3발 쏘아봅니다. 

gun1.shoot(3)

문제152.  총 클래스로 총을 하나 더 생산하고 100발 장전 시킨다음
             90발 쏴 보세요 ~

gun2 = Gun()

gun2.charge(100)

gun2.shoot(90)

문제153.  아래와 같이 print 하는 기능을 총 클래스에 구성하고 
             총 gun3 를 생산해서 총을 쏜다음에 총알이 몇발 남았는지
             print 를 통해서 출력되게하시오 !

gun3 = Gun()

gun3.charge(5)

gun3.shoot(2)

gun3.print() 

총알이 3발 남았습니다. 


class  Gun():                                      # 총 설계도를 만듭니다. 
    def  charge(self, num):                     # 총알 충전하는 함수 입니다. 
        self.bullet = num                        # 총알을 num 숫자만큼 장전합니다. 
        print ( self.bullet , ' 이 충전되었습니다')

    def  shoot(self, num):                      # 총을 쏘는 함수입니다. 
        for  i  in  range(1, num+1):           # 입력된 숫자만큼 반복합니다. 
            if  self.bullet > 0 :                   #  총알이 있다면  
                print ('탕!')                        #  한발 쏩니다. 
                self.bullet -= 1                   # 그리고 한발 차감합니다. 
            elif   self.bullet == 0:               # 총알이 없다면 
                print('총알이 없습니다')        #  없다는 메세지를 출력합니다. 
                break                               # 그리고 loop 문을 종료 시킵니다. 

    def  print (self):
        print ( self.bullet , '발이 남았습니다.')  

문제154. 이번에는 총을 쏘고 나서 바로 몇발 남았습니다. 가 출력되게 클래스를 
          수정하고 다시 총을 gun4 라는 이름으로 생성해사 총을 쏴보시오 !

gun4 = Gun()

gun4.charge(5)

gun4.shoot(2)

탕!
탕!
3발남았습니다. 

class  Gun():                                      # 총 설계도를 만듭니다. 
    def  charge(self, num):                     # 총알 충전하는 함수 입니다. 
        self.bullet = num                        # 총알을 num 숫자만큼 장전합니다. 
        print ( self.bullet , ' 이 충전되었습니다')

    def  shoot(self, num):                      # 총을 쏘는 함수입니다. 
        for  i  in  range(1, num+1):           # 입력된 숫자만큼 반복합니다. 
            if  self.bullet > 0 :                   #  총알이 있다면  
                print ('탕!')                        #  한발 쏩니다. 
                
                self.bullet -= 1                   # 그리고 한발 차감합니다. 
            elif   self.bullet == 0:               # 총알이 없다면 
                print('총알이 없습니다')        #  없다는 메세지를 출력합니다. 
                break                               # 그리고 loop 문을 종료 시킵니다. 
        print(self.bullet, '발이 남았습니다.')
        
    def  print (self):
        print ( self.bullet , '발이 남았습니다.')         # 45분까지 쉬세요 ~~~~~
        
문제155.  위의 총클래스를 이용해서 card 클래스를 생성하고 카드를 
             다음과 같이 발급하세요 !  답을 올려주세요 ~

card1 = Card()

card1.charge(10000)

10000 원이 충전되었습니다.

card1.consume(6000)

6000 원이 사용되었습니다. 
남은 잔액은 4000 원 입니다.

답:
class Card():                        
    def charge(self,num):           
        self.money=num             
        print(self.money,'원 충전되었습니다.')
        
    def consume(self,num):      
        if self.money>0:       
            print(num,'원이 사용되었습니다.')        
            self.money-=num      
        elif self.money==0:    
            print('잔액이 없습니다') 
                           
        print('남은 잔액은',self.money,'원 입니다.')

■예제51.클래스 멤버와 인스턴스 멤버 이해하기

클래스에서 선언된 변수는 클래스 멤버(변수) 와 인스턴스 멤버(변수) 가 
있습니다. 클래스 멤버는 클래스 메소드 바깥에서 선언되고
인스턴스 멤버는 클래스 메소드 안에서 self 와 함께 선언되는 변수
입니다. 

예제: 사원이 입사하면 입사한 사원에 대한 이메일을 자동으로 생성하고
       이름을 출력하는 함수와 월급을 인상하는 함수를 담는 클래스를
       생성하는 예제


class  Employees:   # 옆에 괄호() 를 따로 안쓴 이후는 밑에 __init__ 함수에 입력 매개변수가
                         # 여러개 여서 입니다. 
    raise_amount = 1.1  # 클래스 변수(클래스 멤버) , 클래스 변수에는 self 가 없습니다. 
                                               # gun1 = Gun()
    def __init__(self, first, last, pay):  #  emp_chulsu2 = Employees('chulsu2', 'kim', 5000000)
        self.first = first                   #  위와 같이 객체(제품)를 생성할 때 입력값이 3개가 
        self.last  = last                   #  입력되면서 객체(제품) 이 만들어 집니다. 
        self.pay   = pay
        self.email = first.lower() + '.' + last.lower() + '@gmail.com'
        self.raise_amount = 1.1  # 인스턴스 변수

    def  full_name(self): #사원의 전체이름을 출력하는 함수
        print ( '{} {}'.format(self.first, self.last) )  # 앞에 중괄호 2개에 각각 self.first 와 self.last
                                                         # 에 있는 값이 입력이 됩니다. 

    def  apply_raise(self): # 월급을 인상하는 함수
        self.pay = int( self.pay * self.raise_amount)


emp_chulsu = Employees('chulsu', 'kim', 5000000)   
print( emp_chulsu.full_name() )
print( emp_chulsu.pay)  # 5000000

문제156.  아래와 같이 클래스를 이용해서 객체를 생성할 때 사원이 생성되었습니다.
            라는 메세지가 출력되게하시오 ! 

emp_chulsu = Employees('chulsu', 'kim', 5000000)   

kim chulsu 사원에 대한 정보가 등록되었습니다. 

답:

class  Employees:   # 옆에 괄호() 를 따로 안쓴 이후는 밑에 __init__ 함수에 입력 매개변수가
                         # 여러개 여서 입니다. 
    raise_amount = 1.1  # 클래스 변수(클래스 멤버) , 클래스 변수에는 self 가 없습니다. 
                                               # gun1 = Gun()
    def __init__(self, first, last, pay):  #  emp_chulsu2 = Employees('chulsu2', 'kim', 5000000)
        self.first = first                   #  위와 같이 객체(제품)를 생성할 때 입력값이 3개가 
        self.last  = last                   #  입력되면서 객체(제품) 이 만들어 집니다. 
        self.pay   = pay
        self.email = first.lower() + '.' + last.lower() + '@gmail.com'
        self.raise_amount = 1.1  # 인스턴스 변수
        print (self.last + ' '+self.first, '에 대한 정보가 생성되었습니다.')

    def  full_name(self): #사원의 전체이름을 출력하는 함수
        print ( '{} {}'.format(self.first, self.last) )  # 앞에 중괄호 2개에 각각 self.first 와 self.last
                                                         # 에 있는 값이 입력이 됩니다. 

    def  apply_raise(self): # 월급을 인상하는 함수
        self.pay = int( self.pay * self.raise_amount)


emp_chulsu = Employees('chulsu', 'kim', 5000000)   

문제157.  지금 등록한 kim chulsu 사원의 이메일이 무엇인지 확인하시오 !

print( emp_chulsu.email )

설명: 클래스내의 인스턴스 변수의 내용을 확인하고 싶다면 객체이름.인스턴스 변수명
       이라고 하면 됩니다. 

문제158.  철수의 월급을 회사의 규정에 따라 인상시키시오 !

print( emp_chulsu.pay)
emp_chulsu.apply_raise()
print( emp_chulsu.pay)

문제159.  회사규정이 월급을 올릴때 한번에 10% 인상 시킬수 있기때문에 
             인스턴스 변수인 self.raise_amount 에 할당된 1.1 을 이용해서 월급을 인상 
             시켰습니다.  철수가 자신의 월급을 10% 가 아니라 20% 인상 시키고 싶어서
             다음과 같이 emp_chulsu 객체의 인스턴스 멤버인 raise_amount 변수에 1.2 
             할당하고 apply_raise() 메소드를 실행을 했습니다. 해보십시오 !

emp_chulsu.raise_amount = 1.2 
print ( emp_chulsu.pay)
emp_chulsu.apply_raise() 
print ( emp_chulsu.pay)

문제160. 위와같이 악용이 될 수 없도록 막는 방법은 무엇입니까?

인스턴스 변수 대신에 클래스 변수를 이용하면 됩니다. 

정리하면

클래스내의 변수는 2개가 있는데

1. 클래스 변수:   클래스 내에서 메소드 바깥에 선언한 변수 
                      객체 생성이후에 안의 값을 변경할 수 없다.

2. 인스턴스 변수:    클래스 내에서 메소드 안쪽의 변수 
                          객체 생성이후에 안의 값을 변경할 수 있다. 

클래스 총정리 ?

  클래스의 장점이 무엇인가 ?   1.  상속을 할 수 있습니다. 

                                        2. 클래스 변수를 이용해서 객체 생성이후에는
                                           변수의 값을 갱신하지 못하게 할 수 있습니다. 

 평상시 갖추어야할 코드 습관 : 

   1.  특정 기능을 구현한 코드를 만들었다면 반드시 함수로 생성하고
       다시 재사용이 가능할 수 있도록 해야합니다. 

   2. 만든 함수들이 특정 목적을 위해서 만든 함수들이라면 클래스로 
      구성해서 재사용되게 해야합니다 

  코드 구현 ---> 함수로 생성 -----------------------> 클래스로 생성  습관 !!!!
                          ↓                                            ↓
               1. 함수는 기능이 가급적 하나여야 한다. !  1. 상속이 되겠금 작성
               2. 함수는 재사용이 가능해야 합니다. 

  46분까지 쉬세요 ~~

■ 예제56. 예외처리 이해하기 ① (try~except)

 프로그램을 작성하다 보면 뜻하지 않은 오류가 발생하는 코드가 
 있을 수 있습니다. 프로그램이 실행되는 동안 오류가 발생하면
 프로그램이 더 이상 진행될 수 없는 상태가 되는데 이를 예외사항 이라고
 합니다. 프로그램에 예외가 발생하더라도 프로그램을 중단 시키지 않고
 예외에 대한 적절한 처리를 하여 프로그램을 계속 진행 시킬 수 있도록
 하는 구문이 try ~ except 입니다. 

예제:
try:
    문제가 없을 경우 실행할 코드
except:
    문제가 생겼을때 실행할 코드 

예제1.  try ~ except 를 사용해서 예외처리를 하지 않았을 때의 코드

def  my_divide():
    x = input('분자의 숫자를 입력하세요 ~')
    y = input('분모의 숫자를 입력하세요 ~')
    return  int(x) / int(y)

print ( my_divide() )

분자의 숫자를 입력하세요 ~ 10
분모의 숫자를 입력하세요 ~  0

예제2.  try ~ except 절을 사용했을때의 예제

def  my_divide():
    try:
        x = input('분자의 숫자를 입력하세요 ~')
        y = input('분모의 숫자를 입력하세요 ~')
        return  int(x) / int(y)
    except:
        return '잘못된 값을 입력하셔서 나누기를 할 수 없습니다'

print( my_divide() )

문제161. 아래와 같이 숫자를 물어보게 하고 숫자를 입력하면 해당 숫자의 제곱값이
            출력되게하는  함수를 생성하는데 만약 문자를 입력하면 잘못된 값을 입력하셨
           습니다. 라는 메세지가 출력되게하시오 !

print( gegop() )

숫자를 입력하세요 ~  2

 4

print( gegop() )

숫자를 입력하세요 ~  a

잘못된 값을 입력했습니다.              

def  gegop():
    try:
        num = int( input('숫자를 입력하세요 ~') )
        return  num**2
    except:
        return  '잘못된 값을 입력햇습니다.'

print ( gegop() )

■ 예제57. 예외처리 이해하기 ② (try~except~else)

  어떤 로직을 수행할 때 오류 상황이 아닐 경우에만 어떤 작업을 수행하는 코드를
  작성해야할 때가 있습니다.  
  이런 경우에 try ~ except ~ else 구문을 활용합니다.

예제:
try:
    실행할 코드 블럭
except:
    예외처리할 코드 블럭
else:
    except 절을 만나지 않았을 경우 실행하는 코드블럭

예제1:
try:
    num = int( input('숫자를 입력하세요 ~'))
    print ( num **2 )
except:
    print('잘못된 값을 입력하셨습니다')
else:
    print ('결과 출력에 성공했습니다.')

설명:  try ~ except 사이의 코드에 에러가 안났다면 else 이후의 문장을 실행합니다. 

문제162.  아까 했던 나누기 프로그램을 수정해서 나누기가 성공하면 
             성공적으로 나누기를 하였습니다. 라는 메세지가 출력되게하시오!

print( divide() )

 분자를 입력하세요  ~  10
 분모를 입력하세요  ~   2

 5
 성공적으로 나누기를 하였습니다 .


def  my_divide():
    try:
        x = input('분자의 숫자를 입력하세요 ~')
        y = input('분모의 숫자를 입력하세요 ~')
        print(  int(x) / int(y) )
    except:
        print ( '잘못된 값을 입력하셔서 나누기를 할 수 없습니다' )
    else:
        print( '성공적으로 나누기를 하였습니다' )

my_divide() 


■ 예제58. 예외처리 이해하기 ③ (try~except~finally)

 오류 발생 유무와 상관없이 어떤 코드를 무조건 실행 시키려면 
 try ~ except ~ finally 구문을 활용합니다. 
 무조건 실행시키는 코드는 finally 부분에 작성하면 됩니다. 

예:
try:
    print ('안녕하세요 ~')
except:
    print ('예외가 발생햇습니다')
finally:
    print('저는 무조건 실행됩니다')   

문제163.  나누기하는 프로그램을 실행할 때 오류가 나던 오류가 나지 않던 무조건 
             아래의 메세지가 출력되게하시오 !

분자를 입력하세요 ~  10
분모를 입력하세요 ~  2

5

이 프로그램의 사용기간은 30일 남았습니다.  <--- 오늘 실행하면 

이 프로그램의 사용기간은 29일 남았습니다.   <--- 내일 실행하면 

47분까지 쉬세요 ~~

1. 오늘 날짜 확인하기 !

import datetime
now = datetime.datetime.now()
print(now)         
 
2. 문자를 날짜로 변환하는 방법 

import datetime
 
timeStr = '2021-05-30 23:59:59'
lasttime = datetime.datetime.strptime(timeStr, '%Y-%m-%d %H:%M:%S')
print(lasttime)

print(lasttime-now)

print((lasttime-now).days)  # 날짜만 출력

import datetime
now = datetime.datetime.now()
print(now)    

def  my_divide():
    try:
        x = input('분자의 숫자를 입력하세요 ~')
        y = input('분모의 숫자를 입력하세요 ~')
        print(  int(x) / int(y) )
    except:
        print ( '잘못된 값을 입력하셔서 나누기를 할 수 없습니다' )
    finally:
        print( '성공적으로 나누기를 하였습니다' )

my_divide() 

답:
def  my_divide():
    try:
        x = input('분자의 숫자를 입력하세요 ~')
        y = input('분모의 숫자를 입력하세요 ~')
        print(  int(x) / int(y) )
    except:
        print ( '잘못된 값을 입력하셔서 나누기를 할 수 없습니다' )
    finally:
        import datetime
        now = datetime.datetime.now()
        timeStr = '2021-05-30 23:59:59'
        lasttime = datetime.datetime.strptime(timeStr, '%Y-%m-%d %H:%M:%S')
        print((lasttime-now).days,' 일 남았습니다.') 

my_divide() 

■예제59. 예외처리 이해하기 ④ (try~except Exception as e)

 코드에서 예외가 발생하면 이에 대한 자세한 내용을 파악하는 것이 
 중요합니다. 파이썬은 발생 가능한 예외에 대해 exception 객체로
 미리 정의해 두고 있는데 이에 대한 내용은 다음 링크에서 확인할 수 있습니다.

http://docs.python.org/3/library/exceptions.html

설명:  위에 사이트에 보면 여러가지 다양한 에러에 대해서 미리 에러 처리를 
         할수 있도록 정의해놓은 예외들을 확인할 수 있습니다. 

이런 오류는 에러처리하지 말고 예외로 하자 !!

try:
    x = int( input('분자의 숫자를 입력하세요 ! ') )
    y = int( input('분모의 숫자를 입력하세요 !' ) )
    print (x/y)
except  ZeroDivisionError:
    print('0 으로 나눌 수 없습니다.')
except:
    print('잘못된 값을 입력하셨습니다')

문제164.  팩토리올을 출력하는 함수를 다음과 같이 생성하시오 !

factorial()

숫자를 입력하세요 ~  5

120 입니다. 

def  factorial():
    a = int( input('숫자를 입력하세요') )
    cnt = 1
    for  i  in  range(1, a+1):
        cnt = cnt * i
    return cnt 

factorial()

문제165.  위에서 숫자가 아닌 다른 값을 입력햇을때 숫자가 아니면
             출력할 수 없습니다. 라는 메세지가 출력되게하시오 !

def  factorial():
    try:
        a = int( input('숫자를 입력하세요') )
        cnt = 1
        for  i  in  range(1, a+1):
            cnt = cnt * i
        return cnt 
    except:
        return '숫자가 아니면 출력할 수 없습니다'

factorial()

문제166.  위의 코드는 문자를 넣어도 에러가 나지는 않습니다. 왜냐하면
             예외처리를 했기 때문입니다. 그런데 만약 어떠한 이유로 오류가
             난건지를 같이 보고싶으면 ?

def  factorial():
    try:
        a = int( input('숫자를 입력하세요') )
        cnt = 1
        for  i  in  range(1, a+1):
            cnt = cnt * i
        print ( cnt )
    except  Exception  as   e:
        print ('숫자가 아니면 출력할 수 없습니다') 
        print (e)  #  에러가 난 이유를 출력해줍니다.         45분까지 쉬세요 ~~
                                     
문제167. (오늘의 마지막 문제)  탐욕 알고리즘을 파이썬으로 구현하시오 !

머신러닝 배울때 의사결정트리를 파이썬코드로 구현할때 사용되는 알고리즘 

탐욕알고리즘?   탐욕 알고리즘은 매 순간마다 최선의 선택을 하는것을 말합니다.
                     선택할 때 마다 가장 좋다고 생각되는 것을 선택해 나가며
                     최종적인 해답을 구하는 알고리즘입니다.
                     이 알고리즘을 설계할 때 주의할점은 전체를 고려하는게 아니라
                     문제를 부분적으로 나누어 나누어진 문제에 대한 최적의 해답을
                     구하겠금 해야한다는 점입니다.

예: 14원의 잔돈을 줘야하는데 잔돈의 종류가 10원, 7원, 1원이 있으면 
    잔돈을 가장 빨리 줄 수 있는 방법은 ?

답:  7원짜리 2개를 주면된다.

탐욕알고리즘은 10원 1개, 7원 0개, 1원 4개를 주는게 탐욕알고리즘입니다. 

탐욕알고리즘을 풀기 위한 문제1.  14를 10으로 나눈 몫을 출력하시오 !

답:  print ( 14//10)  

탐욕알고리즘을 풀기 위한 문제2.  14를 10으로 나눈 나머지 값을 출력하시오 !

답: print (14 % 10 )

coin = [ 10, 7, 1 ]    <--- greedy 함수에 잔돈의 종류를 넣고 하세요 ~

greedy()

잔돈을 입력하세요 ~  14

 10원 동전 1개, 7원 동전 0개, 1원 동전 4개로 줍니다.

잔돈을 입력하세요 ~ 107

 10원 동전 10개, 7원 동전 1개, 1원 동전 0개로 줍니다. 

5시 신호보냈습니다. ~~~~  마지막 문제 올리시고 자유롭게 자습하세요 ~
                                     A 반 스터디 진행자는 5시에 모이세요 ~~
6시 신호보냈습니다. 

답: 효선이 코드

def greedy():
    coin = [10, 7, 1]                                  # 잔돈의 종류를 큰것부터 기술합니다. 
    c=[]                                                 # 몫을 담기 위한 리스트를 만듭니다.                       
    a=int(input('거스러줄 돈을 입력하세요'))   # 거슬러줄 돈을 입력받습니다. 
    if a > 0 :                                          #  잔돈이 0보다 크다면 
        for i in range(len(coin)):                   #  잔돈의 갯수만큼 루프를 돌립니다. 
            b = a // coin[i]                 #  14 // 10  -->  1 ,  4 // 7 --> 0,  4 // 1 --->4
            a = a % coin[i]                 #  14 % 10  -->  4,   4 % 7 --> 4,  4 % 4 ---> 0
            c.append(b)                     #  c에 1이 추가,   c에 0가 추가,  c에 4 가 추가
        print('10원 동전 %d개, 7원 동전 %d개, 1원 동전 %d개로 줍니다' %(c[0],c[1],c[2]))

    elif a == 0 :
        print('잔돈이 없습니다.')

    else:
        print('잘못 입력되었습니다.')

greedy()


■ 예제60.  예외처리 이해하기 ⑤ (try~except 특정 예외)

 파이썬 입장에서 봤을때는 오류가 아닌데 프로그래머가 이건 오류이니까 예외처리하겠다
 고 일부러 프로그램이 안돌게 오류메세지를 출력하는 경우에 사용합니다. 

 계산하는 프로그램 

  프로그램 코드 1 
  프로그램 코드 2   <----- 오류가 발생했으면 
  프로그램 코드 3
  프로그램 코드 4  

설명: 금융권 프로그램에서는 금액이 안맞는 프로그램이 있다면 사고로 이어지므로
   금액이 안맞으면 프로그램을 종료해라 ~ 라고 예외처리를 할 수 있습니다.

문제168.  emp3.csv 를 판다스로 로드하고  이름과 월급을 출력하시오 !

import  pandas  as  pd

emp = pd.read_csv("d:\\data\\emp3.csv")
emp[ ['ename','sal'] ] 

문제169. 이름을 물어보게 하고 이름을 입력하면 해당 사원의 이름과
            월급이 출력되게하시오 !

import  pandas  as  pd

name = input('이름을 입력하세요 ~')

emp = pd.read_csv("d:\\data\\emp3.csv")
emp[ ['ename','sal'] ] [ emp['ename'] == name.upper() ] 

문제170. 위의 코드에 사용자 정의 예외처리를 해서 월급이 고소득자는
            해당 월급을 볼 수 없습니다. 라는 메세지가 출력되게하시오 !
            ( 월급이 3000 이상인 사원들을 고소득자로 보고 작성하시오 )

import  pandas  as  pd

name = input('이름을 입력하세요 ~')

emp = pd.read_csv("d:\\data\\emp3.csv")
result = emp['sal'] [ emp['ename'] == name.upper()].values[0]
if  result >= 3000:
    raise  Exception('해당 사원의 월급을 볼 수 없습니다.')

emp[ ['ename','sal'] ] [ emp['ename'] == name.upper() ] 


문제171.  위의 코드를 수정해서 이름을 물어보게하고 이름과 직업이 출력되게하는
             코드를 작성하는데 직업이 ANALYST 이면 해당 사원의 정보는 볼 수 없습니다.
             라는 메세지가 출력되면서 프로그램이 종료되게하시오 ~

import  pandas  as  pd

name = input('이름을 입력하세요 ~')

emp = pd.read_csv("d:\\data\\emp3.csv")
result = emp['job'] [ emp['ename'] == name.upper()].values[0]
if  result == 'ANALYST':
    raise  Exception('해당 사원의 월급을 볼 수 없습니다.')

emp[ ['ename','job'] ] [ emp['ename'] == name.upper() ] 


■ 예제61. 값 입력받기(input)

 파이썬 내장함수 input 은 사용자가 키보드로 입력한 값을 문자열로 리턴합니다. 
 input() 의 인자는 사용자 입력을 돕기위한 안내 문구나 힌트 등을 표시하는 
 문자열이 됩니다. 

예:
name = input('사원이름을 입력하세요 ~')
num  = int( input('숫자값을 입력하세요 ~') )

문제172.   사원 이름을 물어보게하고 사원이름을 입력하면 해당 사원의 이름과 월급이
              출력되게하는데 없는 사원이름을 입력하면 해당 사원은 없습니다. 라는 
              메세지가 출력되게하시오 !

import  pandas  as  pd

try:
    name = input('이름을 입력하세요 ~')
    emp = pd.read_csv("d:\\data\\emp3.csv")
    result = emp['ename'][emp['ename']==name.upper()].values[0]
    print(emp[['ename', 'sal']] [ emp['ename'] ==result ])
except  LookupError:
    print ('해당 사원은 없습니다')

문제173.  직업을 물어보게하고 직업을 입력하면 해당 직업인 사원들의 이름과 직업이
             출력되게하는데 없는 직업을 입력하면 해당 직업은 없습니다. 라는 메세지가
             출력되게하시오 !

import  pandas  as  pd

try:
    job = input('직업을 입력하세요 ~')
    emp = pd.read_csv("d:\\data\\emp3.csv")
    result = emp['job'][emp['job']==job.upper()].values[0]
    print(emp[['ename', 'job']] [ emp['job'] ==result ])
except  LookupError:
    print ('해당 직업은 없습니다')

설명:  values[0] 이 무엇인가 ?

emp['job'][emp['job']=='SALESMAN']

result = emp['job'][emp['job']=='SALESMAN']
print(type(result))

<class 'pandas.core.series.Series'><--- 판다스의 자료구조( 데이터를 저장하는 저장 구조)
                                                  오라클로 말하면 컬럼입니다. 

result = emp['job'][emp['job']=='SALESMAN'].values
print(type(result))

<class 'str'>

■ 예제62.  자료형 확인하기(type)

 파이썬의 자료형은 하나의 클래스 입니다. 
 파이썬은 숫자나 문자, 문자열, 리스트, 튜플, 사전, 함수 등을 각각의 
 하나의 클래스로 취급합니다. 
 코드를 작성하다가 변수 이름만 보고 이 자료가 어떤 자료형인지 확인해야
 하는 경우가 있습니다. 이때 파이썬 내장함수인 type() 을 활용하면
 자료형을 쉽게 확인할 수 있습니다. 

예:

a = 'scott'
print ( type(a) )

<class 'str'>  <--- 클래스라면 메소드가 분명히 있을것입니다. 

a.upper()
a.capitalize()

b = [ 1, 2, 3, 4 ]
print ( type(b) )

b.append(5)

문제174.  딕셔너리 자료형을 만들고 type 으로 자료형을 확인하시오 !

b = { '사과' : 'apple', '배' : 'pear' }

print ( type(b) )

설명:  리스트 ---> 대괄호 [   ]
        튜플    ---> 소괄호 ( )
        딕셔너리 ---> 중괄호 {  }

b = { '사과' : 'apple', '배' : 'pear' }

print (b.keys() )      # 키값만 가져와라
print (b.values() )    # 값들만 가져와라
print (b.items() )     # 키와 값을 모두 가져와라 

■ 예제63. 나눗셈에서 나머지만 구하기(%)

 나누기 연산에서 나머지만 구하는 연산을 % 로 구합니다. 

예:  print ( 12 % 3 )  # 0
     print ( 12 % 5 )  # 2

문제175.  아래와 같이 두개의 숫자를 각각 물어보게하고 아래의 메세지가 
             출력되게하시오

첫번째 숫자를 입력하세요 ~  1113
두번째 숫자를 입력하세요 ~  23

1113을 23으로 나누면 9가 나머지로 납습니다. 

a = int(  input('첫번째 숫자를 입력하세요') )
b = int(  input('두번째 숫자를 입력하세요') )
c = a%b
print ('%d 를 %d 로 나누면 %d 가 나머지로 남습니다. '  %(a,b,c) )

45분까지 쉬세요 ~~

■  예제64.  몫과 나머지 구하기(divmod)

 몫을 구할때는 //  사용했고 
 나머지를 구할때는 % 를 사용했는데 몫과 나머지를 한번에 구하는 함수가
 divmod 입니다. 

예제:

a,   b =  divmod(1113, 23 )   # divmod 함수는 출력값이 2개여서 
↑   ↑                              # = 앞에 a 와 b  2개의 변수가 있는것입니다.
몫  나머지

print ( a,  b ) 

문제176.  오전에 설명했던 효선이의 탐욕 알고리즘 코드를 실행하세요 ~

def greedy():
    coin = [10, 7, 1]
    c=[]
    a=int(input('잔돈을 입력하세요'))
    if a > 0 :
        for i in range(len(coin)):
            b = a // coin[i]
            a = a % coin[i]
            c.append(b)
        print('10원 동전 %d개, 7원 동전 %d개, 1원 동전 %d개로 줍니다' %(c[0],c[1],c[2]))

    elif a == 0 :
        print('잔돈이 없습니다.')

    else:
        print('잘못 입력되었습니다.')

 
문제177.  위의 효선이 코드에 divmod 함수를 써서 코드를 변경하시오 ~

def greedy():
    coin = [10, 7, 1]
    c=[]
    a=int(input('잔돈을 입력하세요'))
    if a > 0 :
        for i in range(len(coin)):
            b, a = divmod( a, coin[i] )
           # b = a // coin[i]  # 몫
           # a = a % coin[i]  # 나머지
            c.append(b)
        print('10원 동전 %d개, 7원 동전 %d개, 1원 동전 %d개로 줍니다' %(c[0],c[1],c[2]))

    elif a == 0 :
        print('잔돈이 없습니다.')

    else:
        print('잘못 입력되었습니다.')

■  예제65. Pandas 를 이용한 데이터 검색 

  SQL,  Pandas 를 자유롭게 사용할 수 있어야 합니다.

  SQL ---> Pandas ,  Pandas ---> SQL

예제:  emp[ ['ename', 'sal']  ] [ emp['ename'] =='SCOTT' ]
                       ↑                      ↑
                   컬럼명                  조건 

문제178. dept3.csv 를 판다스로 로드해서 dept 데이터 프레임 전체를 출력하시오 !

import  pandas   as   pd

dept = pd.read_csv("d:\\data\\dept3.csv")
print (dept)

문제179.  부서위치가 DALLAS 의 부서명을 출력하시오 !

dept[['dname']] [ dept['loc']=='DALLAS'] 

점심시간 문제:  조건부 확률 문제 

한개의 주사위를 던져서 홀수의 눈이 나왔다 이 눈이 소수일 확률은 ?

B 반은 라인검사
A 반은 카페에 올려서 검사 받으세요 ~~

■ 예제66.  Pandas 를 이용한 조인 

예제. 이름과 부서위치를 출력하세요 !

SQL> select  e.ename, d.loc
          from  emp  e,  dept  d
          where  e.deptno = d.deptno ;

Pandas>
import   pandas   as  pd
emp = pd.read_csv("d:\\data\\emp3.csv")
dept = pd.read_csv("d:\\data\\dept3.csv")
result = pd.merge( emp, dept, on='deptno')
result[['ename', 'loc']]

※ 설명: emp 데이터 프레임과 dept 데이터프레임을 merge 를 써서 
          조인시키는데 on='deptno' 를 이용해서 연결고리가 되는 컬럼명을
          지정해주면 됩니다. 

문제180.  DALLAS 에서 근무하는 사원들의 이름과 부서위치를 출력하시오 !

result[['ename', 'loc']] [ result['loc'] =='DALLAS']

문제181.  월급이 3000 이상인 사원들의 이름과 월급과 부서위치를 출력하시오 !

result[['ename','loc']] [ result['sal'] >= 3000 ]

문제182.  아래의 SQL을 판다스로 수행하시오 !

SQL> select  e.ename, d.loc, e.deptno
           from   emp  e,  dept  d
           where  e.deptno = d.deptno  and  e.deptno in ( 10, 20) ;

Pandas>   
result = pd.merge( emp, dept, on='deptno')
result [['ename', 'loc', 'deptno']] [ result['deptno'].isin([ 10, 20 ]) ]

문제183.  월급이 1000 에서 3000 사이인 사원들의 이름과 월급과 부서위치를 
             출력하시오 !

SQL>  select  e.ename, e.sal, d.loc
           from  emp  e,  dept   d
           where  e.detno = d.deptno  and e.sal between 1000 and 3000;

Pandas>
result[['ename','sal','loc']] [ result['sal'].between(1000,3000) ]

문제184. 아래의 SQL을 Pandas 로 구현하시오 !

SQL> select  e.ename, d.loc
          from  emp  e,  dept  d
          where  e.deptno (+) = d.deptno;

Pandas>
emp = pd.read_csv("d:\\data\\emp3.csv")
dept = pd.read_csv("d:\\data\\dept3.csv")

result = pd.merge( emp, dept, on='deptno', how='right')
result[['ename','loc']] 

문제185. 아래의 SQL을 pandas 로 구현하시오 !

SQL>  select  e.ename, d.loc
            from  emp  e   full  outer  join  dept   d
            on  ( e.deptno = d.deptno );

Pandas>
result = pd.merge( emp, dept, on='deptno', how='outer')
result[['ename','loc']]

※ how 에 사용할 수 있는 옵션 3가지?  1. right
                                                  2. left
                                                  3. outer 

문제186.  X_train.csv, y_train.csv 를 각각 데이터 프레임으로 만들고 두개의 데이터 
             프레임을 조인하시오 !

import  pandas  as  pd

X_train=pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
y_train=pd.read_csv("d:\\data\\y_train.csv")
X_train

result = pd.merge( X_train, y_train, on='cust_id')
result

문제187.  최대구매액이 240만원 이상인 고객의 고객번호, 최대구매액, 주구매상품,
            성별을 출력하시오 !

result[['cust_id','최대구매액','주구매상품','gender']] [ result['최대구매액'] >= 2400000 ]

■ 예제67. Pandas 를 이용한 서브쿼리 

SQL>  select  ename, sal
          from  emp
          where  sal > ( select  sal
                              from  emp
                              where ename='JONES') ;

Pandas>
jsal = emp['sal'] [ emp['ename']=='JONES'].values[0]
emp[['ename','sal']][ emp['sal'] > jsal ]

설명:
jsal1 = emp[['sal']] [ emp['ename']=='JONES'].values[0]
jsal2 = emp['sal'] [ emp['ename']=='JONES'].values[0]
print ( type(jsal1)) # <class 'numpy.ndarray'>
print ( type(jsal2)) # <class 'numpy.int64'>

숫자 --->  numpy.array(숫자) ---->  pandas.Series(numpy.array(숫자)) ----> 
Pandas.DataFrame(pandas.Series(numpy.array(숫자)) )
■ 예제68. Pandas 와 오라클 그룹함수의 비교 

SQL>  select  max(sal)
           from  emp;

Pandas>  
import  pandas  as  pd
emp = pd.read_csv("d:\\data\\emp3.csv")
print ( emp['sal'].max() )

설명:
emp['sal'].max()  # 최대값
emp['sal'].min()  #  최소값
emp['sal'].sum()  # 토탈값
emp['sal'].var()  #  분산값
emp['sal'].std()  # 표준편차

문제188.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select  max(sal)
            from  emp
            where deptno = 20;

Pandas> 
import  pandas  as  pd
emp = pd.read_csv("d:\\data\\emp3.csv")
emp['sal'][emp['deptno']==20].max()

문제189.  백화점 구매고객 데이터에서 성별이 남자인 고객이 구매한 총구매금액중
             최대금액을 출력하시오 !

X_train=pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
y_train=pd.read_csv("d:\\data\\y_train.csv")
result = pd.merge( X_train, y_train, on='cust_id')
result['총구매액'] [ result['gender']==1].max()

문제190.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select  job, max(sal)
             from  emp
             group  by  job; 

result =  emp.groupby('job')['sal'].max().reset_index()
result
※ 설명:  reset_index() 는 groupby 함수와 짝꿍 함수인데
            데이터를 Series(컬럼) 로 출력하는게 아니라
            DataFrame(테이블) 으로 출력하는 키워드 입니다. 

문제191.   아래의 SQL을 판다스로 구현하시오 !

SQL>  select deptno, sum(sal)
           from  emp
           group  by deptno; 

Pandas>

result=emp.groupby('deptno')['sal'].sum().reset_index()
result

문제192. 위의 결과에서 부서번호별 토탈월급이 9000 이상인것만 출력하세요.

SQL> SELECT  deptno, sum(sal)
           from  emp
           group  by  deptno
           having  sum(sal) >= 9000;

result=emp.groupby('deptno')['sal'].sum().reset_index()
result[ result['sal'] >= 9000 ]

문제193.  성별, 성별별 총구매액의 토탈값을 출력하시오 !

X_train=pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
y_train=pd.read_csv("d:\\data\\y_train.csv")
result = pd.merge( X_train, y_train, on='cust_id')
result.groupby('gender')['총구매액'].sum().reset_index()

문제194.  주구매지점, 주구매지점별 총구매액의 토탈값을 출력하시오 !

X_train=pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
y_train=pd.read_csv("d:\\data\\y_train.csv")
result = pd.merge( X_train, y_train, on='cust_id')
result.groupby('주구매지점')['총구매액'].sum().reset_index()

문제195. 위의 결과를 다시 출력하는데 총구매액별 토탈값이 높은것부터 출력하시오 !

X_train=pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
y_train=pd.read_csv("d:\\data\\y_train.csv")
result = pd.merge( X_train, y_train, on='cust_id')
result2 = result.groupby('주구매지점')['총구매액'].sum().reset_index()
result2.sort_values('총구매액', ascending=False)

문제196. 위의 결과를 result195.csv 로 내리시오 !

X_train=pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
y_train=pd.read_csv("d:\\data\\y_train.csv")
result = pd.merge( X_train, y_train, on='cust_id')
result2 = result.groupby('주구매지점')['총구매액'].sum().reset_index()
result2.sort_values('총구매액', ascending=False).to_csv("d:\\data\\result196.csv", encoding='cp949')

문제197.  환불금액이 가장 많은 지점은 어디인가 ?

result2 = result.groupby('주구매지점')['환불금액'].sum().reset_index()
result3 = result2.sort_values('환불금액', ascending=False)
result3.iloc[0]  # 한개의 행만 가져올때
result3.iloc[0:1]  # 3개의 행 가져올때 

문제198. 환불금액의 토탈값이 높은 성별은 남자인가 여자인가 ?

result2 = result.groupby('gender')['환불금액'].sum().reset_index()
result3 = result2.sort_values('환불금액', ascending=False)
result3.iloc[0:1]

문제199. 직업, 직업별 인원수를 출력하시오 !

SQL> select job, count(empno)
         from  emp
         group by job; 

Pandas>
emp.groupby('job')['empno'].count().reset_index()

문제200.  주구매지점, 주구매지점별 환불금액의 건수를 출력하시오 !

result.groupby('주구매지점')['환불금액'].count().reset_index()

문제201. 위의 건수가 높은것부터 출력하는데 맨위에 5건만 출력하시오 !

result2 = result.groupby('주구매지점')['환불금액'].count().reset_index()
result2.sort_values('환불금액', ascending=False).iloc[0:5]

문제202. 위의 출력된 결과의 컬럼명이 환불금액 ---> 환불금액 건수로 변경하시오 !

result2 = result.groupby('주구매지점')['환불금액'].count().reset_index()
result3 = result2.sort_values('환불금액', ascending=False).iloc[0:5]
result4 = result3.rename( columns ={'환불금액' : '환불금액건수'},inplace=False )
result4

문제203. 주구매상품,  주금액상품별 건수를 출력하는데 주금액상품별 건수가 높은것부터
            출력하시오 !

result2 = result.groupby('주구매상품')['cust_id'].count().reset_index()
result2.sort_values('cust_id', ascending=False)

문제204. 코로나 데이터(PatientInfo.csv)를 판다스 데이터 프레임으로 만들고 
            성별, 성별별 인원수를 출력하시오 !

cov = pd.read_csv("d:\\data\\PatientInfo.csv")
cov.groupby('sex')['patient_id'].count().reset_index()  # null 값이 안나옴

cov['sex'].value_counts(dropna=False)    # null 값이 나옴 

설명:  dropna=True 하면 null 값이 안나옴
        dropna=False 로 하면 null 값이 나옴 

문제205. 코로나에 감염된 나이대,  나이대별 건수를 출력하는데 나이대별 건수가 
           높은것부터 출력하시오!

cov = pd.read_csv("d:\\data\\PatientInfo.csv")
result2 = cov.groupby('age')['patient_id'].count().reset_index()  # null 값이 안나옴
result2.sort_values('patient_id', ascending=False)

문제206.  환자번호, 확진받은 날짜부터 완치한 날짜까지의 일수를 출력하시오 !

import pandas  as  pd
cov = pd.read_csv("d:\\data\\PatientInfo.csv")
cov['c_day']=pd.to_datetime(cov['released_date']) - pd.to_datetime(cov['confirmed_date'])
cov[['patient_id','c_day']]

문제207. (오늘의 마지막 문제)  코로나 확진이후 회복기간의 평균값을 출력하시오 !

SQL문제 10문제.     5시 신호보냈습니다.   5시 10분에 B반 스터디 발표자들 모이겠습니다.
                          6시 신호보냈습니다. 

1. emp 테이블 입사일에서 월별로 카운트하는 문제
2. 월급에 대한 순위, ntile 함수사용법
3. listagg 함수
4. full  outer join
5. 서브쿼리의 not in 연산자 사용하는 SQL
6. self join 과 listagg 를 같이 사용하는 문제
7. emp 와 dept 조인해서 월급에 대한 순위출력
8. 분석함수 avg(sal) over ... 사용법
9. select deptno, job, sum(sal)
     from  emp
    group by grouping sets((deptno,job),(deptno), ())

문제208.  이름과 부서위치와 월급을 출력하시오 !
            (emp3.csv 와 dept3.csv 를 이용해서 ...)

import  pandas  as  pd 

emp = pd.read_csv("d:\\data\\emp3.csv")
dept = pd.read_csv("d:\\data\\dept3.csv")

result = pd.merge( emp, dept, on='deptno')
result[['ename', 'loc', 'sal']]

문제209.  부서위치, 부서위치별 토탈월급을 출력하시오 !

SQL>  select  d.loc,  sum(e.sal)
            from  emp  e, dept  d
            where  e.deptno = d.deptno
            group  by  d.loc;

Pandas>
result.groupby('loc')['sal'].sum().reset_index()

■ 예제69. 반올림수 구하기(round)

 파이썬 내장함수 round() 는 인자로 입력된 숫자형 자리수에서
 반올림한 결과를 리턴합니다. 

예제:
print( round(16.554) )     # 소수점 첫번째 자리에서 반올림 17
print( round(16.554, 0) )  # 소수점 첫번째 자리에서 반올림 17
print( round(16.554, 1) )  # 소수점 두번째 자리에서 반올림 16.6
print( round(16.554, 2) )  # 소수점 세번째 자리에서 반올림 16.55

※ 파이썬에서 반올림할 때 중요하게 알아야하는 내용

print ( round(142.5) )   

* R 과 파이썬은 짝수를 좋아합니다. 

  142.5   ----------->  142                     2            2.5           3
  187.5  ------------>  188                     7            7.5           8

파이썬은 기본적으로 이것을 해결하는 함수가 없습니다. 
0.5 일때는 짝수를 좋아하겠금 반올림되고 0.51 일때는 그냥 반올림됩니다. 

문제210.   emp3.csv 에서 이름과 보너스를 출력하세요 !
              ( 보너스는 월급의 10% 로 하세요 ~)

def  ten_bonus(num):
    return  num*0.1

emp['bonus'] = emp['sal'].apply(ten_bonus)
emp[['ename', 'bonus']]

문제211.  위의 결과를 다시 출력하는데 보너스의 소수점 첫번째 자리에서 
             반올림되서 출력되게하시오 !

emp = pd.read_csv("d:\\data\\emp3.csv")

def  ten_bonus(num):
    return  num*0.1

emp['bonus'] = round(emp['sal'].apply(ten_bonus))
emp[['ename', 'bonus']]

■ 예제70.실수형 자료를 정수형 자료로 변환하기(int)

* 오라클의 변환함수

1. to_char
2. to_number
3. to_date

* 파이썬의 변환함수 정리 

                 데이터 유형       변환함수
정수형             int                 int()
문자형             str                 str()
실수형             float              float()
리스트형          list                 list()
튜플형            tuple               tuple()

코드 작성시 수학연산을 하다보면 정수끼리 계산해야하는 경우가 있습니다.
이때 우리가 가진 데이터가 실수형이라면 실수형 자료를 정수형으로
변환한 후에 계산해주어야 합니다. 
파이썬 내장함수 int() 는 인자로 입력된 실수형 자료를 정수형 자료로
변환해줍니다.  int() 는 입력된 실수형 자료의 소수부분은 버리고
정수부분만 취하여 정수값으로 리턴합니다. 

예:  print (  int(-5.4) )   # -5 

문제212. 문제211번의 결과를 아래와 같이 보너스를 정수형 형태로 출력하시오 !

emp = pd.read_csv("d:\\data\\emp3.csv")

def  ten_bonus(num):
    return  num*0.1

emp['bonus'] = round(emp['sal'].apply(ten_bonus))
emp['bonus'] = emp['bonus'].apply(int)
emp[['ename', 'bonus']]


■ 예제71. 정수형 자료를 실수형 자료로 변환하기(float)

 이미지 처리나 공학용 프로그램을 작성할 때 실수형 끼리만 계산해야하는
 경우가 많습니다. 이때 우리가 가진 데이터가 정수형이라고 하면
 정수형 자료를 실수형 자료로 변환한후에 계산해 주어야 합니다.
 파이썬 내장함수 float() 은 인자로 입력된 정수형 자료를 실수형으로
 변환해줍니다. 

예제:  print ( float(10) )   # 10.0 이 출력됨

문제212. 판다스를 이용해서 이름과 월급을 출력하는데 월급을 출력할때에
            실수형으로 출력하시오 !

emp = pd.read_csv("d:\\data\\emp3.csv")

emp['sal'] = emp['sal'].apply(float)
emp[['ename', 'sal']]

■ 예제72.  정수 리스트에서 소수만 걸러내기(filter)

파이썬 내장함수인 filter() 는 리스트와 같은 자료형에서
특정 조건을 만족하는 값만 편리하게 추출할 수 있는 방법을 제공합니다.
filter() 의 첫번째 인자는 특정조건의 값을 추출하는 함수가 입력되며
두번째 인자(입력매개변수)는 리스트와 같은 자료형이 입력됩니다.

예제:  숫자가 나열되어있는 리스트에서 짝수만 추출해내는 코드를 작성 

a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]

def  get_even(num):
    if  num%2 == 0:
        return  num
    else:
        return             

print ( get_even(2)  )    # 2
print ( get_even(7)  )    # None

a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]

result = filter( get_even,  a ) 
print (list(result) )

문제213.  아래의 리스트에서 숫자가 300 이상이면 출력하고 300 미만이면
             출력되지 않게하시오 !

b = [ 100, 352, 254, 456, 123, 567, 903 ]

#결과: [ 352, 456, 567, 903 ]

def  func1(num):
    if  num >= 300:
        return  num
    else:
        return 

result = filter( func1,  b)
print (list(result) )

■ 예제73.  최대값, 최소값 구하기(max, min)

 max() 와 min() 은 인자로 입력된 자료에서 최대, 최소값을 구해주는 
 함수 입니다. max() 와 min() 의 인자로 리스트와 같은 시퀀스 자료가
 입력되면 시퀀스 자료의 요소 가운데 최대값 또는 최소값을 구하여 
 리턴합니다. 

           오라클              vs               파이썬
            max                                   max
            min                                    min
            count                                  len
            sum                                    sum
            avg                                    mean

예제:  
1.   파이썬 내장함수를 이용했을때 
a = [ 8, 7, 12, 55, 21, 34, 15, 9, 22 ]
print (max(a) ) 

2. 넘파이를 이용했을때 
import  numpy  as  np 
a2 = np.array(a)
a2.max()  

3.  판다스의 series 를 이용했을때 
a3 = pd.Series(a2)
a3
a3.max()

import  pandas  as  pd
emp = pd.read_csv("d:\\data\\emp3.csv")
emp['sal'].max()
            .min()
            .mean()
            .sum()

문제214.  부서위치, 부서위치별 최대월급을 출력하시오 !

import  pandas  as  pd

emp= pd.read_csv("d:\\data\\emp3.csv")
dept = pd.read_csv("d:\\data\\dept3.csv")

result = pd.merge( emp, dept, on='deptno')
result.groupby('loc')['sal'].max().reset_index()

문제215. 백화점 데이터에서 주구매지점, 주구매지점별 최대 총구매액을 
            출력하시오

X_train = pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
X_train.groupby('주구매지점')['총구매액'].max().reset_index()

문제216. 위의 결과를 다시 출력하는데 최대 총구매액이 높은것부터 출력
            하시오 !

X_train = pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
result = X_train.groupby('주구매지점')['총구매액'].max().reset_index()
result.sort_values('총구매액', ascending=False)

문제217. 위의 결과를 다시 출력하는데 최대 총구매액이 836,353,880 이상인
            것만 출력하시오 !

X_train = pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
result = X_train.groupby('주구매지점')['총구매액'].max().reset_index()
result2 = result.sort_values('총구매액', ascending=False)
result2[result2['총구매액'] >=  836353880]

■예제74.  판다스에서 결측치(NaN) 확인하기 

 emp3.csv 에서 comm 처럼 결측치(NaN) 를 처리하는 판다스 함수를 배웁니다.
                                               ↓
                                         Not  a  Number

머신러닝 학습시에 전처리된 데이터를 기계에게 제공해줘야합니다.
                            ↓
           1.  결측치를 제거하거나 다른값으로 치환하는 작업 
           2.  이상치를 제거
           
좋은 데이터가 있어야 좋은 인공지능 모델을 생성할 수 있습니다.

예제1. emp3.csv 에서 결측치를 확인하시오 !

emp = pd.read_csv("d:\\data\\emp3.csv")
emp.isnull().sum()

문제218. 백화점 데이터에서 결측치를 확인하시오 !

X_train.isnull().sum()

※ 결측치를 처리하는 방법 

 1. 결측치가 너무 많으면 해당 컬럼(변수)을 삭제한다.

   예:  df.drop[['컬럼명1','컬럼명2'], axis=1]

 2. 그렇지 않다면 아래의 4가지 방법을 이용해서 결측치를 다른값으로 치환한다.
           
                   1.  최빈값으로 치환
                   2.  결측치 주변의 값으로 치환
                   3.  평균값으로 치환 
                   4.  회귀를 이용한 예측값으로 치환 

문제219.  백화점 데이터에서 환불금액 컬럼을 drop 하시오 !

X_train2 = X_train.drop( ['환불금액'], axis=1)
X_train2
X_train2.columns

문제220.  커미션이 null 인 사원들의 이름과 커미션을 출력하시오 !

emp = pd.read_csv("d:\\data\\emp3.csv")
emp[ ['ename','comm']] [ emp['comm'].isnull() ]

※ 오라클 기타 비교연산자 4가지와 비교
      
 1. between .. and                       emp['sal'].between(1000,3000)
 2. in                                        emp['deptno'].isin(10,20)
 3. is null                                   emp['comm'].isnull()
 4. like                                      emp['ename'].apply(lambda  x:x[0])

문제221. 커미션이 null 이 아닌 사원들의 이름과 커미션을 출력하시오 !

emp[ ['ename','comm']] [ ~ emp['comm'].isnull() ]

점심시간 문제:  조건부 확률 구하는 문제:  A 반은 라인 검사
                                                       B 반은 카페에 올리세요 ~~

* 타이타닉 데이터를 이용해서 결측치 처리하는 방법 배우기 

1. 결측치를 평균값으로 치환하는 방법

import  seaborn  as   sns
tat = sns.load_dataset('titanic')
tat

survived	 :  생존여부 : 1: 생존, 0: 사망
pclass	 :  티켓등급
sex	 : 성별
age	 : 나이
sibsp	 : 동반가족수 
parch	 : 함께 탑승한 부모 또는 자녀수
fare	 :  운임
embarked  : 정박한 항구명 단축키워드 
class	  : 티켓등급 
who	  : 성별
adult_male : 성별	 
deck	 : 정박한 항구명 단축키워드 
embark_town: 정박한 항구명 
alive	: 생존여부
alone     : 혼자 탑승했는지 가족이랑 탑승했는지

import  seaborn  as   sns
tat = sns.load_dataset('titanic')
tat.isnull().sum()
mean_age = tat['age'].mean()
mean_age  # 29.6
tat['age'].fillna( mean_age, inplace=True)  # 나이의 결측치를 나이의 평균값으로
                                                      # 치환 

문제222. 사원 테이블의 커미션의 결측치를 커미션의 평균값으로 치환하시오 !

mean_comm = emp['comm'].mean()
emp['comm'].fillna( mean_comm, inplace=True)
emp

문제223.  위의 커미션이 실수형이 아니라 정수형으로 출력되게하시오 !

mean_comm = emp['comm'].mean()
emp['comm'].fillna( mean_comm, inplace=True)
emp['comm'] = emp['comm'].apply(int)
emp

2. 최빈값으로 결측치를 치환하기 

import  seaborn  as   sns

tat = sns.load_dataset('titanic')  # 시본 모듈에 내장되어있는 타이타닉 데이터를
                                          # 불러와서 tat 라는 판다스 데이터프레임 생성

most_age = tat['age'].value_counts(dropna=True).idxmax()
most_age
tat['age'].fillna( most_age, inplace=True)
tat

tat.age.isnull().sum()  # 0 

3. 결측치를 주변의 데이터로 치환한다. 

import  seaborn  as   sns

tat = sns.load_dataset('titanic')  # 시본 모듈에 내장되어있는 타이타닉 데이터를
                                          # 불러와서 tat 라는 판다스 데이터프레임 생성

tat['deck'].fillna( method='ffill', inplace=True) # 결측치 위의 데이터로 치환
tat['deck'].fillna( method='bfill', inplace=True) # 결측치 아래의 데이터로 치환
tat

문제224. 사원 테이블의 커미션을 커미션의 최빈값으로 치환하시오 !

emp = pd.read_csv("d:\\data\\emp3.csv")
most_comm = emp['comm'].value_counts(dropna=True).idxmax()
most_comm
emp['comm'].fillna( most_comm, inplace=True)
emp

■ 예제75.  판다스에서 파생변수 추가하는 방법

    기계가 공부하기 좋은 학습 데이터

* 타이타닉 데이터에서 좋은 파생변수란 ?    

  생존자와 사망자를 잘 분류할 수 있는 학습 데이터(컬럼)

  파생변수란 기존의 데이터를 가지고 새롭게 가공해서 만든 
  새로운 컬럼입니다. ----> feature  engineering

  "여자와 아이먼저 보트에 타세요 ~"

문제225.  타이타닉 데이터에서 성별, 성별별 인원수를 출력하시오 !

tat.groupby('sex')['survived'].count()

female    314
male      577

tat['sex'].value_counts(dropna=False) 

문제226.  생존여부, 생존여부별 인원수를 출력하시오 !

tat['survived'].value_counts(dropna=False) 

0    549   ---> 사망
1    342   ----> 생존

문제227.  나이가 10살 미만인 승객들의 모든 데이터를 출력하시오 !

tat[tat['age'] < 10 ]

문제228.  성별이 여자이거나 나이가 10살 미만인 승객은 1이라고 하고 
             아니면 0 이라고 하는 women_child 라는 파생변수를 생성하시오 !
             (파이썬에서 or 는 |  이고 and 는 & 입니다.)

mask = (tat['sex']=='female')  | (tat['age'] < 10)
mask.astype(int)   # True 는 1이 나오고 False 는 0 이 나옵니다. 
tat['women_child'] = mask.astype(int) 
tat 

문제229.  직업, 직업별 평균월급을 출력하시오 !

emp.groupby('job')['sal'].mean().reset_index()

문제230. 위의 결과를  job_mean 이라는 데이터 프레임으로 만드시오 !

job_mean = emp.groupby('job')['sal'].mean().reset_index()
job_mean

문제231.  emp 데이터 프레임과 job_mean 을 조인해서 이름과 월급과
            직업과 자기가 속한 직업의 평균월급을 출력하시오 !

result =pd.merge( emp, job_mean, on='job')
result

문제232.   emp 데이터 프레임에  자기 직업의 평균월급을 파생변수로 생성
              하시오 ! ( 파생변수 이름은 job_avgsal )

result =pd.merge( emp, job_mean, on='job')
result.rename( columns ={'sal_x' : 'sal', 'sal_y' : 'jobavgsal'}, inplace=True )

result.drop(['job_avgsal'], axis=1, inplace=True)
result

문제233.  자기의 월급이 자기가 속한 직업의 평균월급보다 더 작으면
             1 로 출력하고 많으면 0 으로 출력되는 파생변수를 emp 데이터
             프레임에  ret_p  라는 이름으로 추가하시오 !

mask2 = result['sal'] < result['jobavgsal']
result['ret_p'] = mask2.astype(int)
result

문제234. emp 데이터 프레임에 파생변수를 추가하는데 자기의 월급이
            2500 보다 작으면 1 로 출력하고 아니면 0으로 출력하는 
            파생변수를  sal_yn 라는 이름으로 추가하시오 !

mask3 =  emp['sal'] < 2500
emp['sal_yn'] = mask3.astype(int)
emp

SQL 시험 준비를 하도록 하겠습니다.

1. 자기 자리에 오라클에 scott 으로 접속이 되는지 확인하세요 !
2. 반카페에 가서 오라클 SQL 실습 파일을 scott 유져에서 다시 돌리세요
3. 실습은 할 수 있는데 오픈북은 아닙니다.
.

    1. 답안지 제출방법은 오픈 오피스 워드 파일에 코드를 캡쳐해서 제출
       캡쳐는 sqldeveloper 에서 수행한것 캡쳐 (코드와 결과 같이 캡쳐)
       (전인훈_SQL1.odt)

      NCS 능력단위_SQL응용_문제지_전인훈.doc


lms 사이트가서 ---> 평가관리 ---> SQL응용 
시험시간은 5시 15분까지 입니다. 
 5시 신호보냈습니다. 
 6시 신보보냈습니다. 

http://itwill.atosoft.net/


■ 예제76.  문자열에서 특정 위치의 문자 얻기

 문자열에서 특정 위치의 문자를 얻는 방법은 인덱싱을 이용하는 것입니다.
 인덱스는 0번부터 시작합니다. 파이썬 인덱스는 음수도 가능합니다.

예제:
print ( 'scott'[0] ) #  s
print ( 'scott'[2] ) #  o


a = 'scott'
print ( a[0] )  #  s
print ( a[2] )  #  o

문제235.  아래의 txt 변수에서 w 를 출력하시오 !

txt = 'A tale  that  was  not  right'

print ( txt[12] )

문제236.  위의 txt 변수에서 맨끝의 철자인 t 를 출력하시오 !

txt = 'A tale  that  was  not  right'

print (txt[-1])

문제237.   emp3.csv 에서 이름을 출력하는데  이름의 끝의 철자만 출력하시오

SQL> select  substr(ename, -1, 1 )
            from  emp;

Pandas>
import pandas  as pd
emp = pd.read_csv("d:\\data\\emp3.csv")
emp.ename.apply(lambda  x:x[-1])

■ 예제77.  문자열에서 지정한 구간의 문자열 얻기

 문자열에서 특정 구간에 있는 문자열을 얻으려면 슬라이싱을 이용하면 
 됩니다.

예제:
print( 'scott'[0:2])  #  sc   0 부터 2미만까지 
a = 'scott'
print ( a[0:2] )  #  sc
print ( a[3: ] )  #  tt
print ( a[ :3] )  #  sco

문제238. 아래의 SQL 의 결과를 판다스로 구현하시오 !

SQL>  select  ename, substr( ename, 1 ,3 )
           from  emp;

Pandas> 
import  pandas   as  pd

emp = pd.read_csv("c:\\data\\emp3.csv")
emp.ename.apply(lambda  x:x[0:3])

문제239. 카카오 신입 알고리즘 문제. 자카드 유사도를 구하기 위해서
            아래의 두개의 문자를 두개의 리스트에 담으시오 !

 아산병원에 지금 온 환자의 초음파 사진만 보고 용종이 양성인지 음성이지를
 바로 인공지능이 보고 판단을 할 수 있는데...

* 군집간의 거리를 구하는 방법 (수제비 2-59 출처)

 1. 연속형 변수 거리
               1.1 수학적 거리:  유클리드 거리, 맨허튼 거리, 민코프스키 거리
               1.2 통계적 거리 : 표준화, 마할라노비스 

 2. 명목형 변수 거리 :  1. 단순일치 개수
                              2. 자카드 계수 

아래의 두 문자의 자카드 유사도를 구하시오 ! 
 ( 아래 2개의 명목형 변수 a 와 b 가 얼마나 유사한지를 측정)

a ='france'
b ='french'

A = ['FR', 'RA', 'AN', 'NC', 'CE']
B = ['FR', 'RE', 'EN', 'NC', 'CH']


0~ 1사이의 값을 가지며 두 집합이 동일하면 1의 값, 공통의 원소가 하나도 없으면
0 의 값을 가짐    45분까지 쉬세요 ~~~


a ='france'

for  i  in  range(len(a)-1):
    print(a[ i : i+2].upper())


결과:   ['FR', 'RA', 'AN', 'NC', 'CE']

a ='france'

result = []
for  i  in  range(len(a)-1):
    result.append(a[ i : i+2].upper())

print( result )

문제240. 문자를 받아서 아래와 같이 리스트로 출력하는 함수를 생성하시오!

print( str_split() )

문자를 입력하세요 ~  france

결과:   ['FR', 'RA', 'AN', 'NC', 'CE']

def  str_split():
    a = input('문자를 입력하세요 ~ ').upper()
    result=[]
    for  i  in  range(len(a) -1):
        result.append(a[ i : i+2 ])
    return  result

문제241.  아래의 2개의 리스트의 교집합의 갯수를 구하시오 !

A = ['FR', 'RA', 'AN', 'NC', 'CE']
B = ['FR', 'RE', 'EN', 'NC', 'CH']

#결과:  2  

intersect =[]
for  i  in   A:    # ['FR', 'RA', 'AN', 'NC', 'CE']
    if  i  in  B:
        intersect.append(i)
print ( len(intersect))

문제242.  jacard 라는 함수를 아래와 같이 만드시오 !

print ( jacard() ) 

첫번째 문자열을 입력하세요 ~  france
두번째 문자열을 입력하세요 ~  french

  2   <--- 교집합의 갯수를 출력하세요.

def  jacard():
    a = input('첫번째 문자열을 입력하세요 ~')
    b = input('두번째 문자열을 입력하세요 ~')
    A = []
    B = []
    for  i  in  range(len(a)-1):
        A.append(a[ i : i+2 ])
    for  i  in  range(len(b)-1):
        B.append(b[ i : i+2 ] )

    intersect= []
    for  i  in  A:
        if  i  in B:
            intersect.append(i)
    return  len(intersect)

문제243.  아래의 두리스트의 합집합을 구하시오 !

a = [ 'FR', 'RA', 'AN', 'NC', 'CE' ]
b = [ 'FR', 'RE', 'EN', 'NC', 'CH' ] 

union = set(a+b)
print (union)

문제244.  자카드 유사도 거리 공식을 이용해서 jacard() 함수를 완성시키시오

print ( jacard()  )

첫번째 문자열을 입력하세요 ~  france
두번째 문자열을 입력하세요 ~  french

0.25


def  jacard():
    a = input('첫번째 문자열을 입력하세요 ~')
    b = input('두번째 문자열을 입력하세요 ~')
    A = []
    B = []
    for  i  in  range(len(a)-1):
        A.append(a[ i : i+2 ])
    for  i  in  range(len(b)-1):
        B.append(b[ i : i+2 ] )

    intersect= []
    for  i  in  A:
        if  i  in B:
            intersect.append(i)
    k = len(intersect)
    h = len( set(A + B) )
    return  ( k/h)

0.25 * 65536


■ 예제78.  문자열에서 홀수 번째 문자만 추출하기

  주어진 문자열에서 홀수 번째 문자만 추출하는 방법은 슬라이싱의 
  스텝을 이용하면 됩니다. 

예제:
txt = 'aAbBcCdDeEfFgGhHiIjJkK'
print ( txt[0:] ) 
print ( txt[:] )
print ( txt[ 0: : 2] )


문제245.  위의 txt 변수에서 짝수번째 철자들만 출력하시오 !    45분까지쉬세요

print ( txt[ 1: : 2] )

■ 예제79. 문자열을 거꾸로 만들기

 슬라이싱을 이용하면 매우 간단하게 거꾸로된 문자열을 얻을 수 있습니다.
 문자열 txt 를 처음부터 끝까지 스텝 -1 로 슬라이싱 하면 됩니다.

txt = 'aAbBcCdDeEfFgGhHiIjJkK'
print ( txt[ : : -1] )

문제246.  emp3.csv 에서 이름을 출력하고 그 옆에 이름을 거꾸로 출력하시오 !

import  pandas  as  pd

emp = pd.read_csv("d:\\data\\emp3.csv")

pd.concat([ emp.ename, emp.ename.apply(lambda x:x[::-1]) ], axis=1 )

■ 예제80. 두 개의 문자열 합치기( )

 두개의 문자열을 합치는 방법은 매우 간단합니다.
 문자열1 + 문자열2 + 문자열3 으로 + 연산자를 이용하면 됩니다.

예제:
a = 'scott'
b = 'king'
print (a+b)  # scottking

문제247. 아래의 SQL을 판다스로 구현하시오 !

SQL>  select  ename || '의 직업은 ' || job || '입니다'
           from  emp;

Pandas> 
print ( emp.ename  + '의 직업은 '  +  emp.job  + ' 입니다.' )

■ 예제81. 문자열을 반복해서 새로운 문자열로 만들기(*)

예제:
print ( '여러분 ~ ' * 10 ) 

문제248. 아래와 같이 사각형이 출력되게하시오 !

가로의 숫자를 입력하세요 ~  3
세로의 숫자를 입력하세요 ~  4

★★★
★★★
★★★
★★★

a = int( input('가로의 숫자를 입력하세요 ~') )
b = int( input('세로의 숫자를 입력하세요 ~') )

for  i  in  range( 1, b+1):
    print ( a * '★')

■ 예제82.  문자열에서 특정 문자가 있는지 확인하기(in)

 문자열에서 특정 문자가 있는지 없는지 확인하려면 in 키워드를 이용하면
 됩니다. 

예제:
txt = 'abcdefghijklmnopqr'

if  'b' in txt:
    print ('존재합니다')
else:
    print ('존재하지 않습니다.')

문제249.  아래의 SQL을 판다스로 구현하시오 !

SQL>  select  ename
            from  emp
            where  ename  like '%S%';

Pandas> 
emp[['ename']] [ emp['ename'].apply( lambda  x : 'S'  in  x) ] 

또는

import pandas as pd
emp= pd.read_csv("d:\\data\\emp3.csv")
emp[['ename']][emp['ename'].str.contains('S')]

점심시간 문제:   B 반은 라인검사
                      A 반은 카페에 올려서 검사받으세요 ~~~
                     
  1부터 10까지의 리스트에 없는 숫자를 알아내세요 ~

■ 예제83. 문자열에서 특정 문자열이 있는지 확인하기(in)

 보험회사에서 보험 상담원분들이 상담하실때의 상담내용중에
 부적절한 용어가 있는지 없는지를 확인하여 금융감독원에 보고를 해야
 하는데 이 확인작업을 사람이 하려면 많은 인력과 시간이 드니까
 파이썬으로 쉽게 할 수 있도록 프로그래밍할 때 문자열에서 문자열이
 있는지 확인하는 코드로 작성하면 됩니다. 

 예:  한달 ---> 30일

보험상담원 상담내용 --------> 텍스트 변경 ----> 텍스트에서 특정 단어를 검색

예제1.  스티븐잡스 연설문에서 mother 이 몇번 나오는지 확인하시오 !

jobs = open('d:\\data\\jobs.txt', encoding='utf8')
jobs2 = jobs.read().split(' ')  # 스크립트를 공백단위로 분리해라 ~
cnt = 0
for  i  in  jobs2:
    if  'mother'  in  i.lower():
        cnt += 1
print(cnt)

문제250. 스티븐 잡스 연설문에서 mother, should가 몇번 나오는지 출력하시오 !

jobs = open('d:\\data\\jobs.txt', encoding='utf8')
jobs2 = jobs.read().split(' ')  # 스크립트를 공백단위로 분리해라 ~
cnt = 0
for  i  in  jobs2:
    if  i.lower() in ['mother','should']:
        cnt += 1
print(cnt)

문제251. 위의 스크립트를 수정해서  mother 은 몇번 나왔고 should 는 몇번
            나왔는지 아래와 같이 출력하시오 

mother  2
should   4 

답:  동민이 코드 

cnt_m = 0
cnt_s = 0

for i in jobs2:
    if 'mother' in i.lower():
        cnt_m += 1
    elif 'should' in i.lower():
        cnt_s += 1
        
print('mother는 ', cnt_m, '번 나왔고, should는 ', cnt_s, '번 나왔습니다.')

승혁이 코드:

jobs2 = jobs.read().split(' ')
word_cnt = {}                    # 비어있는 딕셔너리 생성 
for i in jobs2:                    # 어절별로 분리된 리스트의 어절을 하나씩 불러옴
    i = i.lower()                  # 소문자로 변환하고 
    if i in ('mother','should'):   # 불러오는 어절이 mother, should 이면
        word_cnt[i] = word_cnt.get(i,0) + 1 # 키는 mother로 하고 값은 숫자인데
                                                # 제일 처음에는 0이고 그다음부터 1씩 증가
for i,v in word_cnt.items():  # 키와 값을 같이 가져와서 
    print(i,v)                     # 프린트를 합니다. 

생각해야할 문제:  만약에 스티븐 잡스 연설문에 shouldn't 가 있거나
                        mother's 가 있으면 이것도 카운트 되게하시오 !

■ 예제84. 문자열 길이 구하기(len)

예제:
a = 'scott'
print ( len(a) )  # 5

문제252.  이름,  이름의 철자의 갯수를 출력하시오 !

SQL> select  ename, length(ename)
         from  emp;

Pandas> 

pd.concat( [emp.ename, emp.ename.apply( lambda x:len(x)) ], axis=1 )

■ 예제85. 문자열이 알파벳인지 검사하기(isalpha)

 문자열은 문자나 숫자, 기호들로 구성이 됩니다. 코드를 작성하다 보면
 특정 문자열이 한글이나 알파벳과 같이 사람의 언어를 표현하기 위해
 사용되는 문자로만 구성되어 있는지 확인해야하는 경우가 있습니다.
 파이썬 문자열 객체가 제공하는 메소드인 isalpha() 는 주어진 문자열이
 사람의 언어 문자로만 구성되어있는지 확인해줍니다. 

예제:
txt1 = 'Warcarft  three'
txt2 = '안녕'
txt3 = '3PO'

print( txt1.isalpha() )  # False   공백이 하나 있어서 False 가 나옴
print( txt2.isalpha() )  # True    한글이나 다른 나라 언어도 True로 나옴
print( txt3.isalpha() )  # False   숫자 3 때문에 False 가 나옴

예제1.  스티븐 잡스 연설문인 jobs.txt 를 한행씩 한행씩 출력하시오 !

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().split('\n')  # 한행식 분리하는 작업
for  i  in  jobs2:
    print(i)

예제2.  위에서 한행씩 출력되고 있는 스크립트를 읽어와서 철자 하나씩 
          출력하시오 !

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().split('\n')  # 한행식 분리하는 작업
for  i  in  jobs2:   # 한행씩 불러옴
    for  j  in  i:     # 한행씩 불러온것을 철자 하나씩 불러옴
        print(j) 

문제253.  위에서 출려된 철자가 알파벳이면 cnt 를 증가시켜서
             스티븐 잡스 연설문에서 알파벳이 총 몇개가 있는지 출력하시오 !

cnt = 0 
jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().split('\n')  # 한행식 분리하는 작업
for  i  in  jobs2:   # 한행씩 불러옴
    for  j  in  i:     # 한행씩 불러온것을 철자 하나씩 불러옴
        if  j.isalpha() == True:
            cnt = cnt + 1
print(cnt) 



문제254. 아래의 문제244번에서 작성했던 jacard() 함수를 수정해서
             0~1 사이의 숫자가 아니라 카카오 문제 예시처럼
             65536 을 곱한 결과로 출력되게하시오 !

print ( jacard()  )

첫번째 문자열을 입력하세요 ~  france
두번째 문자열을 입력하세요 ~  french

0.25

def  jacard():
    a = input('첫번째 문자열을 입력하세요 ~')
    b = input('두번째 문자열을 입력하세요 ~')
    A = []
    B = []
    for  i  in  range(len(a)-1):
        A.append(a[ i : i+2 ])
    for  i  in  range(len(b)-1):
        B.append(b[ i : i+2 ] )

    intersect= []
    for  i  in  A:
        if  i  in B:
            intersect.append(i)
    k = len(intersect)
    h = len( set(A + B) )
    return  ( int(k/h * 65536 ))

첫번째 문자열을 입력하세요 ~french
두번째 문자열을 입력하세요 ~france
16384

문제255.  set 을 사용하면 중복을 날려버리니까  a + b - intersection 이 
             되게 하기위해서 아래의 두개의 리스트를 만들고 두개의 합집합이
              [ 1, 1, 1, 2, 2, 3, 4, 5 ] 되게하고 교집합은 [1, 1, 2, 2] 되게하시오 !

A =[ 1, 1, 1, 2, 2, 3 ]
B =[ 1, 1, 2, 2, 4, 5 ]

import  collections 
intersect = []
result = collections.Counter(A)  & collections.Counter(B)  # 교집합
intersect = list( result.elements() ) 

result2 = collections.Counter(A) | collections.Counter(B)  # 합집합 
union = list( result2.elements() )
print(intersect )  # 교집합 출력  [1, 1, 2, 2]
print(union )    # 합집합 출력   [1, 1, 1, 2, 2, 3, 4, 5]

설명: 기존의 코드에서 아래의 handshake 와 shake hands가  자카드 유사도
        공식을 제대로 수행하지 못한 이유는 set 함수가 합집합을 구할때 
        중복된 교집합을 다 하나로 만들었기 때문입니다. 합집합이 될때는
        교집합을 다 살리고 출력해줘야합니다. 예를 들면 아래의 두 리스트의
        합집합이  [1, 1, 1, 2, 2, 3, 4, 5] 이렇게 출력되어야합니다.
        그런데 set 함수는 [ 1, 1, 2, 2, 3, 4, 5 ] 이렇게 출력됩니다.  
        그래서 collections 를 이용해서 제대로 합집합이 나오게 한것입니다.

A =[ 1, 1, 1, 2, 2, 3 ]
B =[ 1, 1, 2, 2, 4, 5 ]

함수를 이용해서 다시 코딩을 해보겠습니다.

" 함수는 기능이 가급적 하나여야하고 재사용이 가능해야합니다. !! "

문제256. str_split 라는 함수를 만들어서 아래와 같이 수행되게하시오!

a ='france'

print ( str_split(a) )

#결과:  ['FR', 'RA', 'AN', 'NC', 'CE']

def  str_split(str_var):
    string = str_var.upper()                # 입력문자를 전부 대문자로 변경합니다.
    result = []                                 
    for  i  in range(len(string) -1):        # 문자의 갯수에서 1뺀것만큼 반복하는데
        result.append(string[ i : i+2])     # 슬라이싱을 이용해서 철자2개씩 
    return  result                             # result 리스트에 append 시킵니다. 

print ( str_split(a) )

문제257. 아래와 같이 알파벳이 아닌 문자가 들어오면 result 리스트에 구성되지
             않게하시오 ! (str_split 함수를 수정하세요)

b= 'shake hands'

def  str_split(str_var):
    string = str_var.upper()                # 입력문자를 전부 대문자로 변경합니다.
    result = []                                 
    for  i  in range(len(string) -1):        # 문자의 갯수에서 1뺀것만큼 반복하는데
        if  string[i].isalpha()==True  and string[i+1].isalpha()==True:
            result.append(string[ i : i+2])     # 슬라이싱을 이용해서 철자2개씩 
    return  result 

print( str_split(b))

문제258.  collections 모듈을 이용해서  교집합과 합집합을 제대로 나오게해서
             jacard() 함수를 아래와 같이 생성하는데 위에서 만든 str_split 함수를
             jarcard() 함수내에서 활용해서 아래와 같이 출력되게하시오 !

jarcard()

문자열을 입력하세요~ handshake
문자열을 입력하세요~ shake hands
import  collections

def  jarcard():
     str1 = input('문자열을 입력하세요 ~')
     str2 = input('문자열을 입력하세요 ~')
     a = str_split(str1)
     b = str_split(str2)

    result = collections.Counter(a) & collections.Counter(b)
    intersect = list(result.elements() )

    result2 = collections.Counter(a) | collections.Counter(b)
    union = list(result2.elements() )

    len_i = len(intersect)
    len_u = len(union)
    return  int( len_i/len_u * 65536) 

문제259. (오늘의 마지막 문제) 

다만 A와 B가 모두 공집합일 경우에는 나눗셈이 정의되지 않으므로
division by zero 가 발행하므로  따로 J(A,B) = 1로 정의합니다. 
즉, 65536을 곱하면 이 경우 1 * 65536 = 65536이 되겠금 jacard() 함수를 수정하고
아래의 코드가 실행되게하시오 ~

문자열을 입력하세요 ~ E=M*C^2	
문자열을 입력하세요 ~ e=m*c^2

65536

5시 신호 보냈습니다.  마지막 문제 올리고 자유롭게 자습 또는 스터디 하세요 ~~
6시 신호 보냈습니다. 

■  파이썬 200제 복습 

 1. 파이썬 자료형 5가지 
 2. 파이썬에서의 연산자
 3. if 문과 loop 문
 4. 문자를 다루는 함수들1
 5. 파이썬에서 함수 만드는 방법
 6. 파이썬에서 모듈 사용법
 7. 파이썬에서 클래스 사용법
 8. 판다스 사용법
 9. 예외처리
 10. 숫자 자료형을 다루는 함수들
 11. 문자를 다루는 함수들2 

■예제86.  문자열이 숫자인지 검사하기(isdigit)

문자열 객체의 isdigit() 메소드는 문자열을 구성하는 요소가
모두 숫자인지 체크하고 True 또는 False 를 리턴합니다.

 번호          내장함수                  설명
  1              isalpha()                 알파벳(한글) 이 맞는지 확인 
  2              isdigit()                  숫자가 맞는지 확인
  3              isspace()                 공백이 맞는지 확인 

예제1. 스티븐 잡스 연설문에서 숫자가 몇개가 있는지 출력하시오 !

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().split('\n')  # 한행씩 리스트에 담는다
cnt = 0
for  i  in  jobs2:
   # print(i)   # 한행씩 읽어옴 
    for  k  in  i:  # 한행씩 읽어온것을 다시 하나의 철자로 읽어옴 
        if  k.isdigit() == True:
            cnt = cnt + 1
print(cnt)

문제260. 아래의 리스트에서 숫자들의 총합을 출력하시오 !

c = [ 1, 2, 4, 'a', 6, 7, 'b', 2, 'e', 5, 2, 'k' ] 

cnt = 0

for  i   in   c:
    if  str(i).isdigit() == True:
        cnt += i

print (cnt)

※ 설명:  isdigit() 메소드를 사용하려면 문자형이어야합니다.
           문자형으로 변환하기 위해서 str 함수를 사용했습니다. 

■ 예제87. 문자열이 알파벳 또는 숫자인지 검사하기 (isalnum)

 알파벳(한글) 과 숫자를 동시에 확인하는 문자열 함수는 isalnum() 입니다.

예제:
a = 'A story  is 2003'
for i  in  a:
    if  i.isalnum() ==True:
        print(i)

* 데이터 분석 모형 활용 사례(수제비책 3-11)

1. 연관규칙학습
2. 분류 분석
3. 유전자 알고리즘
4. 기계학습
5. 회귀분석
6. 감성분석 ---> 특정 주제에 대해 말하거나 글을 쓴 사람의 감정을 분석
                      예: 새로운 환불정책에 대한 고객의 평가는 어떤가?
7. 소셜 네트워크 분석

예제1.  긍정단어( positive-word.txt) 를 파이썬으로 읽어서 리스트에 담으시오!

positive = open("d:\\data\\positive-words.txt")
pos = positive.read().split('\n')
print (pos)

예제2.  스티븐 잡스 연설문을 어절별로 출력하시오 !

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().split(' ') # 어절별로 분리되어서 리스트 구성
for  i  in  jobs2:
    print(i)

문제261. 스티븐 잡스 연설문에는 긍정단어가 몇개가 있는가 ?

positive = open("d:\\data\\positive-words.txt")
pos = positive.read().split('\n')

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().split(' ') # 어절별로 분리되어서 리스트 구성
cnt = 0
for  i  in  jobs2:
    if  i.lower() in  pos:
        cnt += 1
print(cnt)  #73

문제262. 스티븐 잡스 연설문에는 긍정단어가 많은가 부정단어가 많은가?

positive = open("d:\\data\\negative-words.txt")
pos = positive.read().split('\n')

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().split(' ') # 어절별로 분리되어서 리스트 구성
cnt = 0
for  i  in  jobs2:
    if  i.lower() in  pos:
        cnt += 1
print(cnt)  # 38

문제263.  EBS 레이디 버그 만화 시청자 게시판에는 긍정단어가 많은가
             부정단어가 많은가 ?  

텍스트 파일:  ladybug2.txt
긍정단어: positive_kor.txt  # 62
부정단어: nagative_kor.txt  # 48

positive = open("d:\\data\\positive_kor.txt")
pos = positive.read().split('\n')

jobs = open("d:\\data\\ladybug2.txt", encoding="utf8")
jobs2 = jobs.read().split(' ') # 어절별로 분리되어서 리스트 구성
cnt = 0
for  i  in  jobs2:
    if  i.lower() in  pos:
        cnt += 1
print(cnt)  # 62

■ 예제88. 문자열에서 대소문자 변환하기 (upper, lower) 

 문자열 객체의 upper() 메소드는 문자열에 있는 모든 알파벳을
 대문자로 변환한 결과를 리턴합니다. 문자열 객체의 lower() 메소드는
 문자열에 있는 모든 알파벳을 소문자로 변화한 결과를 리턴합니다. 

예제:
txt ='A lot of things  occur  each day'
print ( txt.upper() )
print ( txt.lower() )

문제264.  긍정단어 리스트의 모든 요소를 대문자로 변환하시오 !

positive = open("d:\\data\\positive-words.txt")
pos = positive.read().split('\n')
print(pos)

pos2 = []
for  i   in   pos:
    pos2.append(i.upper() )

print(pos2)

석영이 코드:
positive = open("d:\\data\\positive-words.txt")
pos = positive.read().upper().split('\n')
print(pos)

■ 예제89. 문자열에서 좌우 공백제거하기 (lstrip, rstrip, strip)

  함수             설명
  lstrip            문자열에서 존재하는 왼쪽 공백을 제거
  rstrip            문자열에서 존재하는 오른쪽 공백을 제거
  strip             문자열에서 존재하는 양쪽 공백을 제거 

예제:
txt7 = '     양쪽에 공백이 있는 문자열 입니다.    '
print( txt7)
print ( txt7.lstrip() )
print ( txt7.rstrip() )
print ( txt7.strip() )

문제265. 스티븐 잡스 연설문에는 정관사 the 가 몇번 나오는가 ?

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().lower().split(' ')

cnt = 0
for  i  in  jobs2:
    if  i.lower().strip()  == 'the': # 양쪽에 공백이 있을 수 있으므로 확인사살
        cnt = cnt + 1
print( cnt )

※ strip 함수를 썼을때와 안썼을때 차이가 발생합니다.

■ 예제90.  문자열에서 문자 갯수 구하기 (count)

  문자열 객체의 count() 메소드는 문자열에서 특정 문자의 갯수를 리턴합니다. 

예제:
txt = 'A lot of  things  occur  each day. Today  is beautiful  day'
print ( txt.count('day') )  # txt 문자열에서 day 가 몇번 나오는지 건수 확인 

* 텍스트 마이닝 ?  텍스트 마이닝이란 대량의 텍스트 데이터로 부터 
   패턴 또는 관계를 추출하여 의미있는 정보를 찾아내는 기법입니다. 
   비정형/반정형 데이터에 대하여 자연어/문서 처리 기술을 적용하여
   의미있는 정보를 추출하는 기법입니다.  ( 출처: 수제비 p1-6)

문제266.  안철수 연설문에서 국민 이라는 단어가 몇번 나오는지 
             카운트 하시오 ! ( ahn.txt )

ahn = open("d:\\data\\ahn.txt", encoding="utf8")
ahn2 = ahn.read()   # split 를 안하면 그냥 안철수 연설문을 통채로 읽어서
                          # ahn2 에 입력한다. 
print(ahn2.count('국민') )  ## 22


문제267. 1부터 10,000까지 8이라는 숫자가 총 몇번 나올까?

sum = 0
for i in range(1, 10001):
    print( str(i), str(i).count('8') )
    sum += str(i).count('8')

print(sum)

■ 예제91.  문자열에서 특정 문자(열) 위치 찾기(find)

  문자열 객체의 find() 함수는 문자열에서 특정 문자나 문자열이
  위치하는 인덱스를 리턴합니다.  find() 에서 찾고자 하는 문자를
  입력하면 해당 문자나 문자열이 최초로 나타나는 위치에 대한 
  인덱스를 리턴합니다.

예제:
txt = 'A lot of things occur  each  day'
print ( txt.find('o') )  # 3
print ( txt.find('day') ) # 27

문제268.  우리반 emp13.csv 를 판다스 데이터 프레임으로 만드시오 !

import  pandas  as  pd

emp13 = pd.read_csv("d:\\data\\emp13.csv", encoding="euckr")
emp13

문제269.  emp13.csv 에서 이메일의 @ 의 위치 인덱스 번호를 출력하시오 !

emp13.EMAIL.apply(lambda x:x.find('@'))

문제270. emp13.csv 에서 이메일의 . 의 위치 인덱스 번호를 출력하시오 !

emp13.EMAIL.apply(lambda x:x.find('.'))

문제271.  아래의 이메일에서 naver 만 추출하시오 !

email = abcdefg@naver.com
email[ 8 : 13 ]

문제272.  우리반 테이블 이메일에서  도메인만 추출하시오 !

emp13['EMAIL'].apply(lambda x: x[x.find('@')+1 : x.find('.')] )

문제273.  우리반 테이블 이메일의 도메인명, 건수를 출력하시오 !

emp13['EMAIL'].apply(lambda x: x[x.find('@')+1 : x.find('.')] ).value_counts()

navar    24
ggml      4
kaum      2

■ 예제92.  문자열을 특정 문자열로 분리하기(split)

  코드를 작성할 때 가장 많이 접하게 되는 경우가 구분자(separator) 로
  구분되어있는 문자열 파싱(parsing) 을 하는 일입니다.
  이때 문자열 객체의 split() 를 활용하면 구분자를 기준으로 문자열을 쉽게
  분리하여 파싱할 수 있습니다. 

예제. 스티븐 잡스 연설문을 어절별로 분리해서 리스트에 담는 코드

jobs = open("d:\\data\\jobs.txt", encoding="utf8")
jobs2 = jobs.read().lower().split(' ')

문제274.  영화 겨울왕국에는 elsa 가 많이 나오는가 anna 가 많이 나오는가?

winter = open("d:\\data\\winter.txt")
winter3 = winter.read().lower().split(' ')
cnt = 0
for  i in winter3:
    if i.lower().strip() =='elsa':
        print(i)
        cnt += 1
print(cnt)

설명: elsa 는 52 번 anna 는 101 번 나옴

■ 예제93.  문자열을 특정 문자열고 결합하기(join)

 문자열 객체의 join() 메소드는 split 와는 반대로 문자열이
 요소인 리스트를 인자로 받아 리스트의 모든 요소를 특정 문자열로
 연결하여 새로운 문자열로 만들어 리턴합니다. 

예: 
a = [ 'd', 'e', 'f', 'g', 'h', 'i' ]
bond = '/'
b = bond.join(a)
print(b)  # d/e/f/g/h/i

문제275.  우리반 테이블에서 나이를 출력하는데 나이가 아래와 같이 출력되게
              하시오 !

24, 27, 31, 22, 29, ........................................

result = []
for  i  in  emp13.AGE:
    result.append(i)

for i in result:
    print( i, end=',')

39,26,26,26,26,27,25,29,28,25,26,31,27,38,26,33,36,27,26,23,28,31,34,27,40,24,25,27,25,26,



* map 함수를 이용해서 리스트의 요소들에 함수를 적용합니다.

a = [1,2,3,4,5,6]

b = list( map(str,a)  )

['1', '2', '3', '4', '5', '6']

'/'.join(b)

* 우리반 테이블의 나이를 가로로 출력하는 방법 

import pandas as pd
emp13 = pd.read_csv("d:\\data\\emp13.csv", encoding='euckr')

', '.join( map(str, emp13['AGE'].values) )

■ 예제94. 문자열에서 특정 문자(열) 을 다른 문자(열) 로 바꾸기(replace)

 문자열 객체의 replace() 메소드는 문자열에서 특정 문자나 문자열을
 다른 문자열로 변경합니다. 

예제:
txt = 'My password  is  1234'
txt.replace('1', '0')

문제276.  이름과 월급을 출력하는데 월급을 출력할때에 숫자 0 대신에  *
             로 출력하시오 !

SQL> select  ename,  replace(sal, 0, '*')
            from  emp;

Pandas> 
import  pandas  as  pd
emp = pd.read_csv("d:\\data\\emp3.csv")
pd.concat([ emp.ename,  emp.sal.apply( lambda  x :str(x).replace('0','*') )], axis=1 ) 

문제277.  이름과 월급을 출력하는데 월급을 출력할때 숫자 0~3까지를 * 로 출력하시오

SQL>  select  ename, regexp_replace( sal, '[0-3]', '*')
            from  emp;

연습1:
import  re   # 데이터 전처리할 때 많이 사용하는 모듈 정규식함수 모듈

re.sub( '0', '*', '3000')
re.sub( '[012]', '*', '3120')

Pandas> 
import  re
pd.concat([emp['ename'], emp['sal'].apply( lambda x: re.sub('[0123]','*', str(x))) ], axis=1)

■ 예제95.  문자열을 바이트 객체로 바꾸기 (encode)

file = open("d:\\data\X_train.csv" , encoding="euckr")

x_train = pd.read_csv("d:\\data\\X_train.csv", encoding="euckr")

인코딩 ? 

  인코딩이란 사람이 인지할 수 있는 형태의 데이터를 약속된 규칙에 의해
  컴퓨터가 사용하는 0 과 1로 변환하는 과정을 말합니다.
  컴퓨터의 발명, 발전이 미국의 학계와 기업을 중심으로 이루어지다 보니
  문자집합(컴퓨터에서 문자를 담는 저장소)도 미국을 기준으로 제정되었습니다.
  미국에서 제정된 ASCII(미국 정보 교환 표준부호)는 1960년데에 제정된
  문자 집합으로 이후에 개발된 문자집합의 토대를 이루고 있습니다. 
  ASCII 는 7비트만을 이용해서 음이 아닌수 (0~127) 의 문자집합내의
  문자 할당 약속입니다. 

예제:  A 는 숫자 65 입니다. a 는 숫자 97입니다.

 구글에서 아스키 코드표를 검색해보세요 ~~

 45분까지 쉬세요 ~~~

예제. chr 함수를 이용해서 숫자 65부터 127까지 어떤 문자인지 출력하시오

for   i  in  range(65, 128):
    print  (  i , '--------->', chr(i) )

설명: chr 함수는 컴퓨터가 이해하는 숫자가 사람에게는 어떤 문자인지
       출력하는 함수 

최초로 만든 문자 집합이 아스키인데 이 아스키 코드표로 미국 엔지니어들은
행복하게 살아가고 있었지만 다른 나라 사람들은 그러지 못했습니다.

1. 서유럽국가 

 독일어의 움라우트, 스페인어의 물결표, 터키어의 시딜러, 프랑스어의 악센트
 는 7비트로는 표현 못합니다.

2. 아시아 
   아시아에서는 한자, 일본어, 한글이 7비트에 들어맞지 않앗습니다. 
   더 큰 문자셋이 필요했는데 16비트로된 문자 집합을 제공해서 해결했습니다.
   그 문자 집합셋이 바로 cp949, euckr 입니다. 

x_train = pd.read_csv("d:\\data\\X_train.csv", encoding="euckr")

 포스코더 샾 아파트 

 포스코더 ?? 아파트 

 그래서 나온 문자집합셋이 바로 uft8, utf16 입니다. 

문제278.  롯데 백화점 데이터의 훈련 데이터(X_train.csv) 와 테스트 데이터
             (X_test.csv) 를 X_train 변수와 X_test 변수에 각각 판다스로 로드하시오

X_train = pd.read_csv("d:\\data\\X_train.csv", encoding="euckr")
X_test = pd.read_csv("d:\\data\\X_test.csv", encoding="euckr")
X_train
X_test

문제279. X_train 과 X_test 의 컬럼이 서로 동일한지 확인하시오 !

X_train.columns
X_test['aaa']= 200
X_test

# X_train.columns - X_test.columns 
X_train.columns[ ~ X_train.columns.isin(X_test.columns) ]
X_train.columns[

# X_test.columns - X_train.columns
X_test.columns[ ~ X_test.columns.isin(X_train.columns) ] 

■ 예제96. 바이트 객체를 문자열로 바꾸기 (decode) 

 인코딩(encoding) ?

  사람이 알아볼 수 있는 언어 ------> 컴퓨터가 알아볼 수 있는 언어(숫자)
 
 디코딩(decoding) ?  

  컴퓨터가 알아볼 수 있는 언어  -----> 사람이 알아볼 수 있는 언어 

예제:
txt = 'A'
b_txt = txt.encode()
print (b_txt)
c_txt = b_txt.decode()
print(c_txt) 

■ 예제97. 순차적인 정수 리스트 만들기(range)

  순차적인 정수 리스트를 만들때 range 함수를 이용하면 됩니다.

예제:
print( range(1, 11) )   
print ( list( range(1,11) ) )

print ( list( range(1, 11, 2 )  )  ) 
                      
설명:  range(시작숫자, 끝숫자 미만, 스탭 ) 

문제280.  range 함수를 이용해서 주사위를 2개를 만들고 주사위 2개를 동시에
             던져서 눈의 합이 10이 나오는 확률을 구하시오 ! 
             ( 주사위 2개를 동시에 10000번 던지세요 !)

import  random

dice1 = list( range(1,7) )
dice2 = list( range(1,7) )
cnt = 0
for  i  in  range(1, 10001):
    result1 = random.choice(dice1)
    result2 = random.choice(dice2) 

문제281.  (오늘의 마지막 문제)  숫자를 물어보게 하고 해당 숫자들의 리스트에서
             중앙값을 출력하시오! 
                                                    5시 신호보냈습니다. ~~~~
힌트:                                              6시 신보보냈습니다. ~~~~
a = [ 1, 2, 3, 4, 5, 7, 8, 9 ]
a[0]  # a리스트에서 0번째 요소 가져오는 코드
a[1]  # a리스트에서 1번째 요소 가져오는 코드 

숫자를 입력하세요 ~  [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]  <--- 리스트 형태로 입력
                            
중앙값은 5 입니다. 

숫자를 입력하세요 ~ [ 1, 2, 3, 4, 5, 6, 7, 8 ]

중앙값은 4.5 입니다. 

■ 예제98. 리스트에서 특정 위치의 요소 얻기

목차 :

1. 파이썬의 자료형 5가지 
2. 파이썬의 연산자
3. if 문과 loop 문
4. 문자열을 다루는 함수들1
5. 파이썬 모듈, 클래스 사용법 
6. 판다스 사용법 
7. 예외처리
8. 숫자형 자료를 다루는 함수들
9. 문자열을 다루는 함수들2
10. 리스트를 다루는 함수들1

■ 예제98. 리스트에서 특정 위치의 요소 얻기

  리스트의 특정위치에 있는 요소값을 구하려면 인덱싱을 이용합니다.
  인덱스는 0 부터 시작합니다. 

a = [ 1, 2, 'a', 'b', 'c', [ 4, 5, 6 ] ]
print(a)

예제1. 위의 리스트 a 에서 숫자 2를 출력하시오 !

print ( a[1] )

예제2. 위의 리스트 a 에서 숫자 4를 출력하시오 !

a = [ 1, 2, 'a', 'b', 'c', [ 4, 5, 6 ] ]

print (a[5][0])

문제282. 아래의 리스트에서 숫자 7을 출력하시오 !

b = [ 2, 3, 4, [ 5, 6 ], [ 7, 8] , 9 ]

print( b[40[0] )

■ 예제99. 리스트에서 특정요소의 위치 구하기 (index)

  리스트 객체의 index() 메소드는 리스트에서 요소의 값을 알고 있을때
  그 요소가 최초로 나타나는 위치의 인덱스를 리턴합니다.

예제:
a = [ 1, 2, 'a', 'b', 'c', [ 4, 5, 6] ] 

# 숫자 2의 위치 인덱스를 출력하시오 !
print ( a.index(2) )  # 1
# 알파벳 a의 위치 인덱스를 출력하시오 !
print ( a.index('a') ) # 2

문제283. 아래의 a 리스트에서 숫자 4의 인덱스 위치 번호를 출력하시오 !

a = [ 1, 2, 'a', 'b', 'c', [ 4, 5, 6] ] 

print ( a.index(4) )

답:  리스트 안에 있는 리스트의 인덱스 번호는 출력 못함

문제284.  아래의 리스트에서  7 이상인 숫자들만 출력하시오 !

a = [ 10, 7, 2, 1, 5, 6, 9, 11, 19, 20 ]

for  i  in  a:
    if  i >= 7:
        print ( i, end=',' )

문제285. 위의 문제를 numpy 이용해서 수행하시오 !

a = [ 10, 7, 2, 1, 5, 6, 9, 11, 19, 20 ]

import  numpy  as  np

a_n = np.array(a)
print (a_n>=7)  # [ True  True False False False False  True  True  True  True]

print( a_n[ a_n >= 7] ) 

문제286. 아래의 행렬을 numpy  array 로 생성하시오 !

   2   6
   3   9 

import  numpy  as  np 
a = [ [ 2, 6 ], [3, 9 ] ]
a_n = np.array(a)
print(a_n.shape)

문제287.  위의 행렬에서 숫자 6을 출력하시오 !

print(a_n[0][1])

문제288.  아래의 행렬에서  음수가 아닌 값들만 아래와 같이 출력되게하시오 !
             ( 신경망에서 relu 함수를 만드는 기본 코드 )

    2   -6               ---------------->    2     0
   -3    9                                        0     9

a = [ [ 2, -6], [ -3, 9 ] ] 
a_n = np.array(a)
a_n < 0 
a_n [ a_n < 0 ] = 0    # True 인 곳에 0이 할당된다. 
a_n

45분까지 쉬세요 ~~

■ 예제100. 리스트에서 특정 위치의 요소를 변경하기

list_a = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]
print ( list_a[0] )  #  a

list_a[0] = 'z'   #  list_a 의 0번째 요소를 z 로 변경해라 ~
print (list_a)

문제289. list_a 의 알파벳 b 를 k 로 변경하시오 !

list_a = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]

list_a[  list_a.index('b') ] ='k'
print(list_a)

문제290.  아래의 행렬에서  숫자 7 이상인것들은 그대로 출력하고 나머지는
             0 으로 출력되게하시오 !

    3    5    9                                  0    0    9
    2    8    1            ------------->     0    8    0
    7    3    2                                  7    0    0 

a = [ 3, 5, 9, 2, 8, 1, 7, 3, 2 ]
a_n = np.array(a)
b = a_n.reshape(3,3)
print(b)
mask = b < 7
b[mask] = 0  # True 인곳에 0 을 할당해라 ~
print(b)

문제291.  아래의 두 행렬을 각각 a 와 b 로 만드시오 ! ( 합성곱 연산을 위한 문제)

    2   3   4                  3    3    2
    4   3   2                  2    8    1
    3   3   2                  1    2    1  

a = [ 2, 3, 4, 4, 3, 2, 3, 3, 2 ]
b = [ 3, 3, 2, 2, 8, 1, 1, 2, 1 ]
a_n = np.array(a).reshape(3,3)
b_n = np.array(b).reshape(3,3)

문제292.  아래의 두행렬의 곱을 출력하시오 ! (합성곱 연산을 위한 문제)

    2   3   4                   3    3    2         6    9   8
    4   3   2         *         2    8    1   =    8   24   2
    3   3   2                   1    2    1         3    6   2 

a = [ 2, 3, 4, 4, 3, 2, 3, 3, 2 ]
b = [ 3, 3, 2, 2, 8, 1, 1, 2, 1 ]
a_n = np.array(a).reshape(3,3)
b_n = np.array(b).reshape(3,3)
print ( a_n * b_n )

문제293.  위의 결과값을 모든 요소들의 합을 출력하시오 !( 합성곱을 위한 문제)

    2   3   4                   3    3    2         6    9   8
    4   3   2         *         2    8    1   =    8   24   2
    3   3   2                   1    2    1         3    6   2 

 6 + 9 + 8 + 8 + 24+ 2 + 3 + 6 + 2 = ? 

a = [ 2, 3, 4, 4, 3, 2, 3, 3, 2 ]
b = [ 3, 3, 2, 2, 8, 1, 1, 2, 1 ]
a_n = np.array(a).reshape(3,3)
b_n = np.array(b).reshape(3,3)
result = np.sum( a_n * b_n )
print(result)

■ 예제101.  리스트에서 특정 구간에 있는 요소 추출하기 

  리스트에서 특정 구간에 있는 요소를 추출하여 새로운 리스트를 만들려면
  슬라이싱을 이용하면 됩니다.

예제:
list_a = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ]
print ( list_a[0:4] )  # 0번째 요소부터 4 미만까지 출력
print ( list_a[ 2: ] )  # 2번째 요소부터 끝까지 읽어라
print ( list_a[ :3 ] )  # 리스트의 처음부터 읽어서 인덱스 번호 3미만까지 읽어라

문제294. 알파벳 소문자를 전부 출력하시오 !

import   string

print ( string.ascii_lowercase )

문제295. 위의 알파벳 소문자를 전부 리스트에 담으시오 !

[ 'a', 'b', 'c', 'd', 'e',.................., 'z' ]

import   string
b = []
for  i  in  string.ascii_lowercase:
    b.append(i)

print (b)

문제296. 위에서 만든 b 에서 요소를 다음과 같이 출력하는데 알파벳 a 부터
             k 까지만 출력하시오 !

import   string
b = []
for  i  in  string.ascii_lowercase:
    b.append(i)

print ( b[ 0 : b.index('k')+1] )

문제297.  아래의 행렬을 만들고 아래의 행렬에서  아래의 영역만 출력하시오
                                                        (3차원 합성곱을 위한 문제 )
     3   2   1   2   1
     2   1   2   4   1
     7   2   1   8   2
     9   2   1   2   4
     2   4   3   2   1    
                                           45분까지 쉬세요 ~~
   3   2   1
   2   1   2
   7   2   1

a = np.array([3,2,1,2,1,2,1,2,4,1,7,2,1,8,2,9,2,1,2,4,2,4,3,2,1]).reshape(5,5)
print( a[0:3, 0:3] )

문제298.  아래의 5x5 행렬과  아래의 3x3 행렬을 합성곱하시오 !
               ( 합성곱 연산은 이미지나 영상의 특징을 잡아내는 작업)
     3   2   1   2   1               2   1   5           =  
     2   1   2   4   1       *       1   2   2
     7   2   1   8   2               2   3   1 
     9   2   1   2   4
     2   4   3   2   1  

a = np.array([3,2,1,2,1,2,1,2,4,1,7,2,1,8,2,9,2,1,2,4,2,4,3,2,1]).reshape(5,5)
b = np.array([2, 1, 5, 1, 2, 2, 2, 3, 1]).reshape(3,3)
print(np.sum( a[0:3, 0:3] * b ))

문제299.  아래의 5x5 행렬의 아래의 영역과 3x3 행렬을 합성곱하시오 !

     3   2   1   2   1               2   1   5           =   57  38    19
     2   1   2   4   1       *       1   2   2                38  19   38
     7   2   1   8   2               2   3   1                133  38  19
     9   2   1   2   4
     2   4   3   2   1  

a = np.array([3,2,1,2,1,2,1,2,4,1,7,2,1,8,2,9,2,1,2,4,2,4,3,2,1]).reshape(5,5)
b = np.array([2, 1, 5, 1, 2, 2, 2, 3, 1]).reshape(3,3)
print(np.sum( a[0:3, 1:4] * b ))
                   
답글로 올려주세요 ~~~

점심시간 문제 검사 받겠습니다.   사원 테이블의 월급의 분산을 구하세요 ~

 B 반은 라인검사
 A 반은 카페에 게시판에 올려주세요 ~

■ 예제102.  리스트에서 짝수번째 요소만 추출하기 

 리스트에서 짝수번째 요소를 추출하는 방법은 두번째 요소부터
 끝까지 스텝 2로 슬라이싱 하면 됩니다.

list_a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h' ]
print ( list_a[1 :  : 2] )

문제300.  1부터 100까지의 숫자중에서 짝수만 아래와 같이 list_a 에 담아서
             출력하시오!

 [ 2, 4, 6, 8, ..........., 100 ]

list_a = list( range(2, 101, 2)  )
print(list_a)

■ 예제103. 리스트 요소 순서를 역순으로 만들기 (reverse)

  리스트 객체의 reverse() 메소드는 리스트의 모든 요소 순서를 거꾸로 
  만듭니다. 

예제:
list_a = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
list_a.reverse()
print(list_a)

문제301. 아래의 list_b 리스트를 만들고 아래와 같이 출력되게하시오 !

list_b = ['e', 'f', 'g', 'c', 'a', 'b', 'd']

결과:  ['g', 'f', 'e', 'd', 'c', 'b', 'a']

list_b = ['e', 'f', 'g', 'c', 'a', 'b', 'd']
list_b.sort()
print(list_b)
list_b.reverse()
list_b

문제302.  emp3.csv 의 월급을 아래와 같이 높은값부터 리스트에 담기게 하시오!

[ 5000, 3000, 3000, ....................  , 800 ]

import  pandas  as  pd

emp= pd.read_csv("d:\\data\\emp3.csv")
list_b = list(emp.sal)
list_b.sort()
list_b.reverse()
list_b

■ 예제104. 리스트 요소 순서를 역순으로 만들기 (revesed)

 리스트 요소 순서를 역순으로 만드는 또 다른 방법은 파이썬 내장함수인
 reversed() 이용하는 방법입니다.
 reverse() 는 인자로 입력된 시퀀스 자료형의 요소 순서를 역순으로
 새로운 시퀀스 자료형을 만들어 리턴합니다.

 reverse() 함수 : 원본 데이터를 역순으로 만듭니다. 
 reversed() 함수 : 역순으로 만들지만 원본 데이터를 역순으로 만들지 않습니다.

예제:
list_a = ['a', 'b', 'c', 'd', 'e']
list_a.reverse()    # list_a 의 요소를 역순으로 변경한다. 
print (list_a)

list_b = ['a', 'b', 'c', 'd', 'e']
result = reversed( list_b )    #list_b 의 요소를 역순으로 만들어서 result 에 저장
print ( list(result) )  
print ( list_b) 

■ 예제105. 리스트 합치기 (+)

 두개의 리스트를 연결하여 새로운 리스트를 만드는 방법은 + 연산자를
 이용해 두개의 리스트를 더하면 됩니다.

예제:
listdata1 = ['a', 'b', 'c', 'd']
listdata2 = ['f', 'g', 'h', 'i' ]
listdata3 = listdata1 + listdata2
print(listdata3)

문제303. 아래와 같이 엄마와 아기가 함께하는 수영교실 나이 리스트를
            생성하시오 !  일일이 숫자를 쓰지말고 파이썬 코드로 간단하게
           만들어 보세요!

[ 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

a = [34]
b = [2]
k = b*10 + b*10
k

문제304.  엄마와 아기가 함께하는 수영교실의 나이의 평균값이 어떻게 되는가?

import  numpy  as  np 
a = [34]
b = [2]
k = a*10 + b*10
k_n  = np.array(k)
print ( np.mean(k_n) )

문제305.  엄마와 아기가 함께하는 수영교실의 나이의 중앙값이 어떻게 되는가 ?

[ 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

import  numpy  as  np 
a = [34]
b = [2]
k = a*10 + b*10
k_n  = np.array(k)
print (np.median(k_n) )

문제306. 엄마와 아기가 함께하는 수영교실의 나이에 최빈값을 출력하시오 !

k=[ 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]

k = pd.Series(k)
k.mode()

■ 예제106.  리스트 반복하기 (*)

  list * n 은 리스트를 n 번 반복해서 새로운 리스트를 만듭니다.
  예를 들어, list*2 는 list + list 와 동일한 결과가 출력됩니다. 

예:
listdata= list( range(0,3) )
result = listdata*3
print(result)

문제307.  우리반 나이 데이터의 평균값, 중앙값, 최빈값을 출력하시오 !

import pandas as pd
emp=pd.read_csv("d:\\data\\emp13.csv", encoding="euckr")
age= np.array(emp['AGE'])
print(np.mean(age))
print(np.median(age))
print(emp.AGE.mode() )

문제308. emp 데이터 프레임의 컬럼명을 소문자로 변경하시오 !

emp.columns=list(map(lambda x:x.lower(), list(emp.columns) ))

※ 설명: map(함수명, 리스트)

emp.age.mode()

■ 예제107. 리스트에 요소 추가하기 (append)

 리스트 객체의 append() 메소드는 인자로 입력된 값을 리스트의 맨 마지막 
 요소로 추가합니다. 

예제:
listdata = []
listdata.append('a')
listdata.append('b')
print (listdata)

* 우리반 나이 데이터로 히스토그램 그래프 그리기위한 준비작업 

1. 히스토 그램 그래프의 기본 데이터 2개를 생성 

import  numpy  as  np
count ,   bins  = np.histogram( emp.age, bins=10 )
print( count, bins )

   2      12    7   1     2     1     1    1     1    2      <--- 빈도
23.  24.7 26.4 28.1 29.8 31.5 33.2 34.9 36.6 38.3 40.  <-- 계급

2. 위의 데이터로 히스토그램 그래프를 그린다.

import  matplotlib.pyplot  as  plt
plt.grid()
plt.hist( emp.age , bins, rwidth=0.9, color='red' )

3. 판다스로 한번에 그리면 다음과 같습니다.

emp.age.hist(bins=10)

문제309. 롯데 백화점 데이터를 로드하고 총구매액을 가지고 히스토그램 그래프를
            그리시오 !

import  pandas  as  pd

x_train = pd.read_csv("d:\\data\\X_train.csv", encoding="euc-kr")
x_train.총구매액.hist(bins=50)

문제310.  사원 테이블의 월급을 히스토그램 그래프로 그리시오 !

emp =pd.read_csv("d:\\data\\emp3.csv")
emp.sal.hist(bins=10)

또는                                                    45분까지 쉬세요 ~~~
import  numpy  as  np
count ,   bins  = np.histogram( emp.sal, bins=10 )
x =list( range( int(min(bins)), int(max(bins)),500) )
print( count, bins )

import  matplotlib.pyplot  as  plt
plt.grid()
plt.hist( emp.sal , x, rwidth=0.9, color='red' )

문제310. 평균이 150이고 표준편차가 5인 초등학생 10만명의 키를  생성하세요

import   numpy  as  np

hight  = np.random.randn(100000) * 5 + 150
print(hight)

문제311.  평균 45이고 표준편차가 5인 초등학생 몸무게 10만명의 체중 데이터를
             생성하시오 !

weight = np.random.randn(100000) * 5 + 45
print (weight)

문제312. 위의 데이터로 히스토그램 그래프를 그리기 위해 히스토그램 
            그래프의 기본 데이터 2개인 건수와 계급을 생성하시오 

bins = list(range(30, 61, 2) )
print (bins)

[30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60]

cnt,  bins = np.histogram( weight, bins)
print( cnt )
print( bins) 

[  381   915  2244  4542  7706 11492 14529 15775 14673 11639  7872  4609
  2110   910   328]

[30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60]

문제313. 위의 체중과 bins 를 이용해서 히스토그램 그래프를 그리시오 

import  matplotlib.pyplot  as  plt
plt.grid()
plt.xticks(bins)
plt.hist( weight, bins, rwidth=0.8)

■ 예제108.  리스트의 특정위치에 요소 삽입하기 

  리스트 객체의 insert() 메소드는 리스트의 특정 위치의 새로운 요소를
  입력합니다. 

예제:
list_a = [ 'a', 'b', 'c', 'd', 'e' ]
list_a.append('f')
print(list_a) # [ 'a', 'b', 'c', 'd', 'e', 'f' ]

list_a.insert(3,'k') #  k 를 list_a 의 3번째 인덱스의 요소로 구성해라 !
print(list_a)  

문제314.  아래의 a 리스트의 요소 화성 다음에 소행성을 요소로 입력하시오 !

a = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']

a.insert( a.index('화성')+1, '소행성')
print(a)

* 리스트 메소드들?  index, reverse, reversed, append, insert, del, remove
* 리스트를 합치기 ? +
* 리스트 반복하기 ?  ['a']*2

■ 예제109. 리스트의 특정 위치의 요소 제거하기 (del)

 리스트의 메소드인 del 과 remove 는 둘다 리스트 안의 요소를 제거하는
 것인데 del 은 리스트의 인덱스 번호로 삭제하는것이고 remove 는
 리스트의 요소명으로 삭제하는것입니다.

예제:
a = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
del(a[4])  # a 리스트에서 인덱스 번호 4번의 해당하는 요소를 삭제한다.
print(a)

문제315. 아래의 a 리스트에서 목성을 지우세요 (del로 지우세요)

a = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']

del(a[a.index('목성')])

■ 예제110. 리스트에서 특정 요소 제거하기 (remove)

 리스트에서 특정 요소의 값을 알고 있을때 그 요소를 제거하는 방법은
 리스트 객체의 remove() 메소드를 이용하면 됩니다. 

예제. 아래의 a 리스트에서 목성을 지우시오 !

a = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
a.remove('목성')
print(a)

문제316. 아래의 주머니에 빨간공 2개와 파란공 3개가 들어있다.
            주머니에서 공을 하나 랜덤으로 빼면 그 공이 주머니에서 지워지게
            하시오 !

box = ['red', 'blue', 'red', 'blue', 'blue']

import  random
a = random.choice(box)
box.remove(a)
print(box)

문제317. 파란공 70개와 빨간공 30개가 있는 주머니를 만들고 이 주머니에서
            공을 3개를 뽑으시오 ~~ 

box=[‘blue’]*70+[‘red’]*30  
result=np.random.choice(box,3)
print(result)

설명:  np.random.choice(box,3, replace=True )  # replace=True 면 복원추출
                                                             # replace=False 면 비복원추출 

문제318. (오늘의 마지막 문제)  6개의 제품이 들어있는 상자가 있는데
           그중에 2개가 불량품이라고 했을때 제품 검사를 위해 3개를 추출했을때
           그중 1개가 불량품일 확률을 출력하시오 !( 복원추출로 하세요)

box =['정상','불량품', '정상', '정상','불량품', '정상']

힌트: 
box.count('불량품')  # 2

 5시 신호보냈습니다.  
 6시 신호보냈습니다.
SQL 600문제

■ 파이썬 복습

1.  파이썬 자료형 5가지
 
    - 문자형  : 문자형을 다루는 코드와 메소드
    - 숫자형  : 숫자형을 다루는 코드와 메소드
    - 리스트형 : 리스트를 다루는 코드와 메소드
                    1.  리스트.index('요소명')
                    2.  리스트.reverse()
                    3.  리스트.reversed()
                    4.  리스트.append('요소명')
                    5.  리스트.count('요소명')
                    6.  리스트.insert(3, '요소명')
                    7.  리스트[2:4] 슬라이싱
                    8.  리스트.del(3)
                    9.  리스트.remove('요소명')

■ 예제111.  리스트에서 특정 구간에 있는 모든 요소 제거하기 

   리스트 객체에서 특정 구간에 있는 요소들을 제거하려면 
   del 과 슬라이싱을 이용하면 됩니다. 

예제
a = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
del( a[2:6] )  # 인덱스 번호 2번부터 6번 미만까지 요소를 지움 
del( a[:]  )  # 모든 요소를 다 지운다.
print (a)

문제319. 아래의 a 리스트에서 짝수번째 요소만 지우시오 !

a = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']

del( a[1: : 2] )
print(a)

■ 예제112.  리스트에 있는 요소 갯수 구하기 (len)

  파이썬 내장함수인 len() 은 시퀀스 자료형의 크기를 구하는 함수입니다.
  len() 을 리스트에 적용하면 리스트의 모든 요소의 갯수를 리턴합니다.

예:
a = ['태양', '수성', '금성', '지구', '화성', '목성', '토성', '천왕성', '해왕성']
print( len(a) )

문제320.  emp3.csv 를 판다스로 로드해서 직업, 직업별 인원수를 출력하시오 !

import pandas  as  pd

emp = pd.read_csv("d:\\data\\emp2.csv")

result = emp.groupby('job')['sal'].count().reset_index()
print(result)

문제321. 코로나 환자id 를 출력하고 그 옆에 환자id 별 건수를 출력하시오

데이터:  PatientRoute.csv, PatientInfo.csv

pr = pd.read_csv("d:\\data\\PatientRoute.csv")
result = pr.patient_id.value_counts()
result

문제322. 위의 결과를 다시 출력하는데 동선 건수가 높은 환자부터 출력하시오

pr = pd.read_csv("d:\\data\\PatientRoute.csv")
result = pr.patient_id.value_counts().sort_values(ascending = False)
print(result)

문제323.  코로나 데이터중 Time.csv 를 판다스 데이터프레임으로 만드시오 !

time = pd.read_csv("d:\\data\\Time.csv")
time

문제324.  코로나 확진에 날씨가 영향을 미치는지 알아보기 위해서  날씨 데이터
             인 weather.csv 를 판다스 데이터 프레임으로 만드시오 !

weather = pd.read_csv("d:\\data\\weather.csv")
weather

문제325.  weather 데이터 프레임과 time 데이터 프레임을 서로 조인시켜서
             데이터 프레임명을  result 로 만드시오 !

result = pd.merge( weather, time, on="date")
result

■ 예제113.  리스트에서 특정 요소 갯수 구하기 (count)

  리스트.count('요소') 는 객체 리스트에서  '요소' 의 갯수를 구하는 메소드
  입니다. 

box = ['yellow', 'yellow', 'red', 'red', 'red']
print ( box.count('red') ) # 3 

문제326.  우리반 데이터에서 나이가 27살이 몇명이 있는지 count 하시오 !

emp13 = pd.read_csv("d:\\data\\emp13.csv", encoding="euckr")

list(emp13.AGE).count(27)

문제327.  우리반에서 sk 통신사인 학생들이 몇명인지 count 하시오 !

emp13 = pd.read_csv("d:\\data\\emp13.csv", encoding="euckr")
cnt = 0
for i  in  emp13.TELECOM:
    if  i.lower()  in  ('sk', 'skt'):
        cnt += 1
print(cnt)

- 민석이 코드
import pandas as pd
emp13= pd.read_csv("d:\\data\\emp13.csv",encoding="euckr")
r1= emp13[['TELECOM']][emp13['TELECOM'].str.lower().str.contains('s')]
print(r1.count())

- 동민이 코드
emp13.TELECOM.apply(lambda x:x[0].lower()=='s').sum()



■ 예제114.  리스트 제거하기 (del)

  리스트 자체를 메모리에서 제거하려면 다음과 같이 del 명령어를 수행합니다.

예제:
a = [ 1, 2, 3, 3, 3, 4 ]
del  a
print(a)

문제328.  지금 현재 내가 접속한 주피터 노트북창에서 선언되어있는
             변수들을 확인하고 싶다면 ?

print ( dir()  )

문제329. time 과 weather 조인한 result 데이터 프레임에서 데이터를 검색하는데
   날짜(date) 와 평균기온(avg_temp) 과 확진자 누적수(confirmed) 를 출력하시오 !

result[ ['date','avg_temp','confirmed']]

문제330.  result 데이터 프레임에서  date 를 출력하고 date 별 최대 확진자수를
             출력하시오 !

result.groupby('date')['confirmed'].max().reset_index()

문제331.  위의 데이터로 라인 그래프를 그리시오 !

result.groupby('date')['confirmed'].max().reset_index().plot()

■ 예제115.  리스트 요소 정렬하기 (sort)

 리스트.sort() 는 리스트 객체의 모든 요소를 정렬합니다.

예:
a = [ 2, 4, 1, 3, 5 ]
a.sort()
print (a) 

만약에 역순으로 정렬하고 싶다면?               45분까지 쉬세요 ~~~
a.sort(reverse=True)
print(a)

■ 예제116. 리스트 요소 정렬하기 (sorted)

  파이썬 내장함수 sorted() 를 이용하면 리스트의 요소를 정렬할 수 있는데
  sort() 와의 차이점은 sort() 는 원본 리스트를 정렬한 형태로 변경하지만
  sorted() 는 원본 리스트는 그대로 두고 정렬한 결과 리스트만 리턴합니다.

예제:
a = [ 2, 1, 3, 5, 4 ]
a.sort()
print(a) 

a =  [ 2, 1, 3, 5, 4 ]
b = sorted(a)
print (a)  #  [ 2, 1, 3, 5, 4 ]   원본을 그대로 둡니다. 
print (b)  #  [ 1, 2, 3, 4, 5 ]

문제332.  emp 테이블의 월급을 리스트에 담아서 출력하는데 월급이 
            높은 사원부터 들어가게 하시오 !

[ 5000, 3000, 3000, .............................., 800 ] 

a =list(emp.sal)
a.sort(reverse=True)
a

■ 예제117. 리스트 요소 무작위 섞기(shuffle)

 음악 아티스트의 노래를 섞는 문제 (모사의 입사문제 1문제)
 를 위한 문법

 파이썬 기본 모듈인 random 은 난수를 발생하는 모듈입니다.
 이 모듈이 제공하는 shuffle 은 리스트의 요소를 무작위로 섞는데 활용됩니다.

예제:
from random  import  shuffle
a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
shuffle(a)
print(a)

문제333. 아래의 artist 라는 리스트에 가수이름을 추가하고 music 리스트에
            음악 리스트를 추가하시오 !

artist =['비틀즈', '비틀즈', '아이유', '아이유', '마이클 잭슨', '마이클 잭슨']
music =['yesterday', 'imagine', '너랑나', '마슈멜로우','beat it', 'smooth criminal']

문제334. 아래에 artist 를 키로 하고 music 을 값으로 해서 아래와 같은 딕셔너리
            를 생성하시오!

artist =['비틀즈', '아이유', '마이클 잭슨']
music =['yesterday', '너랑나','beat it' ]

결과:   { '비틀즈' : 'yesterday', '아이유' : '너랑나', '마이클잭슨' : 'beat it' }

답:
gini = {}
gini['비틀즈'] ='yesterday'
gini['아이유'] = '너랑나'
gini['마이클잭슨'] ='beat it' 
print(gini)

점심시간 문제:  순열 문제 검사받겠습니다.  ~

  A 반은 라인 검사
  B 반은 카페에 게시판에 올려주세요 ~~  


문제335. 문제334번처럼 일일이 손으로 노가다 하지 말고 아래의 2개의 리스트를
            이용해서 for 문과 zip 함수를 가지고 한번에 gini 딕셔너리를 구성하시오

artist =['비틀즈', '아이유', '마이클 잭슨']
music =['yesterday', '너랑나','beat it' ]
gini ={}

for  i ,  k  in  zip( artist,  music ):
    gini[ i ] = k

print(gini)

문제336.  zip 과 for loop 문을 이용해서 우리반 이름과 나이 데이터로 
             아래의 딕셔너리를 구성하시오 !

emp13_dic = { jones : 31,  scott : 28, .........................................  } 

emp13_dic = { }
for  i , k  in  zip( list(emp13.ENAME), list(emp13.AGE) ):
    emp13_dic[i] = k

print (emp13_dic )

■ 예제118.  리스트의 모든 요소를 인덱스와 쌍으로 추출하기(enumerate)

  파이썬 내장함수 enumerate() 는 시퀀스 자료형을 인자로 받아
  각 요소를 인덱스와 함께 쌍으로 추출할 수 있는 반복가능한 자료인
  enumerate 객체를 리턴합니다. enumerate 객체는 주로 for 문과
  함께 자주 사용되고 list() 를 이용해서 리스트 객체를 변환할 수 있습니다.

예:
emp14 = ['전인훈', '라태진', '추해정', '양남휘' ]
for  i,  k  in  enumerate(emp14):
    print ( i, k )

문제337. 아래의 music 리스트에서 요소를 하나씩 빼내는데 앞에 인덱스 번호도
            같이 출력되게하시오 !

artist =['비틀즈', '비틀즈', '아이유', '아이유', '마이클 잭슨', '마이클 잭슨']
music =['yesterday', 'imagine', '너랑나', '마슈멜로우','beat it', 'smooth criminal']

for  i,  k  in  enumerate(music):
    print (i, k)

문제338.  artist 리스트를 가지고 아래와 같이 결과를 출력하시오 !

artist =['비틀즈', '비틀즈', '아이유', '아이유', '마이클 잭슨', '마이클 잭슨']

비틀즈  0
비틀즈  1
아이유  2
아이유  3
마이클 잭슨 4
마이클 잭슨 5 

for  i, k  in  enumerate(artist):
    print (k ,  i ) 

최종 결과의 모습:

{'비틀즈' : ['yesterday', 'imagine'], '아이유' : ['너랑나','마슈멜로우'],
 '마이클 잭슨' : ['beat it', 'smooth criminal'] }

위와 같이 구성하기 위해 알아야하는 파이썬 문법 :  defaultdict 함수

dictionary 를 만들때 그냥 딕셔너리는 아래와 같이 키만 있고 값이 없으면
만들어지지 않습니다. 그런데 default 은 만들어집니다.

gini2 = {}
gini2['비틀즈']

from   collections  import  defaultdict
gini3 = defaultdict(list)
gini3['비틀즈']

설명:  딕셔너리를 구성하는데 값없이 구성해라 ~

from collections  import  defaultdict
gini = defaultdict(list)
gini['비틀즈'].append('yesterday')
print(gini)
gini['비틀즈'].append('imagine')
print(gini)

설명: key 값 비트즈의 값으로 yesterday 와 imagine 을 추가함

문제339. 위의 코드를 보고 아이유도 너랑나, 마슈멜로우를 gini에 추가하시오 !

gini['아이유'].append('너랑나')
gini['아이유'].append('마슈멜로우')
print(gini)

 {'비틀즈': ['yesterday', 'imagine'], '아이유': ['너랑나', '마슈멜로우']})
    
문제340. 아래의 두개의 리스트를 이용해서 아래의 최종결과를 출력하시오!

artist =['비틀즈', '비틀즈', '아이유', '아이유', '마이클 잭슨', '마이클 잭슨']
music =['yesterday', 'imagine', '너랑나', '마슈멜로우','beat it', 'smooth criminal']

최종결과:
{'비틀즈' : ['yesterday', 'imagine'], '아이유' : ['너랑나','마슈멜로우'],
 '마이클 잭슨' : ['beat it', 'smooth criminal'] }

승혁이 코드:

from collections import defaultdict

artist =['비틀즈','비틀즈','아이유','아이유','마이클 잭슨','마이클 잭슨']
music =['yesterday','imagine','너랑나','마슈멜로우','beat it','smooth criminal']

gini = defaultdict(list)  # 값이 리스트 형태로 구현하는것을 쉽게하기 위해서 디폴트딕셔너리
                              # 로 구성함 

for i,v in enumerate(artist):  ['비틀즈','비틀즈','아이유','아이유','마이클 잭슨','마이클 잭슨']
    gini[v].append(music[i])
     
print(gini)

문제341.  gini 딕셔너리에서  값 리스트들을 추출하시오 !

for  i   in   gini.values():
    print (i)

['yesterday', 'imagine']
['너랑나', '마슈멜로우']
['beat it', 'smooth criminal']

문제342. 아래의 결과에서 리스트의 0번째 음악들만 출력하시오 !

['yesterday', 'imagine']
['너랑나', '마슈멜로우']
['beat it', 'smooth criminal']

for  i   in   gini.values():
    print (i[0], end=',' )

문제343. 아래와 같이 음악 아티스트들의 노래가 겹치지 않게 출력하시오!

yesterday,너랑나,beat it,imagine,마슈멜로우, smooth criminal

3시 신호보냈습니다. 

for  k in  range(0,2):
    for  i   in   gini.values():
        print (i[k], end=',' )

문제344.  (오늘의 마지막 문제)위의 코드를 수행할 때마다  음악이 서로 다르게 
              섞이게 하시오
              섞이긴하되 서로 다른 아티스트의 노래가 바로 옆에 있게 해야합니다.


■ 예제119.  리스트의 모든 요소의 합 구하기 (sum)

 파이썬 내장함수인 sum() 을 이용해 리스트의 모든 요소의 합을 출력합니다.

예제:
a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

sum(a)

문제345. (카카오 면접문제) 1부터 10까지의 숫자가 있는데 그중에 하나의 숫자
           가 없다. 이를 loop 문 쓰지 말고 알아내시오 !

a = [ 1, 2, 3, 4, 5 ,7, 8, 9, 10]

sum(range(1,11) ) - sum(a)              45분까지 쉬세요 !


문제344.  (오늘의 마지막 문제)위의 코드를 수행할 때마다  음악이 서로 다르게 
              섞이게 하시오
              섞이긴하되 서로 다른 아티스트의 노래가 바로 옆에 있게 해야합니다.

■ 예제120. 리스트 요소가 모두 참인지 확인하기(all, any)

 리스트의 모든 요소가 참인지 또는 모든 요소가 거짓인지 판단해야하는 경우,
 파이썬 내장함수 all() 이나 any() 를 사용하면됩니다.
 all() 은 인자로 입력되는 리스트의 모든 요소가 참인 경우에만 True 를
 리턴하고 거짓이 하나라도 포함되어져 있으면 False 를 리턴합니다.
 이와달이 any() 는 인자로 입력되는 리스트의 모든 요소가 거짓인 경우에만
 False 를 리턴하고 참이 하나라도 존재하면 True 를 리턴합니다. 

예제.
a = [ True, True, True ]
b = [ True, False, True ]

print ( all(a) )   # True
print ( all(b) )   # False
print ( any(a) )  # True
print ( any(b) )  # True

문제345. 컬러 사진을 인공지능이 인식하기 위해서는 3차원 합성곱을 코드로 
            구현할 수 있어야하는데 그러기 위해서 아래의 행렬을 구성하시오 !

   3    2   1   4   5
   3    2   1   2   3 
   6    4   3   2   1
   2   3    1   2   3
   3   4    4   3   1

import  numpy  as  np
a = np.array([3, 2, 1, 4, 5, 3, 2, 1, 2, 3, 6, 4, 3, 2, 1, 2, 3, 1, 2, 3, 3, 4, 4, 3, 1])
a_n = a.reshape(5, 5)
print (a_n)

문제346. 컬러 사진을 하나 만드시오 !  red 행렬, blue 행렬, green 행렬 
            3개를 조합해서 만드시오 !

x=np.array([[[1,2,3,0],
                [0,1,2,3],  # --> red 행렬
                [3,0,1,2],
                [2,3,0,1]],
               [[2,3,4,1],
                [1,2,3,4],  # --> green 행렬
                [4,1,2,3],
                [3,4,1,2]],
               [[3,4,5,2],  # --> blue 행렬
                [2,3,4,5],
                [5,2,3,4],
                [4,5,2,3]]])

문제347. 위의 사진이 3차원인진 확인하시오 !

x.ndim

문제348. 위의 사진의 shape 를 확인하시오 !

x.shape   # (3,      4,          4)
                ↑     ↑          ↑
               차원   가로행렬 세로행렬 

■ 예제121.  사전에 요소 추가하기 

 파이썬의 자료형 5가지 ?   1. 문자형
                                   2. 숫자형
                                   3. 리스트형
                                   4. 사전형
                                   5. 튜플형 
                       
사전형은 키:값으로 되어진 요소로 구성되어 있습니다.
사전형은 리스트형처럼 인덱스 번호로 요소를 접근하는게 아니라
키값으로 요소의 값에 접근합니다. 

문제349. 아래의 2개의 리스트를 가지고 sol 딕셔너리를 생성하시오 
          
sol_eng = ['sun', 'mercury', 'venus', 'earth', 'mars']  <--- 키
sol_kor = ['태양', '수성', '금성', '지구', '화성']          <--- 값

답:
sol ={}
for  i, k  in  zip(sol_eng, sol_kor):
    sol[i] = k
print (sol)

■ 예제122. 사전의 특정 요소값 변경하기 

 사전 자료형의 특정 요소값을 변경하는 방법은 다음과 같습니다.

예제:
사전형이름['키']='값'
sol['태양']='aaaaaaaaaaaaaaa'
print(sol)

문제350. 아래의 딕셔너리의 값중에 fire 를 피땀눈물로 변경하시오 !

dict = {'방탄소년단':'fire', '소녀시대':'Gee'}

dict['방탄소년단']='피땀눈물'
print(dict)

문제351. 아래의 딕셔너리의 값중에서 fire 를 피땀눈물로 변경하시오 !

dict = {'방탄소년단':['fire','DNA'], '소녀시대':['Gee','다시만난세계']}

dict['방탄소년단'][0]='fire'
print(dict)

문제352. 방탄소년단에 노래를 하나 더 추가하시오 
            다이너마이트를 추가하세요 !

dict['방탄소년단'].append('다이너마이트')
print(dict)

문제353.  아래의 컬러 사진에서 아래의 네모 박스에 해당하는 영역만 추출하시오 !

x=np.array([[[1,2,3,0],
                [0,1,2,3],  # --> red 행렬
                [3,0,1,2],
                [2,3,0,1]],
               [[2,3,4,1],
                [1,2,3,4],  # --> green 행렬
                [4,1,2,3],
                [3,4,1,2]],
               [[3,4,5,2],  # --> blue 행렬
                [2,3,4,5],
                [5,2,3,4],
                [4,5,2,3]]])

print(x[ 0:3,0:3, 0:3])


문제344. (오늘의 마지막 문제  위의 코드를 수행할 때마다  음악이 서로 다르게 섞이게
             하시오
             섞이긴하되 서로 다른 아티스트의 노래가 바로 옆에 있게 해야합니다.

5시에 A 반 발표자들 스터디 모임이 있습니다.


선생님 
dict = {'방탄소년단':'fire', '소녀시대':'Gee'}

dict = {'방탄소년단':['fire', 'DNA'], '소녀시대':['Gee', '다시만난세계']}

             '비틀즈': ['yesterday', 'imagine'],
             '아이유': ['너랑나', '마슈멜로우', '미아'],
             '마이클잭슨': ['beat it', 'smooth criminal', 'billy jean']

from random import shuffle

for j in range(2):               #  j = 0                           , j = 1
    for i in gini.values():       # i = ['yesterday', 'imagine']  ,  i=['너랑나', '마슈멜로우', '미아'], i= ['beat it', 'smooth criminal', 'billy jean']
        shuffle(i)                 # ['yesterday', 'imagine'] 을 shuffle, [마슈멜로우,너랑나,미아
        print(i[j], end=',')       # yesterday,  마슈멜로우, smooth crimanal, 

- 승제 코드:

             '비틀즈': ['yesterday', 'imagine'],
             '아이유': ['너랑나', '마슈멜로우', '미아'],
             '마이클잭슨': ['beat it', 'smooth criminal', 'billy jean']

for i in gini.values():  # i = ['yesterday', 'imagine']
    i.reverse()           #  ['imagine','yesterday'], 

for i in range(2):
    for j in gini.values():
        print(j[i], end=',')

■ 예제123.  사전의 특정 요소 제거하기 

  사전 dict 에서 특정 요소 key:value 를 제거하는 방법은 다음과 같습니다.

예제:
sol = {'태양':'sun', '수성':'mercury', '금성':'venus', '지구':'earth'}
print (sol)

del sol['태양']
print ( sol )

문제345. 아래의 딕셔너리에 다시만난세계의 값만 지우시오

dict ={'소녀시대' : ['다시만난세계', 'Gee'], '방탄소년단' : ['DNA','Fire'] }

del dict['소녀시대'][0]
print(dict)

문제346. music 딕셔너리에서 맨 끝에 추가된 음악들만 지우시오 ! 

music = {
             '비틀즈': ['yesterday', 'imagine'],
             '아이유': ['너랑나', '마슈멜로우', '미아'],
             '마이클잭슨': ['beat it', 'smooth criminal', 'billy jean']  }

for  i  in   music:
    del music[i][-1]

print (music)

■ 예제124.  사전의 모든 요소 제거하기 (clear)

  사전의 모든 요소를 제거하여 빈 사전으로 만드는 방법은 
  사전 객체의 clear() 메소드를 이용하면 됩니다.

예제:

music = {
             '비틀즈': ['yesterday', 'imagine'],
             '아이유': ['너랑나', '마슈멜로우', '미아'],
             '마이클잭슨': ['beat it', 'smooth criminal', 'billy jean']  }

music.clear()
print (music)

문제347.  인공지능이 사진을 인식할 수 있도록 어제 만들었던 컬러사진을 가져와서
             red 행렬만 출력하시오 !

x=np.array([[[1,2,3,0],
                [0,1,2,3],  # --> red 행렬
                [3,0,1,2],
                [2,3,0,1]],
               [[2,3,4,1],
                [1,2,3,4],  # --> green 행렬
                [4,1,2,3],
                [3,4,1,2]],
               [[3,4,5,2],  # --> blue 행렬
                [2,3,4,5],
                [5,2,3,4],
                [4,5,2,3]]])


print(x[ 0, : , :])  #  x [ 색깔channel, 가로행렬, 세로행렬 ]

문제348.  위의 행렬과 합성곱해서 이미지의 특징을 잡아낼 필터 행렬을 아래와 같이
             만드시오 !

 필터의 red 행렬                 필터의 green 행렬               필터의 blue 행렬
     3  2   1                            3   2    1                           2   2    1
     1  2   3                            1   2    5                           2   3    1
     5  6   2                            2   2    1                           2   1    2

45분까지 쉬세요 ~~
a_n =  np.array( [3,2,1,1,2,3,5,6,2,3,2,1,1,2,5,2,2,1,2,2,1,2,3,1,2,1,2]).reshape(3,3,3)
print(a_n)

문제349. 원본 이미지에 아래의 3x3영역의 red 행렬과 필터의 3x3 행렬의
            red 행렬과 합성곱 하시오 !

filter =  np.array( [3,2,1,1,2,3,5,6,2,3,2,1,1,2,5,2,2,1,2,2,1,2,3,1,2,1,2]).reshape(3,3,3)
                                                                        
x=np.array([[[1,2,3,0],                            
                [0,1,2,3],  # --> red 행렬                     3  2   1
                [3,0,1,2],                                          1  1   2
                [2,3,0,1]],                                          3  5  6
               [[2,3,4,1],
                [1,2,3,4],  # --> green 행렬
                [4,1,2,3],
                [3,4,1,2]],
               [[3,4,5,2],  # --> blue 행렬
                [2,3,4,5],
                [5,2,3,4],
                [4,5,2,3]]])

result =  np.sum(  x[ 0, 0:3, 0:3 ] * filter[0, : , : ] )
print( result )

문제350. 위에서는 red 행렬만 합성곱 했는데 이번에는 red, green, blue 행렬
            전부다 합성곱하시오 ! 카페에 올려주세요 

a = 0
for i in range(len(filter)):  # 0 : red, 1 : green, 2 : blue
    a += np.sum(x[i,:3,:3] * filter[i,:,:])
print(a)


문제351.  3차원 합성곱을 완성시키시오 !  카페에 올려주세요

result = [ 23, 24, 56, 43 ]

a_n = np.array(result).reshape(2,2)
print(a_n)

결과:                     45분까지 쉬세요 ~~
[[137 149]
 [129 137]]


입력이미지의 가로행렬,  입력이미지의 세로행렬

 x[  0, 0:3, 0:3 ]  * filter[ 0, :, : ]
 x[  1, 0:3, 0:3 ]  * filter[ 1, :, : ]
 x[  2, 0:3, 0:3 ]  * filter[ 2, :, : ]
                                                 for   j  in  range(2):     # 0, 1
 x[  0, 0:3, 1:4 ]  * filter[ 0, :, : ]              for  k  in  range(2): # 0, 1
 x[  1, 0:3, 1:4 ]  * filter[ 1, :, : ]                  print (  j, j+3, k, k+3 )
 x[  2, 0:3, 1:4 ]  * filter[ 2, :, : ]
                                                
 x[  0, 1:4, 0:3 ]  * filter[ 0, :, : ]
 x[  1, 1:4, 0:3 ]  * filter[ 1, :, : ]
 x[  2, 1:4, 0:3 ]  * filter[ 2, :, : ]

 x[  0, 1:4, 1:4 ]  * filter[ 0, :, : ]
 x[  1, 1:4, 1:4 ]  * filter[ 1, :, : ]
 x[  2, 1:4, 1:4 ]  * filter[ 2, :, : ]


문제352. 아래의 코드로 실행되는 숫자를 그 옆에 나온 숫자처럼 3개씩 더 나오게 해서
            총 12개가 나오게 하시오 !

for   j  in  range(2):     # 0, 1
    for  k  in  range(2): # 0, 1    
        print (  j, j+3, k, k+3 )
                                            0 3 0 3
0 3 0 3                                   0 3 0 3
0 3 1 4       ------------>            0 3 0 3
1 4 0 3                                   0 3 1 4    
1 4 1 4                                   0 3 1 4
                                            0 3 1 4
                                            1 4 0 3 
                                            1 4 0 3 
                                            1 4 0 3 
                                            1 4 1 4  
                                            1 4 1 4  
                                            1 4 1 4  
답:
for j in range(2):
    for k in range(2):
        for i in range(3):
            print(i,  j,j+3,  k, k+3)

 x[  0, 0:3, 0:3 ]  * filter[ 0, :, : ]            점심시간 문제 : 최소공배수 구하기 
 x[  1, 0:3, 0:3 ]  * filter[ 1, :, : ]               A반은 카페에 올리세요
 x[  2, 0:3, 0:3 ]  * filter[ 2, :, : ]               B반은 라인검사입니다. 
                                                 
 x[  0, 0:3, 1:4 ]  * filter[ 0, :, : ]             
 x[  1, 0:3, 1:4 ]  * filter[ 1, :, : ]                  
 x[  2, 0:3, 1:4 ]  * filter[ 2, :, : ]
                                                
 x[  0, 1:4, 0:3 ]  * filter[ 0, :, : ]
 x[  1, 1:4, 0:3 ]  * filter[ 1, :, : ]
 x[  2, 1:4, 0:3 ]  * filter[ 2, :, : ]

 x[  0, 1:4, 1:4 ]  * filter[ 0, :, : ]
 x[  1, 1:4, 1:4 ]  * filter[ 1, :, : ]
 x[  2, 1:4, 1:4 ]  * filter[ 2, :, : ]

■ 예제125.  사전에서 키만 추출하기 (keys)

 아래의 사전에서 key 만 추출하고 싶으면 사전이름.keys() 라고 하면 됩니다.

sol = {'태양':'sun', '수성':'mercury', '금성':'venus', '지구':'earth'}
print ( sol.keys() )

문제353. 위의 sol 딕셔너리의 데이터를 뽑아서 아래와 같이 결과를 출력하시오 !

태양, 수성, 금성, 지구

sol = {'태양':'sun', '수성':'mercury', '금성':'venus', '지구':'earth'}
for  i  in   sol.keys():
    print ( i, end=',') 

설명: print 의 end 옵션에 준 구분자로 값들을 가로로 출력하면서 구분자로 구분해 줍니다.

■ 예제126. 사전에서 값만 추출하기(values)

아래의 사전형에서 값에 해당하는 부분만 추출하려면 사전형이름.values() 를
사용하면 됩니다. 

sol = {'태양':'sun', '수성':'mercury', '금성':'venus', '지구':'earth'}
print( sol.values() )

■ 예제127. 사전요소에서 모두 추출하기 (items)

 딕셔너리 자료형에 데이터를 추출하는 방법은 다음과 같습니다.

 1. key 만 추출:  dict.keys()
 2. 값만 추출 :  dict.values()
 3. 둘다 추출 :  dict.items()

sol = {'태양':'sun', '수성':'mercury', '금성':'venus', '지구':'earth'}
for  i  in  sol.items():
    print (i)

('태양', 'sun')
('수성', 'mercury')
('금성', 'venus')
('지구', 'earth')

문제354. 위의 결과에서    이 부분만 출력하시오 !

sol = {'태양':'sun', '수성':'mercury', '금성':'venus', '지구':'earth'}
for  i  in  sol.items():
    print (i[0])

■ 예제128.  사전 정렬하기(sorted)

  파이썬 내장함수 sorted() 는 사전 자료를 인자로 입력받아 정렬할 수 있습니다.
  사전의 각 요소는 키:값 으로 되어져 있습니다. 
  sorted() 함수에 사전을 인자로 입력하면 기본적으로 사전의 키를 오름차순으로
  정렬한 결과를 리스트로 반환합니다. 

예제:
dict2 = { '소녀시대: '소원을 말해봐', '방탄 소년단' : 'DNA', '오마이걸' : '살짝 설랬어' }

예제1. 위의 dict2 에서 키만 추출하시오 !

print ( dict2.keys() )

예제2. 위의 dict2 의 키값을 아래와 같이 정렬해서 출력하시오 !

결과: ['방탄 소년단', '소녀시대', '오마이걸'] 

a = dict2.keys() 
print  ( sorted( a )  )


■ 예제129. 문자 코드값 구하기 

 파이썬 내장함수 ord() 는 문자를 컴퓨터가 인식하는 코드값으로 변환합니다. 

예제:   A ------------------------------->  65
                          인코딩
                             ↓
 사람이 알아볼 수 있는 언어를 컴퓨터가 알아볼 수 있는 숫자로 변환

문제355. 알파벳 대문자를 출력하시오 !

ABCDEFGHIJKLMNOPQRSTUVWXYZ

import  string
print ( string.ascii_uppercase )

문제356.  위의 string 과 ord() 함수를 이용해서 아래와 같이 아스키 코드표를 만드시오 !

결과:  A ----------------->  65
        B ------------------> 66
                  : 
                  :
        Z ------------------> 90

import   string

for  i  in  string.ascii_uppercase:
    print ( i , '--------------->', ord(i) )

■ 예제130. 코드값에 대응하는 문자 얻기(chr)

  파이썬 내장함수 chr() 은 ord() 함수의 반대기능을 수행합니다.
  chr() 의 인자로 정수값을 입력하면 이 정수값이 해당하는 문자를 리턴합니다. 

예: print ( chr(65) ) # A

문제357. 아래와 같이 결과를 출력하시오 !

65 -----> A
66 -----> B
    : 
    :
90 ------> Z

for  i  in  range(65, 91):
    print ( i , '------------->', chr(i) )

문제358.  knn 의 유클리드 거리를 구현하기 위해서 아래의 리스트를 딕셔너리로 
            만드시오 !

id =['사과','베이컨','바나나', '당근', '셀러리','치즈']
x = [ 10, 1, 10, 7, 3, 1 ]  # 단맛
y = [ 9,  4, 1, 10, 10, 1 ]  # 아삭거림 정도
label = ['과일', '단백질', '과일', '채소', '채소', '단백질'] 

#knn = { '사과' : [ 10, 9 ], '베이컨' : [ 1, 4] ,'바나나' : [ 10, 1] , ....... } 

from  collections import  defaultdict

knn= defaultdict(list)

for  i, j, k  in  zip( id, x, y):
    knn[i].extend([ j, k ])
print(knn)

문제359.   knn 딕셔너리에서 아래의 토마토와 가장 가까운 거리에 있는 식품의 라벨이
           무엇인지 알아내기 위해서 토마토와 식품들간의 유클리드 거리 공식으로 거리가 
           리스트에 담겨서 출력되게하시오 !  카페에 올려주세요 ~

import  math 
tomato = [6, 4]

knn= {'사과': [10, 9], '베이컨': [1, 4], '바나나': [10, 1], '당근': [7, 10], '셀러리': [3, 10], '치즈': [1, 1]}
distance =[ ]
for   i  in  knn.values():
    a = i[0]  - tomato[0]
    b = i[1]  - tomato[1]
    c = math.sqrt(a**2 + b**2)
    distance.append(c)

print(distance)

문제360. 아래의 리스트에서 가장 큰 원소의 인덱스 번호는 무엇인가 ? 

[6.4031242374328485, 5.0, 5.0, 6.082762530298219, 6.708203932499369, 5.830951894845301]

import  numpy  as   np

m = np.array(distance)
print ( np.argmax(m) )   # 4

설명: numpy 의 argmax 를 이용하며 리스트에서 최대값의 인덱스 번호를 알 수 있다. 
       numpy 의 argmin 을 이용하면 리스트에서 최소값의 인덱스 번호를 알 수 있다. 

문제361. knn 알고리즘을 distance_knn 함수로 만들어서 토마토와 가장 가까운 라벨이
           출력되게하시오 !   카페에 올려주세요 !

import  math 
tomato = [6, 4]
label = ['과일', '단백질', '과일', '채소', '채소', '단백질'] 
knn= {'사과': [10, 9], '베이컨': [1, 4], '바나나': [10, 1], '당근': [7, 10], '셀러리': [3, 10], '치즈': [1, 1]}

distance_knn( knn, tomato )  

단백질 

import math 

def distance_knn(x, y):
    distance =[ ]
    for   i  in  knn.values():
        a = i[0]  - tomato[0]
        b = i[1]  - tomato[1]
        c = math.sqrt(a**2 + b**2)
        distance.append(c)
    d=np.array(distance) 
    result = np.argmin(d)   # 가장 작은값의 원소의 인덱스 번호    
    return  label[ result ]

print ( distance_knn(knn, tomato))

■ 예제131. 문자열로 된 식을 실행하기(eval)

  코드를 작성하다보면 파일에서 읽은 수식이나 문자열을 그대로 
  실행해야하는 경우가 있습니다. 예를들어 '2+3' 과 같이 두개의 숫자를
  더하는 문자열을 텍스트 파일에 읽어 이를 실행하여 이 수식의 
  결과인 5를 구하는 경우 입니다. 

예:
a = '2 + 3'
print (a)
print (eval(a) )

문제362. 아래의 결과를 출력하시오 !

  34 + 256 - 71 * 34 = -2124 

a = '34 + 256 - 71 * 34'
print ( a , ' = ', eval(a) )

문제363. 아래의 리스트의 숫자를 뽑아내서 아래의 문자열을 생성하시오!

a = [ 34, 22, 45, 27, 31, 33, 55 ]

결과:  34 + 22 + 45 + 27 + 31 + 33 + 55

a = [ 34, 22, 45, 27, 31, 33, 55 ]
a2 = map(str,a)
bond = '+'
result = bond.join(a2)
print(result)

문제364. 아래의 결과를 출력하시오 ! 

a = [ 34, 22, 45, 27, 31, 33, 55 ]

결과: 
34 + 22 + 45 + 27 + 31 + 33 + 55 = ? 


SQL 두번째 시험 준비를 해주세요 ~

1. SQL DEVELOPER 를 켜세요.
2. 5시까지 시험시간
3. 제출은 word 파일로 제출하되 문제의 답에 "코드와 결과" 를 화면캡쳐해서
   붙여넣고 저장하세요.

4시 신호보냈습니다. 
5시 신호보냈습니다. 
6시 신호보냈습니다. 

"데이터베이스 요구사항분석"에 답안지를 올리는데 MS word로 올려주세요
ms word가 없다면 오픈오피스의  본인이름_답안지.odt 로 확장자해서 올리세요.

* 파이썬 200제 내용 복습

1. 파이썬 자료형 5가지 
2. 문자형 메소드 다루는 방법들   +     판다스 사용법(검색,조인, 서브쿼리, 
3. 숫자형 메소드 다루는 방법들                             group by )
4. 사전형 메소드 다루는 방법들 
5. 리스트형 메소드 다루는 방법들 
6. 파이썬에서 유용한 함수들 소개 (예제129 ~ 

eval 함수는 수학식을 실행하는 함수입니다.

a = '2 + 3'
print (a)
print ( eval(a) )  

문제365.  아래의 리스트를 가지고 아래의 결과를 출력하시오 !

a = [ 24, 22, 29, 31, 42, 22, 33 ]

결과:  24 + 22 + 29 + 31 + 42 + 22 + 33 = 203

답:
a = [ 24, 22, 29, 31, 42, 22, 33 ]
b = []
for  i  in  a:
    b.append( str(i) )  
c = ' + '.join(b)
print ( c, '=', eval(c) )

■ 132.  이름없는 한줄짜리 함수 만들기 (lambda)

 파이썬에서 함수를 정의하는 방법은 일반적으로 다음과 같습니다.

def  함수이름(입력매개변수):
    실행코드

def  add_func(a, b):
    return  a + b 

print ( add_func(2,3) )

설명: 함수를 만들때 위와 같이 함수 이름을 주고 생성했습니다.
       함수를 생성하는 이유는 함수를 한번 만들면 다음부터는 
       함수이름만 가지고 함수를 호출하면 되기 때문에 함수를 생성해서
       코드를 작성했습니다. 

지금부터 만들 함수는 함수 이름없이 함수를 생성하는 코드입니다.
함수 이름을 안주고 함수를 생성한다는것은 이 함수를 지금 이 코드에서
한번만 실행하고 앞으로 쓸일이 없는 경우 함수 이름없이 함수를 생성합니다. 

문법:  
k = lambda  a,b : a+b   # 이름없는 한줄짜리 함수 

print ( k(2,3) ) 

문제366. 아래의 함수를 그냥 이름 없는 한줄짜리 함수로 생성하시오 !

def  odd_func(a):
    if  a % 2 == 0:
        return  '짝수입니다.'
    else:
        return '홀수입니다'

결과:  print (k(2))

     짝수입니다. 

답:  k = lambda  a : '짝수 입니다.'  if  a % 2 == 0  else '홀수 입니다'

한줄로 if 문을 구현하고 싶다면 ?

lambda  입력매개변수 : 실행문  if 조건  else  실행문 

문제367.  아래의 함수를 lambda 로 구현하시오 !

def  high_income(a):
    if  a >= 3000:
        return  '고소득자 입니다'
    else:
        return '일반 소득자 입니다'

print ( k(4000) )

결과: 고소득자입니다. 

k = lambda  a : '고소득자입니다.' if a >= 3000 else '일반 소득자입니다'

문제368.  아래의 함수를 lambda 로 구현하시오 

힌트:  lambda x: x*10 if x<2 else (x**2 if x<4 else x+10)

def  high_income(a):
    if  a >= 3000:
        return  '고소득자 입니다'
    elif  a>= 2000:
        return  '중간소득자 입니다'
    else:
        return '일반 소득자 입니다'

print (k(2200))

중간소득자입니다. 

답:
k = lambda  a :  '고소득자 입니다.' if  a >= 3000   else ( '중간소득자입니다' if a>=2000 else '저소득자입니다')

문제369.  아래의 함수를 lambda 로 구현하시오 !

def  a_loop_fun(x):
    b = [] 
    for  i  in   range(1,x):
        b.append(i**2)
    return  b 

print ( a_loop_fun(10) ) 

[1, 4, 9, 16, 25, 36, 49, 64, 81]

답: k = lambda x: [ i**2 for  i  in  range(1,x)  ]

문제370.  아래의 함수를 lambda 로 구현하세요 !!

def  a_loop_fun(x):
    b = [] 
    for  i  in   range(1,x):
        if  i % 2 == 0:
            b.append(i**2)
    return  b 

답: k = lambda x: [ i**2 for  i  in  range(1,x) if i % 2==0 ]

설명:  lambda  x : 실행문 for  i  in  범위 if  조건 ]

문제371.  주사위의 눈이 짝수인것만 담는 리스트를 아래와 같이 만드시오

[ 2, 4, 6 ]

답: 

k = [ i  for  i  in  range(1,7)  if  i  % 2 ==0 ]
print(k)

문제372.  아래의  코드를 한줄짜리 코드로 구현하시오 !

a = []
for  x  in  [ 1, 2, 3 ]:
    for  y  in [ 3, 2, 4]:
        if  x != y:
            a.append( (x,y) ) 
print(a)

답: [ (x,y)  for  x  in [1,2,3] for y in [3,1,4] if  x!=y ]

문제373.  0 에서 10사이의 정수를 랜덤으로 출력하시오 !

import  numpy  as  np

a = np.random.randint(10)
print(a)

문제374.  위의 코드를 이용해서 정수형 숫자 9개를 담는 아래의 리스트를
             만드시오 ! (정수형 숫자는 랜덤으로 생성합니다.)

 [ 2, 1, 3,  2,  1,  1,  6,  9,  2 ]

k = [ np.random.randint(10) for  i  in range(9) ]
print(k)

문제375. 위의 리스트를 numpy 를 이용해서 3x3 행렬로 변경하시오 !

import  numpy  as  np 
k = [ np.random.randint(10) for  i  in range(9) ]
k_n = np.array(k).reshape(3,3)
print(k_n)

■ 예제133. 인자를 바꾸어 함수를 반복 호출하여 결과값 얻기(map)

 파이썬 내장함수 map() 은 리스트 A 와 함수 f 가 주어지면
 리스트 A 의 요소를 함수 f 에 입력해서 출력하는 결과를 간단하게
 출력해줍니다.

문법:  map( 함수명,  함수에 제공할 매개변수 값들)

매개변수의 값들을 바꿔가면서 함수를 반복 실행할때 유용하게 사용할 수 
있습니다.

예제:
def  gob(x):
    return  x*x 

a = [ 1, 2, 3, 4, 5 ]
result = map(gob, a)
print ( list(result) )  # map 함수가 리턴해주는 결과를 보려면 반드시 list 함수로
                         # 감싸줘서 리스트 형태로 봐야합니다. 

문제376.  아래의 a 리스트에 map 함수를 적용해서 아래의 결과가 나오게하시오
             ( 3000 이상이면 1 아니면 0 이 되게하세요)

a = [ 4000, 5000, 2000, 3500, 1000 ]

결과: [ 1, 1, 0, 1, 0 ] 

def  f(x):
    if  x >= 3000:
        return 1
    else:
        return 0

list(map( f,  a))

문제377. 위의 결과를 lambda 로 구현하세요 !

a = [ 4000, 5000, 2000, 3500, 1000 ]

list(map(lambda x: 1 if x>=3000 else 0,  a))

문제378.  백화점 데이터를 판다스 데이터 프레임으로 만들고 
             주말방문 비율이 0.5 이상고 구매주기가 20 이상이면 1 이 되게
             하고 아니면 0 이 되게 하는 컬럼을 추가하시오 ! (컬러명: visit_cnt)

import  pandas  as  pd
x_train = pd.read_csv("d:\\data\\X_train.csv", encoding='euckr')
mask = (x_train.주말방문비율 >= 0.5 ) & (x_train.구매주기>= 5)
mask.value_counts()
x_train['visit_cnt'] = mask.astype(int)
x_train

문제379.  백화점 데이터 프레임에서 주구매상품에 첫 두글자가 남성인 상품의
             데이터만 출력하시오 !

x_train[:] [x_train.주구매상품.apply(lambda x : x[0:2] == '남성')]

x_train.주구매상품[x_train.주구매상품.str.startswith('남성')].reset_index()

문제380.  남성을 포함하고 있는 상품의 모든 데이터를 출력하시오 ! 

x_train[:] [x_train.주구매상품.apply(lambda x: '남성' in x)]

str.contains('남성')

문제381.  주구매상품을 중복제거해서 출력하시오 

x_train.주구매상품.unique()

문제382.  주구매상품에 남성을 포함하고 있으면 1 아니면 0 이 출력되는
             파생변수를 백화점 데이터 프레임에 man_product 으로 추가하시오 

mask = x_train.주구매상품.apply(lambda x: '남성' in x)
mask.value_counts()
x_train['man_product'] = mask.astype(int)

점심시간 문제 검사 받겠습니다. 2^100 의 자릿수의 합을 구하세요 

■ 예제134. 텍스트 파일을 읽고 출력하기

  텍스트 파일을 읽고 그 내용을 화면에 출력하고자 하면 
  제일 먼저 텍스트 읽기 모드로 파일을 엽니다. 
  텍스트 파일을 오픈하면 텍스트 파일을 읽어 내용을 화면에 출력하면 됩니다.

예제:
f = open("d:\\data\\jobs.txt", encoding='UTF8')
data = f.read()  # 파일을 한번에 전부 읽어오는 함수 입니다.
print( data )
f.close()

설명: 스티븐 잡스 연설문은 길지 않으니까 한번에 읽어와도 관계없는데
        텍스트 파일의 용량이 매우 클 경우 read() 로 한꺼번에 파일의 내용을
        읽어들이는것은 메모리 부족 문제를 야기 시킬 수 있습니다. 

문제383.  중앙일보에서 인공지능으로 검색한 기사인 mydata3.txt 를 
             파이썬으로 불러와서 출력하시오 !

f = open("d:\\data\\mydata3.txt", encoding='UTF8')
data = f.read()  # 파일을 한번에 전부 읽어오는 함수 입니다.
print( data )
f.close() # 파일을 닫는다. 닫는 코드를 안쓰면 주피터 노트북을 실행하고 있으면
           # 계속 파일이 열려있게 됩니다. 파일이 계속 열려있으면 메모리를 
           # 계속 차지하고 사용하고 있게 됩니다. 
           # 메모리를 사용하고  프로그램이 끝나면 메모리를 반환해줘야합니다. 

문제384. 위의 중앙일보 기사에서 '빅데이터' 라는 단어가 몇번 나오는지
            count 하시오 !

f = open("d:\\data\\mydata3.txt", encoding='UTF8')
data = f.read()  # 파일을 한번에 전부 읽어오는 함수 입니다.
print( data.count('빅데이터')  )
f.close()

■ 예제135. 텍스트 파일을 한줄씩 읽고 출력하기 (readline)

 텍스트 파일의 용량이 매우 클 경우 read() 로 한꺼번에 파일의 내용을
 읽어들이는것은 메모리 문제를 야기할 수 있습니다.
 이 경우 텍스트 파일 내용을 한 줄 단위로 읽고 작업을 수행하면 됩니다.
 readline() 은 텍스트 파일에서 한 줄을 읽습니다. 
 한 줄을 읽고 나면 파일을 읽기 시작하는 위치는 그 다음주의 맨 처음이 
 됩니다. 

예제:
f = open("d:\\data\\jobs.txt", encoding="utf8")
data = f.readline()
print(data)
f.close()

문제386. 지금은 한줄을 읽었는데 스티븐 잡스 연설문을 모두 읽어오시오 !
             (loop 문을 사용하세요 ~)

f = open("d:\\data\\jobs.txt", encoding="utf8")
data = f.readline()        # 처음에 한번 실행되고 그 다음에는 실행되지 않음
while  data:  # data 라는 변수안에 data 가 있으면 True, 없으면 False 입니다. 
    print (data)
    data = f.readline()# 그 다음줄을 읽어서 data 변수에 입력합니다.
f.close()

문제387. 위에서 한줄씩 읽은 데이터에서 인공지능이라는 단어가 나오면
             count 되게 해서 전체 건수를 출력하시오 !

f = open("d:\\data\\mydata3.txt", encoding="utf8")
data = f.readline()        # 처음에 한번 실행되고 그 다음에는 실행되지 않음
cnt = 0
while  data:  # data 라는 변수안에 data 가 있으면 True, 없으면 False 입니다. 
    cnt = cnt + data.count('인공지능')
    data = f.readline()# 그 다음줄을 읽어서 data 변수에 입력합니다.
print (cnt)
f.close()

문제388. 위의 코드를 수정해서 단어를 물어보게하고 단어를 입력하면
            해당 단어가 몇건 나오는지 출력되게하시오 !

단어를 입력하세요 ~  인공지능

결과:  이 기사에서 인공지능 단어는 24번 나왔습니다 

word = input('단어를 입력하세요 ~')
f = open("d:\\data\\mydata3.txt", encoding="utf8")
data = f.readline()        # 처음에 한번 실행되고 그 다음에는 실행되지 않음
cnt = 0
while  data:  # data 라는 변수안에 data 가 있으면 True, 없으면 False 입니다. 
    cnt = cnt + data.count(word)
    data = f.readline()# 그 다음줄을 읽어서 data 변수에 입력합니다.
print (cnt)
f.close()

문제389. 위의 코드를 수정해서 아래와 같이 리스트로 입력하고 
             결과가 아래와 같이 출력되게하시오 !

단어 리스트를 입력하세요 ~  ['빅데이터', '인공지능']

결과:

빅데이터   11건
인공지능   24건 

■ 예제136. 화면에서 사용자 입력을 받고 파일로 쓰기 

 사용자로 부터 입력받은 텍스트를 파일로 저장하려면 파일을
 텍스트 쓰기 모드로 오픈하고 파일 객체의 write() 를 이용해
 데이터를 파일에 기록합니다. 

예제:
text = input('파일에 저장할 내용을 입력하세요 ~')
f = open("d:\\data\\mydata100.txt", "w")  # w 는 write 의 약자입니다.
f.write(text)
f.close()

설명: 웹에서 스크롤링한 빅데이터(텍스트) 를 저장할때 사용합니다. 

문제390.  emp3.csv 에서  월급이 3000 이상인 사원들의 이름과 월급을 
             조회하고 그 결과를 result_3000.csv 로 저장하세요 !

import  pandas  as  pd

emp=pd.read_csv("d:\\data\\emp3.csv")
emp[['ename', 'sal']][ emp.sal >= 3000].to_csv("d:\\data\\result3000.csv")

문제391.  카페의 data 게시판에  iris2.csv 를 내려받아 Sepal.Width 가 3 이상인
             모든 컬럼의 데이터를 result391.csv 로 저장하시오 !

iris = pd.read_csv("d:\\data\\iris2.csv")
iris[:][iris['Sepal.Width'] >= 3].to_csv("d:\\data\\result391.csv")

■ 예제137. 텍스트 파일에 한줄씩 쓰기(writelines)

  파일 객체의 writelines() 는 텍스트 문자열이나 텍스트 문자열이
  요소로 되어있는 리스트를 인자로 받아 파일에 한 줄씩 기록합니다. 
  리스트가 인자인 경우 writelines() 는 리스트의 요소를 하나의 문자열로
  결합하여 파일에 한꺼번에 기록합니다. 

※ writelines는 리스트 자료형도 파일에 저장할 수 있습니다. 

예제:
a = ['빅데이터', '인공지능']
f = open("d:\\data\\mydata137.txt", "w")
f.write(str(a))
f.close()

a = ['빅데이터', '인공지능']
f = open("d:\\data\\mydata137.txt", "w")
f.writelines(a)
f.close()

■ 예제138.  텍스트 파일 복사하기(read, write) 

  텍스트 파일을 복사하는 방법을 파이썬으로 구현하려면 read, write 를 
  이용하면 됩니다.  read() 로 텍스트 파일을 읽고 write 로 읽을 내용을
   다른 파일이름으로 저장하면 됩니다. 

예제:
f = open("d:\\data\\mydata3.txt", "r") # r 은 read 입니다.
h = open("d:\\data\\mydata3_copy.txt","w")  # w는 write 입니다.
data = f.read()  # 읽고
h.write( data )   # 쓰기 
f.close()
h.close()

■ 예제139. 바이너리 파일 복사하기 (read, write)

  이미지나 동영상도 파이썬으로 복사 붙여넣기를 할 수 있습니다.
  이미지나 동영상을 복사 붙여넣기 할 때는 파일의 크기가 크므로
  한번에 읽어들일 수는 없고 일부분만 일정한 크기로 읽으면서
  복사 붙여넣기를 합니다. 
예제:
bufsize= 1024  # 1kb 크기의 버퍼 사이즈를 지정합니다. 
f = open("d:\\data\\lena.png", "rb")
h = open("d:\\data\\lena_copy.png","wb")
data = f.read(bufsize)  # 이미지를 1kb를 읽어서 data 에 저장합니다.
while  data:  # data 변수에 data 가 발견되는 동안에 루프문을 수행합니다.
    h.write(data)   # lena_copy.png 에 1kb 의 데이터씩 write 합니다. 
    data = f.read(bufsize) # lena.png 에서 다시 1kb 의 데이터를 read 합니다. 
f.close()
h.close()

문제392. 설현 사진을 복사해서 a_copy.jpg 로 저장하시오 !


 45분까지 쉬세요 ~~~~

■ 예제140. 파일을 열고 자동으로 닫기 (with ~ as )

  with ~ as 절을 사용하게 되면 f.close() 를 명시하지 않아도 되므로
  프로그래머가 실수로 f.close() 를 작성하지 않아서 발생하는 
  메모리 부족오류를 예방할 수 있습니다. 

1. with ~ as 절을 사용하지 않았을때 

f = open("d:\\data\\mydata3.txt", "r")
data = f.readlines()
print(data)
f.close()

2. with ~ as 절을 사용했을때 

with  open("d:\\data\\mydata3.txt", "r") as  f:
    data = f.readlines()
    print (data)

설명: with ~ as 절을 사용하면 자동으로 파일 close 를 파이썬이 해줍니다. 

■ 예제141. HTML 기본문법 

* 데이터 분석 순서 

 데이터 수집 ---> 데이터 유형및 속성 파악 ---> 데이터 변환 ---> 데이터 저장
  ----> 데이터 정제 ----> 데이터 분석 
 
* html 이란 ?  Hyper Text Markup Language 의 약자이고 
                   여러개의 태그(tag) 를 연결해서 모아놓은 문서 

메모장을 열고 아래와 같이 코딩하세요 !

<html><head><title> 요번주 일정 </title></head>
<body>
<p class="title"> 요번주 금요일은 공강입니다 </p>
</body>
</html>

메모장의 파일이름을 a.html 로 바탕화면에 저장하세요 ~
저장할때 파일형식을 모든 파일로 합니다.

예제1. 위의 글씨를 진하게 하시오 !

<html><head><title> 요번주 일정 </title></head>
<body>
<p class="title"><b> 요번주 금요일은 공강입니다 </b></p>
</body>
</html>

예제2. 위의 글씨에 밑줄을 그어 보시오 !

<html><head><title> 요번주 일정 </title></head>
<body>
<p class="title"><b><u> 요번주 금요일은 공강입니다 </u></b></p>
</body>
</html>

예제3. 위의 글씨를 이텔릭체로 변경하시오 !

<html><head><title> 요번주 일정 </title></head>
<body>
<p class="title"><b><u><i> 요번주 금요일은 공강입니다 </i></u></b></p>
</body>
</html>

예제4. p 테그를 추가해서 제목과 내용을 나누시오 !

<html><head><title> SQL 시험 결과 </title></head>
<body>
<p class="title"><b><u><i> 13기 SQL 시험 결과 </i></u></b></p>
<p class="content"> 13기 학생들은 첫번째 SQL 시험을 볼 때 한명도 부정행위
                를 하지 않았습니다. 그래서 선생님이 감동을 했습니다.
               그런데 시험점수가 좋지않아 선생님이 기분이 좋지 않습니다</p>
</body>
</html>

예제5. 위에서 만든 html 문서의 본문에 링크를 거시오 !

<html><head><title> SQL 시험 결과 </title></head>
<body>
<p class="title"><b><u><i> 13기 SQL 시험 결과 </i></u></b></p>
<p class="content"> 13기 학생들은 첫번째 SQL 시험을 볼 때 한명도 부정행위
                를 하지 않았습니다. 그래서 선생님이 감동을 했습니다.
               그런데 시험점수가 좋지않아 선생님이 기분이 좋지 않습니다
<a href ="http://cafe.daum.net/oracleoracle" class="cafe1" id="link1">
</p>
</body>
</html>


문제393. 미국 의료비 데이터(insurance.csv) 를 내려받아 의료비가 가장 많은
            사람의 나이와 성별을 result2.csv 로 저장하시오 ! (오늘의 마지막 문제)

미국 의료비 데이터: data 게시판 

age	
sex	
bmi	
children	: 부양가족수                    5시 신호보냈습니다. ~~
smoker	: 흡연여부                       6시 신호보냈습니다. 
region: 사는 지역                          자유롭게 자습 또는 스터디하세요 ~
expenses: 연간 의료비

■ 142. beautiful soup 모듈 배우기 


* beautiful soup 모듈이란?  파이썬 코드를 복잡하게 작성하지 않아도
                                     편하게 웹스크롤링 할 수 있도록 여러 함수들을
                                     제공하는 웹스크롤링 전문 모듈

예제1. ecologicalpyramid.html 코드를 beautiful  soup 모듈에서 사용할 수 
        있도록 파싱하고 파싱된 내용을 출력하시오 !
                  ↓
        parsing ? 사람이 알아볼 수 있는 언어를 기계가 알아볼 수 있는 언어로
                     변환

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  # html 형태로 파싱해라 ~
print (soup)

예제2. ecologicalpyramid.html 코드에서 class 이름 name 에 접근해서 
         데이터를 긁어오시오 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  # html 형태로 파싱해라 ~
result = soup.find_all(class_ = "name") # soup html 문서에서 class 이름이
print (result)                                   # name 에 해당하는 부분을 모두 찾아라

[<div class="name">plants</div>,
 <div class="name">algae</div>, 
<div class="name">deer</div>, 
<div class="name">rabbit</div>, 
<div class="name">fox</div>, 
<div class="name">bear</div>, 
<div class="name">lion</div>, 
<div class="name">tiger</div>]

문제394.  위의 리스트에서 리스트의 요소를 하나씩 빼내시오 ~

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  # html 형태로 파싱해라 ~
result = soup.find_all(class_ = "name") # soup html 문서에서 class 이름이
print (result)                                   # name 에 해당하는 부분을 모두 찾아라

for  i  in  result:
    print (i)

문제395. ecologicalpyramid.html 문서에서 클래스 number 에 해당하는 모든
           html 문서들을 긁어서 리스트에 담고 그 리스트의 요소를 하나씩
           출력하시오 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  # html 형태로 파싱해라 ~
result = soup.find_all(class_ = "number") # soup html 문서에서 class 이름이
print (result)                                   # name 에 해당하는 부분을 모두 찾아라

for  i  in  result:
    print (i)

예제3. 위에서 출력된 결과에서 text 에 해당하는 숫자부분만 가져오시오

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  # html 형태로 파싱해라 ~
result = soup.find_all(class_ = "number") # soup html 문서에서 class 이름이
print (result)                                   # name 에 해당하는 부분을 모두 찾아라

for  i  in  result:
    print ( i.get_text() )  #  html 코드말고 text 만 가져옵니다. 

문제396. 위에서 출력되고 있는 숫자들의 총합을 출력하시오 

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  # html 형태로 파싱해라 ~
result = soup.find_all(class_ = "number") # soup html 문서에서 class 이름이
                                # name 에 해당하는 부분을 모두 찾아라

cnt = 0
for  i  in  result:
    cnt += int(i.text)

203330

문제397. ecologicalpyramid.html 에서 동물이름 text 만 가져와서 리스트에 담고
             abcd 순으로 정렬해서 리스트에 보관되게하시오 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  # html 형태로 파싱해라 ~
result = soup.find_all(class_ = "name") # soup html 문서에서 class 이름이
                                # name 에 해당하는 부분을 모두 찾아라
a = []
for  i  in  result:
    a.append(i.text)
a.sort()
print(a)

문제398. ecologicalpyramid.html 문서에 데이터를 스크롤링하여 아래의
            결과를 출력하시오 !

결과:
algae  은/는 100000 마리 있습니다.
bear   은/는 100 마리 있습니다.
    :
    :

답:
from   bs4  import  BeautifulSoup

f = open("d:\\data\\ecologicalpyramid.html")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all(class_ = "name") 
                                                 
a = []
for  i  in  result:
    a.append(i.text)                                    45분까지 쉬세요 ~~~

result = soup.find_all(class_ = "number")
cnt = []
for  i  in  result:
    cnt.append(i.text)
    
for i,j in zip(a, cnt):
    print(i,'은/는', j, '마리 있습니다.')

■ 예제143. 웹스클롤링 실전 1단계 (ebs 레이디 버그 시청자 게시판)

http://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?hmpMnuId=106

 우리회사의 신제품이 출시 되었을때 그 제품에 대한 사람들의 반응을
 데이터 분석을 통해서 알아보고자 할때 웹스크롤링 + 데이터 시각화를
 이용하면 됩니다. 

ctl + s 를 누르면 웹페이지를 우리 피씨에 저장할 수 있습니다. 

예제1. ebs 레이디버스 시청자 게시판의 첫번째 페이지의 html 문서를
        data 폴더 밑에 저장하시오 !   이름은 ladybug.html 


예제2.  ladybug.html 문서를 BeautifulSoup 모듈로 파싱하고 html 문서를
         출력하세요 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ladybug.html", encoding="utf8")
soup = BeautifulSoup( f , "html.parser")  
print(soup)
                                                 
예제3. data 폴더 밑에 ladybug.html 문서를 열고 F12 를 눌러서 개발자 모드로
        들어가시오 !



예제4.  시청자 게시글이 있는 테그 p 의 클래스 이름 con 의 html 문서를
         전부 스크롤링하시오 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ladybug.html", encoding="utf8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'p', class_='con' )
print (result)

예제5. 위에 리스트에 담긴 요소들을 하나씩 빼내는데 text 만 출력되게하시오 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ladybug.html", encoding="utf8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'p', class_='con' )
for  i  in  result:
    print( i.text ) 

예제6.  ladybug.html 문서에 날짜 부분만 스크롤링 하시오 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ladybug.html", encoding="utf8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'span', class_='date' )
for  i  in  result:
    print( i.text ) 

예제7.  시청자 게시판의 게시글들을 좀더 깔끔하게 나오게 하시오 !

from   bs4  import  BeautifulSoup

f = open("d:\\data\\ladybug.html", encoding="utf8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'p', class_='con' )
for  i  in  result:
    print( i.get_text(" ", strip=True) ) 

예제8.  시청자 게시판의 날짜와 게시글을 아래와 같이 출력되게하시오 !

2021.02.19 16:07  와 진짜 만화 안보는데 이건 너무 좋아요~!!! 어제 꿈에 나옴ㅋㅋㅋㅋㅋ
2021.01.21 11:19  레이디버그 찐 팬이에요 꿈에도 나왔어요
    :
    :


from   bs4  import  BeautifulSoup
import  re

f = open("d:\\data\\ladybug.html", encoding="utf8")
soup = BeautifulSoup( f , "html.parser")  
result1 = soup.find_all('span', class_='date')
result2 = soup.find_all( 'p', class_='con' )

params1 = []
params2 = []
for  i  in  result1:
    params1.append( i,text  )
for  i  in  result2:
    params2.append( re.sub('\n', '',  i.text ) )

for  k, h  in  zip( params1, params2):
    print ( k + '  ' + h )

설명:  re.sub(제거할문자, 대체할 문자, 원본 데이터)

예제9.  텍스트를 파일로 저장하는 아래의 코드를 실행하세요 

text = 'abcdefghijklmnopqrstu'

f = open("d:\\data\\my_text.txt", "w", encoding="utf8")
f.write(text)
f.close()

예제10.  예제8번에서 스크롤링한 텍스트를 data 폴더 밑에 ladybug.txt 로 
           저장하시오 !


from   bs4  import  BeautifulSoup
import  re

f = open("d:\\data\\ladybug.html", encoding="utf8")
soup = BeautifulSoup( f , "html.parser")  
result1 = soup.find_all('span', class_='date')
result2 = soup.find_all( 'p', class_='con' )

params1 = []
params2 = []
for  i  in  result1:
    params1.append( i.text  )
for  i  in  result2:
    params2.append( re.sub('\n', '',  i.text ) )

f2 = open("d:\\data\\ladybug.txt", "w", encoding="utf8")
for  k, h  in  zip( params1, params2):
    f2.write( k + '  ' + h +'\n')

f2.close()

예제11. 이번에는 ctl + s 를 눌러서 페이지를 저장하지말고 바로 웹상에 접속해서
           데이터를 스크롤링하시오 !

from   bs4  import  BeautifulSoup
import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?c.page=1&hmpMnuId=106&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=10059819&"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")

soup = BeautifulSoup( f , "html.parser")  
result1 = soup.find_all('span', class_='date')
result2 = soup.find_all( 'p', class_='con' )

params1 = []
params2 = []
for  i  in  result1:
    params1.append( i.text  )
for  i  in  result2:
    params2.append( re.sub('\n', '',  i.text ) )

f2 = open("d:\\data\\ladybug2.txt", "w", encoding="utf8")
for  k, h  in  zip( params1, params2):
    f2.write( k + '  ' + h +'\n')

f2.close()


예제12.  좀더 깔끔하게 텍스트파일이 생성되게 하시오 

params2.append(re.sub(r"\n|\r","", i.get_text(" ", strip=True)))

설명:  re.sub(변경할 문자, 변경될 문자, 원본 데이터)

\n :  엔터 
 |   :  또는
\r  : 엔터

예제13.  ebs 레이디 버그 게시판의 전체 글들을 전부 스크롤링하시오 !

from   bs4  import  BeautifulSoup
import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

params1 = []
params2 = []
for i in range(1,23):
    list_url="https://home.ebs.co.kr/ladybug/board/6/10059819/oneBoardList?c.page="+str(i)+"&hmpMnuId=106&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=10059819&"
    url = urllib.request.Request(list_url)
    f = urllib.request.urlopen(url).read().decode("utf-8")

    soup = BeautifulSoup( f , "html.parser")  
    result1 = soup.find_all('span', class_='date')
    result2 = soup.find_all( 'p', class_='con' )

    for  i  in  result1:
        params1.append( i.text  )
    for  i  in  result2:
        params2.append(re.sub(r"\n|\r","", i.get_text(" ", strip=True)))

f2 = open("d:\\data\\ladybug5.txt", "w", encoding="utf8")
for  k, h  in  zip( params1, params2):
    f2.write( k + '  ' + h +'\n')

f2.close()

■ 예제144.  ebs 의 명의 프로그램 시청자 게시판 스크롤링 하기

예제1.  ebs 의 명의 프로그램에 시청자 게시판의 첫페이지의 html 문서를
          beautiful soup 으로 파싱해서 프린트하시오

from   bs4  import  BeautifulSoup
import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
print(soup)

예제2. ebs 명의 시청자 게시판 첫페이지에 html 문서중에 href 에 해당하는 html
         문서를 스크롤링하시오 !  

1. div 테그에 클래스 txtcut 에 해당하는 html 코드를 스크롤링 합니다. 

from   bs4  import  BeautifulSoup
import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'div', class_="txtcut")
print (result)

[<div class="txtcut">
<a href="/bestdoctors/board/6/510093/view/10010831801?c.page=1&amp;file
ClsCd=ANY&amp;hmpMnuId=101&amp;searchCondition=&amp;searchConditionValue=0&amp;searchKeywordValue=0&amp;searchKeyword=&amp;bbsId=510093&amp;"><span style="color:#666666;">	

2. 위의 리스트에서 a 테그에 해당하는 html 코드만 가져오시오 

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'div', class_="txtcut")
for  i  in   result:
    print (i.find_all('a') )

3. 위의 리스트의 요소중에 href 에 해당하는 부분만 가져오시오

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'div', class_="txtcut")
for  i  in   result:
    for  k  in  i.find_all('a') :
        print(k.get("href") )

설명:  get 함수는 변수에 들어간 요소를 출력하는 함수 
        find_all 은 html 문서에 특정 테그와 클래스에 해당하는 부분을 찾는 함수
        get_text() 은 html 문서에서 html 코드제외한 나머지 text 만 출력하는 함수 

예제3.  위의 href 변수의 요소인 url 을 params 라는 리스트 변수에 append 시키시오 !

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'div', class_="txtcut")
params =[]
for  i  in   result:
    for  k  in  i.find_all('a') :
        params.append(k.get("href"))

print(params)

예제4 위의 params 리스트에서 요소를 하나씩 뽑아내서 앞에 https://bestdoctors.ebs.co.kr/
        를 붙여서 출력하시오 !

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'div', class_="txtcut")
params =[]
for  i  in   result:
    for  k  in  i.find_all('a') :
        params.append(k.get("href"))

for  i  in  params:
    print ('https://bestdoctors.ebs.co.kr/' + i )

예제5.  위의 출력되고 있는 결과들을 params2 리스트에 append 시키시오 !

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all( 'div', class_="txtcut")
params =[]
for  i  in   result:
    for  k  in  i.find_all('a') :
        params.append(k.get("href"))

params2 =[]
for  i  in  params:
    params2.append('https://bestdoctors.ebs.co.kr/' + i )

print(params2)

예제6. 위의 코드를 함수로 만들어서 출력되는 결과를 return 이 되게 하세요
        ( 함수명 : ebs_bestdoctor_href )

def ebs_bestdoctor_href():
    import  re
    import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈
    list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?hmpMnuId=101"
    url = urllib.request.Request(list_url)
    f = urllib.request.urlopen(url).read().decode("utf-8")
    soup = BeautifulSoup( f , "html.parser")  
    result = soup.find_all( 'div', class_="txtcut")
    params =[]
    for  i  in   result:
        for  k  in  i.find_all('a') :
            params.append(k.get("href"))

    params2 =[]
    for  i  in  params:
        params2.append('https://bestdoctors.ebs.co.kr' + i )

    return params2

a = ebs_bestdoctor_href()   #  ebs_bestdoctor_href 함수를 실행하고 실행한 결과를
print(a)                           # a 라는 변수에 넣고 출력함


예제7. 위에서 출력되고 있는 url 을 하나 가져와서 이 url 로 접속해서 beautiful soup 이 
         인식할 수 있는 html 코드로 파싱하고 출력하시오!

https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/view/10010831801?c.page=1&fileClsCd=ANY&hmpMnuId=101&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=510093&

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/view/10010831801?c.page=1&fileClsCd=ANY&hmpMnuId=101&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=510093&"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
print(soup)

예제8. 위의 시청자 게시판의 게시글을 출력하시오 !

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/view/10010831801?c.page=1&fileClsCd=ANY&hmpMnuId=101&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=510093&"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all('div', class_= 'con_txt') 

for  i  in  result:
    print(i.get_text() )

예제9. 위에서 출력된 결과를 params3 라는 딕셔너리에 담는데 데이터 전처리 모듈인
          re 를 이용해서 \n 와 \r 을 제외하고 담으시오 

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/view/10010831801?c.page=1&fileClsCd=ANY&hmpMnuId=101&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=510093&"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f , "html.parser")  
result = soup.find_all('div', class_= 'con_txt') 
params3=[]
for  i  in  result:
    if re.sub('[\s]','',i.text)!='':
        params3.append(re.sub(r"\n|\r|\xa0", '', i.get_text() ))
                   
print (params3)

예제10. 위의 코드에 ebs_bestdoctor_href()  함수를 호출해서 여러개의 url 을 가져 올 수 
          있도록 하시오 !

import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url= ebs_bestdoctor_href()
params3=[]
for  i  in  list_url:
    url = urllib.request.Request(i)
    f = urllib.request.urlopen(url).read().decode("utf-8")
    soup = BeautifulSoup( f , "html.parser")  
    result = soup.find_all('div', class_= 'con_txt') 
    
    for  i  in  result:
        if re.sub('[\s]','',i.text)!='':
            params3.append(re.sub(r"\n|\r|\xa0|\t", '', i.get_text() ))
print (params3)

예제11.  위에서 출력되고 있는 텍스트를 파일로 저장하시오 !
            파일명은 ebsbestdoctor.txt 로 data 폴더 밑에 저장되게하세요 ~


import  re
import  urllib.request  # 웹상의 url 을 파이썬이 인식할 수 있도록 해주는 모듈

list_url= ebs_bestdoctor_href()
params3=[]
for  i  in  list_url:
    url = urllib.request.Request(i)
    f = urllib.request.urlopen(url).read().decode("utf-8")
    soup = BeautifulSoup( f , "html.parser")  
    result = soup.find_all('div', class_= 'con_txt') 
    
    for  i  in  result:
        if re.sub('[\s]','',i.text)!='':
            params3.append(re.sub(r"\n|\r|\xa0|\t", '', i.get_text() ))

f2 = open("d:\\data\\ebsbestdoctor.txt","w", encoding="utf8")
for  k  in  params3:
    f2.write( k + '\n')
f2.close()

문제399.  ebs 밑에 페이지번호 1번 ~ 20번까지의 게시글들을 모두 스크롤링해서
             ebsbestdoctor.txt 로 저장하는 함수를 생성하시오 ! 
             ( 함수 이름: ebsbesetdoctor() ) 

마지막 문제 올리시고 자유롭게 자습 또는 스터디 하세요 ~~~

5시 신호보냈습니다. ~~~
6시 신호보냈습니다. ~~~

■ 정보획득량을 파이썬으로 구현하기 

예제1. skin.csv 에서 컬럼명만 추출하시오 !

import pandas  as  pd

skin = pd.read_csv("d:\\data\\skin.csv")
skin.columns

예제2. 위의 결과에서 'job', 'marry', 'car'  이 3개만 column_names 변수에 담으시오

column_names = skin.columns[ 3 : -1 ]
column_names

예제3. skin 데이터 프레임에 정답 컬럼인 cupon_react 의 데이터를 x 라는 변수에 담으시오

x = skin['cupon_react']
x

예제4. 확률 구하기 쉽게 판다스의 crosstab 함수를 이용해서 아래의 결과를 출력하시오

ct = pd.crosstab( x, skin['job'], margins= True)

예제5. 위에서 만든 ct 이원교차표에서  숫자 30에 해당하는 부분만 출력하시오 !
print(type(ct))

ct[열][행]

설명: 데이터 프레임에서 특정 부분의 데이터를 검색하는 방법

1. df.iloc 를 이용하는 방법 숫자 30을 출력한다

df.iloc[행번호][열번호]
df.iloc[행,열]
ct.iloc[0][1]
ct.iloc[0,1]      

2. df.loc 를 이용하는 방법으로 숫자 30을 출력한다. 

df.loc[행이름][열이름]

3. df[열][검색조건]
  
ct["NO"][ct["NO"] >= 5]

ct["All"][ct["All"] == 30]

ct["YES"]["NO"]

예제6.  skin 데이터 프레임에서 job의  값들을 출력하시오 !

 skin['job'].values

예제7. 위의 결과를 중복제거해서 values 라는 변수에 담으시오 !

결과: ['NO' 'YES']

import  numpy  as  np

values = np.unique(  skin['job'].values )
print(values)

예제8.  ct 데이터 프레임에서  구매 YES 인 13이란 숫자와 구매 NO 인 17이란 숫자를 
         가져 오시오

ct.loc[행이름][열이름] 

ct.loc['YES']['All'] # 13
ct.loc['NO']['All'] # 17

예제9.  구매 YES 인 사람들의 확률과 구매 NO 인 사람들의 확률을 아래와 같이 before 
          라는  리스트에 담으시오 ( ct 데이터 프레임과 values 리스트를 이용하세요)
  
before =  [ 17/ 30, 13/30 ]

before  =  [ ct.loc[i]['All'] / ct.loc['All']['All']  for  i  in  values ]

예제10.  분할전 엔트로피를 구하시오 ! 

before_entropy =  np.sum( [- i * np.log2(i) for  i  in before] )
print(before_entropy)

예제11.  분할후 엔트로피를 쉽게 구하기 위해 직업에 대한 분할후 엔트로피를 
           손으로 먼저 계산해봅니다.

ct.loc['All']['YES'] # 17
ct.loc['YES']['YES'] # 9
ct.loc['NO']['YES'] # 8
ct.loc['All']['NO']  # 13
ct.loc['YES']['NO']  # 4
ct.loc['NO']['NO'] #  9

예제12.  분할후 엔트로피를 구하기 위한 확률을 after 라는 리스트 변수에 아래와 같이
            담으시오 !

ct.loc[행][열]
ct[열][행]

after = [ 9/17, 8/17, 4/13, 9/13 ] 

after =[]
for i in  values:
    for  j in values:
        after.append(ct[j][i]/ct['All'][i])
print(after) 

예제13. 위에서 구한 확률 4개를 가지고 분할후 엔트로피를 구하시오 !

after = [ 9/17, 8/17, 4/13, 9/13 ] 
before = [ 17/30 , 13/ 30 ] 
after_entropy =before[0] * np.sum([-i*np.log2(i) for  i  in after[0:2]]) + 
                    before[1] * np.sum([-i*np.log2(i) for  i  in after[2: ]])

0.9511311537042781

예제14. 위의 코드를 다 종합하여 직업에 대한 정보획득량을 출력하는 함수를 
          생성하시오!

import pandas  as  pd
import  numpy  as  np
skin = pd.read_csv("d:\\data\\skin.csv")
column_names = skin.columns[ 3 : -1 ]
column_names
x = skin['cupon_react']
ct = pd.crosstab( x, skin['job'], margins= True)
values = np.unique(  skin['job'].values )

before  =  [ ct.loc[i]['All'] / ct.loc['All']['All']  for  i  in  values ]
before_entropy =  np.sum( [- i * np.log2(i) for  i  in before] )

after = [ ct[j][i]/ct['All'][i]  for  j in values for i in  values ]
after_entropy =before[0] * np.sum([-i*np.log2(i) for  i  in after[0:2]]) + \
                    before[1] * np.sum([-i*np.log2(i) for  i  in after[2: ]])
return  before_entropy - after_entropy

def information_gain():
    import pandas  as  pd
    import  numpy  as  np
    skin = pd.read_csv("d:\\data\\skin.csv")
    column_names = skin.columns[ 3 : -1 ]
    column_names
    x = skin['cupon_react']
    ct = pd.crosstab( x, skin['job'], margins= True)
    values = np.unique(  skin['job'].values )
    before  =  [ ct.loc[i]['All'] / ct.loc['All']['All']  for  i  in  values ]
    before_entropy =  np.sum( [- i * np.log2(i) for  i  in before] )
    after = [ ct[j][i]/ct['All'][i]  for  j in values for i in  values ]
    after_entropy =before[0] * np.sum([-i*np.log2(i) for  i  in after[0:2]]) + \
                        before[1] * np.sum([-i*np.log2(i) for  i  in after[2: ]])
    return  before_entropy - after_entropy

print(information_gain())

예제15. skin 데이터 프레임에  cust_id 와 cupon_react 컬럼을 제외한 나머지 컬럼들
          에 대해서 정복획득량이 아래와 같이 출력되게하시오 ! 답글로 올려주세요

job          ?
marry       ?
car          ? 

def information_gain(col):
    import pandas  as  pd
    import  numpy  as  np
    skin = pd.read_csv("d:\\data\\skin.csv")
    column_names = skin.columns[ 3 : -1 ]
    column_names
    x = skin['cupon_react']
    ct = pd.crosstab( x, skin[col], margins= True)
    values = np.unique(  skin[col].values )
    before  =  [ ct.loc[i]['All'] / ct.loc['All']['All']  for  i  in  values ]
    before_entropy =  np.sum( [- i * np.log2(i) for  i  in before] )
    after = [ ct[j][i]/ct['All'][i]  for  j in values for i in  values ]
    after_entropy =before[0] * np.sum([-i*np.log2(i) for  i  in after[0:2]]) + \
                        before[1] * np.sum([-i*np.log2(i) for  i  in after[2: ]])
    return  before_entropy - after_entropy

print(information_gain('job'))

column_names = skin.columns[ 3 : -1 ]
column_names
for i in  column_names:
    print(i, information_gain(i))

■ 세현이가 작성한 EBS 명의 시청자 게시판 웹스크롤링 코드

2개의 함수?

1.  href 의 url 정보를 리스트에 담아 출력하는 함수

   한페이지에 공지게시판 7개 + 일반 게시판 20개

  테그명:  f   클래스명:  txtcut

2.  특정 게시글을 긁어와서 텍스트 파일로 저장하는 함수

 테그명:  div    클래스명:  con_txt

#1번 함수 만들기 
from  bs4  import  BeautifulSoup
import  urllib
import  re

params3 =[]
for  i  in  range(1, 3):
    list_url ="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?c.page="+str(i) +"&fileClsCd=ANY&hmpMnuId=101&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=510093&"
    url = urllib.request.Request(list_url)
    f = urllib.request.urlopen(url).read().decode("utf-8")
    soup = BeautifulSoup( f, "html.parser")
    params2 =[]
    notice = 0
    for   i in  soup.find_all('div', class_="txtcut"):
        if  notice >= 7:  # 위의 공지게시글 7개
            for  j  in  i.find_all('a'):
                params2.append("https://bestdoctors.ebs.co.kr"+ j.get("href") ) 
        notice +=1
    params3 += params2
print (params3)
             
예제1.  위에서 작성한 코드를 페이지번호를 입력받는 함수로 생성하고 아래와 같이
          실행되게하시오 !

print( ebs_bestdoctor_href(3) )
   
def ebs_bestdoctor_href(page):
    from  bs4  import  BeautifulSoup
    import  urllib
    import  re

    params3 =[]
    for  i  in  range(1, page+1):
        list_url ="https://bestdoctors.ebs.co.kr/bestdoctors/board/6/510093/list?c.page="+str(i) +"&fileClsCd=ANY&hmpMnuId=101&searchCondition=&searchConditionValue=0&searchKeywordValue=0&searchKeyword=&bbsId=510093&"
        url = urllib.request.Request(list_url)
        f = urllib.request.urlopen(url).read().decode("utf-8")
        soup = BeautifulSoup( f, "html.parser")
        params2 =[]
        notice = 0
        for   i in  soup.find_all('div', class_="txtcut"):
            if  notice >= 7:  # 위의 공지게시글 7개
                for  j  in  i.find_all('a'):
                    params2.append("https://bestdoctors.ebs.co.kr"+ j.get("href") ) 
            notice +=1
        params3 += params2
    return params3

a = ebs_bestdoctor_href(3)
print(a)

2번 함수 생성하기: 1번함수에서 리턴하고 있는 href 의 url 리스트를 받아서
리스트에서 url 을 하나씩 빼내서 그 url 하나(한페이지)에 게시글 20개가 
있으므로 그 20개의 게시글들을 긁어서 텍스트 파일로 생성하는 함수

f2 = open("c:\\data\\ebs_best.txt", "w", encoding="utf8")
count = 0
url_list = ebs_bestdoctor_href(2)
for  i  in url_list: # 상세 url(특정게시글)을 하나씩 가져옵니다.
    url = urllib.request.Request(i)
    f = urllib.request.urlopen(url).read().decode("utf-8")
    soup=BeautifulSoup(f, "html.parser")  # 지금까지는 html 문서 긁어옴
    for i in soup.find_all("div", class_="con_txt"):
        count += 1 
        f2.write( str(count) + ":\t" + re.sub('[\xa0\n\t\r]','', i.text)+'\n')

f2.close()              

■ 예제144. 웹스크롤링 실전2 (중앙일보사) 

  신문기사들 -----> 인공신경망 ----->  기사작성
  신문기사들 -----> 인공신경망 ----->  종목선정
  신문기사들 -----> 인공신경망 ----->  달러 매수/매도 시점
  신문기사들 -----> 인공신경망 ------>  기타 여러가지                              

예제1. 중앙일보사 홈페이지에서 인공지능으로 검색했을 때 나오는 url 을 
         가져오시오

https://news.joins.com/Search/JoongangNews?page=1&Keyword=%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5&SortType=New&SearchCategoryType=JoongangNews

예제2. 위의 url 에서 보이는 상세기사 url 이 있는 href 를 아래와 같이 
         출력하시오

https://news.joins.com/article/239470
https://news.joins.com/article/239479
https://news.joins.com/article/239476
https://news.joins.com/article/239481


답:
from  bs4  import  BeautifulSoup
import  urllib
import  re

list_url ="https://news.joins.com/Search/JoongangNews?page=1&Keyword=%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5&SortType=New&SearchCategoryType=JoongangNews"
url = urllib.request.Request(list_url)
f = urllib.request.urlopen(url).read().decode("utf-8")
soup = BeautifulSoup( f, "html.parser")

for   i  in  soup.find_all('h2', class_="headline mg"):
    for  k  in  i.find_all('a'):
        print( k.get("href") )
        
예제3.  위에서 출력되고 있는 상세기사 url 을 params 이라는 비어있는 
          리스트에 append 시키고 출력하시오 !

params =[]
for   i  in  soup.find_all('h2', class_="headline mg"):
    for  k  in  i.find_all('a'):
        params.append( k.get("href") )

print(params)

예제4. 위의 코드로 함수를 만들어서 아래와 같이 실행되게 하시오!

a = choo_article(3)
print(a)

예제5. 아래의 url의 본문 기사 텍스트를 긁어오기 위해 아래의 url 로 
         접속해서 tag 명과 classs 명을 알아내시오 ~

https://news.joins.com/article/24072601

답:  테그명은 div 이고 class 명이 article_body mg fs4 

예제6.  ebs 명의에서 사용했던 두번째 코드를 가져와서 위의 테그와 클래스
          이름을 수정해서 상세기사를 텍스트 파일로 저장되게하시오

def  choo_article(page):
    from  bs4  import  BeautifulSoup
    import  urllib
    import  re
    params =[]
    for  i  in  range(1,page+1):
        list_url ="https://news.joins.com/Search/JoongangNews?page="+str(i) +"&Keyword=%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5&SortType=New&SearchCategoryType=JoongangNews"
        url = urllib.request.Request(list_url)
        f = urllib.request.urlopen(url).read().decode("utf-8")
        soup = BeautifulSoup( f, "html.parser")

        for   i  in  soup.find_all('h2', class_="headline mg"):
            for  k  in  i.find_all('a'):
                params.append( k.get("href") )

    return params

a = choo_article(3)

f2 = open("c:\\data\\choongang1.txt", "w", encoding="utf8")
count = 0
url_list = choo_article(3)
for  i  in url_list: # 상세 url(특정게시글)을 하나씩 가져옵니다.
    url = urllib.request.Request(i)
    f = urllib.request.urlopen(url).read().decode("utf-8")
    soup=BeautifulSoup(f, "html.parser")  # 지금까지는 html 문서 긁어옴
    for i in soup.find_all("div", class_="article_body mg fs4"):
        count += 1 
        f2.write( str(count) + ":\t" + re.sub('[\xa0\n\t\r]','', i.text)+'\n')

f2.close()             


문제400. (오늘의 마지막 문제) 동아일보사에서 딥러닝으로 검색했을때 나오는 
             기사들을 스크롤링하는 파이썬코드를 작성하시오 !

머신러닝 : 의사결정트리의 기반 알고리즘 -> 정보획득량
웹스크로링:   ebs 명의 시청자 게시판 
                  중앙일보 웹스크롤링
                  동아일보 웹스크롤링 

오전 : 알고리즘 (버블정렬, 삽입정렬)
오후:  웹스크롤링

■  155. 필수 알고리즘3 (버블정렬)

ebs 영상을 먼저 보시겠습니다. 

버블정렬이란?   서로 인접한 두 요소의 크기를 서로 비교하여 순서에
                     맞지 않는 요소를 인접한 요소와 서로 교환하여 정렬
                     하는 정렬방법을 버블(bubble) 정렬 이라고 합니다. 

예제1.  아래의 a 리스트를 만들고 첫번째 요소와 두번째 요소의 순서를
          변경하시오 !

a = [ 10, 5, 20, 9, 8 ]

결과: [ 5, 10, 20, 9, 8 ]

temp = a[1]  # 1번째 요소를 temp 변수에 임시저장하고
a[1] = a[0]    # 1번째 요소를 0번째 요소로 변경한후에 
a[0] = temp  # 0번째 요소를 1번째 요소로 변경합니다.
print(a)

한줄로 구현하는 방법

a = [ 10, 5, 20, 9, 8 ]

a[0], a[1] = a[1], a[0]
print(a)

예제2. 이번에는 두숫자의 크기를 비교해서 두 자리가 교환되게 하시오 
          ( 0번째 자리와 1번째 자리만 비교하세요 )

a = [ 10, 5, 20, 9, 8 ]

답:
if  a[0] > a[1]:
    a[0], a[1] = a[1], a[0] 

print(a)

예제3. 위의 코드에 for loop 문을 넣어서 버블정렬하시오 !
         아래의 a 리스트로 구현하세요.

a=[5,4,3,2,1,8,7,10]

for i in range(len(a)-1):
    if a[i]>a[i+1]:
        a[i],a[i+1]=a[i+1],a[i]

print(a)

예제4.  예제3번 코드를 반복해서 즉 이중 for loop 문을 만들어서 
          완전히 아래와 같이 정렬되게하시오 ! 

a=[5,4,3,2,1,8,7,10]

결과: [ 1, 2, 3, 4, 5, 7, 8, 10 ]

답:
a = [5,4,3,2,1,8,7,10]
for j in range(len(a)):
    for i in range(len(a)-1):
        if a[i] > a[i+1]:
            a[i],a[i+1] = a[i+1],a[i]
print(a)

예제5. 위에서 구현한 버블정렬 코드를 함수로 아래와 같이 생성하시오 !

a = [5,4,3,2,1,8,7,10]

print( bubble_sort(a) )

결과: [ 1, 2, 3, 4, 5, 7, 8, 10 ]

답:
a = [5,4,3,2,1,8,7,10]

def bubble_sort(a):
    for j in range(len(a)):
        for i in range(len(a)-1):
            if a[i] > a[i+1]:
                a[i],a[i+1] = a[i+1],a[i]
    return a

print(bubble_sort(a))

예제6. 정렬이 다 되면 버블정렬 작업을 멈춰버리겠금 코드를 재작성하시오
         
a = [5,4,3,2,1,8,7,10]

def bubble_sort(a):
    for j in range(len(a)):                              45분까지 쉬세요 ~~~
        for i in range(len(a)-1):
            if a[i] > a[i+1]:
                a[i],a[i+1] = a[i+1],a[i]
    return a

print(bubble_sort(a))

답:
아래의 코드를 수행하면 a 리스트의 요소를 ascending 하게 정렬한 결과가
sorted(a) 이므로 지금 a2 와 sorted(a)는 서로 같지 않습니다. 그래서 
a2 != sorted(a) 이것은 true 입니다. 

a = [5,4,3,2,1,8,7,10]
a2 =[5,4,3,2,1,8,7,10]
a3 = [1,2,3,4,5,7,8,10]

a2 != sorted(a)


a = [5,4,3,2,1,8,7,10]

def bubble_sort(a):
    for j in range(len(a)-1):
        if a != sorted(a):    # 버블정렬중인 a 리스트와 sorted(a) 가 같지않다면 
            for i in range(j+1):  # 버블정렬을 수행합니다. 
                if a[i] > a[i+1]:
                    a[i],a[i+1] = a[i+1],a[i]
        else:                    # 그렇지 않다면 
            return a           # a 리스트를 리턴합니다. 
    return a

bubble_sort(a)

- 민석이 코드
def bubble_sort(x):
    a= len(x)                    #  a 리스트의 전체 요소의 갯수를 가져와라 
    for i in range(a):           # 그 요소의 갯수만큼 loop 문을 돌려라 
        for j in range(a - 1):   # 버블정렬해라 ~
            if x[j] < x[j + 1]:  #  앞의 요소가 뒤의 요소보다 작다면 
                continue         # 여기는 신경쓰지말고 그 다음을 계속 진행해라 ~
            else:
                x[j+1],x[j]= x[j],x[j+1]  # 버블 정렬해라 ~
            print(x)                
    return x

print(bubble_sort(a))

예제7. 아래의 리스트를 버블정렬하시오 !

a_n = ['d', 'a', 'k', 'c', 'b', 'm'] 

print(bubble_sort(a_n))

설명:  'a' < 'b'  는 True 로 나옵니다. 알파벳 a 보다 b 가 아스키 코드값이
        더 크기 때문입니다.  'a' > 'b' 는 false 로 나옵니다. 

■ 삽입정렬을 파이썬으로 구현하기 

ebs 영상을 먼저 보시겠습니다. 

예제1. 아래의 리스트에 숫자 1 다음에 4를 입력하시오 !  a.insert 를 사용
         하세요.

a = [ 4, 1, 5, 2, 3 ]  

답:
a.insert( a.index(1) +1,  4 )

예제2.  예제1 번의 결과가 아래와 같은데 여기서 맨 앞에 4를 지우시오 !

[4, 1, 4, 5, 2, 3]

a = [4, 1, 4, 5, 2, 3]
print(a)
del(a[0])
print(a)

[1, 4, 5, 2, 3]

예제3. 예제1번과 예제2번에서는 크기 비교하지 않고 교환했는데 
         이번에는 크기를 비교하고 첫번째 요소와 두번째요소가 자리가 
         삽입정렬로 교환되게하시오 !

a = [ 4, 1, 5, 2, 3 ] 

답:
a = [4,1,5,2,3]

if a[0] > a[1]:
    a.insert( a.index(a[1])+1 ,a[0] )
    a.pop(0)
a

설명:  pop 설명 

a = [4, 2, 3, 1 ]
a.pop(0) # 0번째 요소를 빼낸다.
print(a)
a.pop(0) # 0번째 요소를 빼낸다.
print(a)

예제4.  이번에는 loop 문을 사용해서 두개의 요소를 비교해서 삽입정렬이
          되게하시오 !  ( 카페에 올려주세요! )

a =  [4,1,5,2,3]

for i in range(0,len(a)-1):    
    if a[i]>a[i+1]:                       #앞의 요소가 뒤의 요소보다 크기가 크다면
        a.insert(a.index(i+1)+1,a[i]) # 뒤의 요소 다음에 앞의 요소를 넣어라 ~
        a.pop(i)                         # 앞의 요소를 리스트에서 제거해라 ~

print(a)

예제5.  그러면 이번에는 위의 삽입정렬과정이 완성되게 수행하시오 !

a = [5,4,3,2,1,8,7,10]

카페에 올려주시고  점심시간 문제 검사 받겠습니다.

점심시간 문제는 A 반은 카페에 올려주시고 
                      B 반은 라인검사 입니다.

a = [5, 4, 3, 2, 1, 8, 7, 10]
for i in range(len(a)-1):
    if a != sorted(a):                 #  a 리스트가 아직 정렬이 다 되지 않았다면
        for i in range(len(a)-1):     #  삽입정렬해라 ~
            if a[i] > a[i+1]:            # 앞의 요소가 뒤의 요소보다 크다면 
                a.insert(a.index(a[i+1])+1 ,a[i] ) # 뒤의 요소뒤에 앞의 요소를 입력하고
                a.pop(i)                 # 앞의 요소를 지워라 ~
    else:                                 # 그렇지 않고 다 정렬되었다면 
        break                           # 이제 멈춰라 ~
print(a)

■ 145. 파이썬에서 워드 클라우드 그리기 

카페 게시판에 파이썬으로 워드클라우드 그리기 파일 2개를 
다운로드 받으세요 ~~


■ 예제.  파이썬에서 워드 클라우드 그리기 

1. 아나콘다 프롬프트 창을 열고  wordcloud 패키지 설치

conda  install  wordcloud
 
   또는 

pip  install   wordcloud

2. c 드라이브 밑에 project 폴더를 생성 

3. project 폴더 밑에  4가지 파일을 둡니다.

   -  usa_im.png
   -  s_korea.png
   -  word.txt
   -  중앙일보 스크롤링했던 기사 파일 my_text21.txt 


# 텍스트마이닝 데이터 정제

from wordcloud import WordCloud, STOPWORDS  # 시각화, 데이터 정제를 위해 임폴트
import matplotlib.pyplot as plt  # 그래프 그리는 모듈
from os import path     #  os 에 있는 파일을 파이썬에서 인식하기 위해서
import re   #  데이터 정제를 위해서 필요한 모듈 
import numpy as np  
from PIL import Image  # 이미지 시각화를 위한 모듈 

# 워드 클라우드의 배경이 되는 이미지 모양을 결정
usa_mask = np.array(Image.open("c:/project/usa_im.png"))

# 워드 클라우드를 그릴 스크립트 이름을 물어봅니다. 
script = input( 'input file name : ')

# 워드 클라우드 그림이 저장될 작업 디렉토리를 설정 
d = path.dirname("c:/project/")

# 기사 스크립트와 os 의 위치를 연결하여 utf8로 인코딩해서 한글 텍스트를
# text 변수로 리턴한다.
text = open(path.join(d, "%s"%script), mode="r", encoding="utf-8").read()

# 너무 공통적으로 자주 나오는 단어들을 제거하기 위한 작업  
file = open('c:/project/word.txt', 'r', encoding = 'utf-8')
word = file.read().split(' ')   # 어절별로 분리함
for i in word:
    text = re.sub(i,'',text)      # 기사에서 word 에 있는 단어들을 전부 null 로 변경한다. 

# 워드 클라우드를 그린다. 
wordcloud = WordCloud(font_path='C://Windows//Fonts//gulim', # 글씨체
                      stopwords=STOPWORDS,   # 마침표, 느낌표,싱글 쿼테이션 등을 정제
                      max_words=1000, # 워드 클라우드에 그릴 최대 단어갯수
                      background_color='white', # 배경색깔
                      max_font_size = 100, # 최대 글씨 크기 
                      min_font_size = 1, # 최소 글씨 
                      mask = usa_mask, # 배경 모양 
                      colormap='jet').generate(text).to_file('c:/project/yys_cloud.png')
                  # c 드라이브 밑에 project 폴더 밑에 생성되는 워드 클라우드 이미지 이름
  
plt.figure(figsize=(15,15))            # 워드 클라우드의 가로 세로 사이즈
plt.imshow(wordcloud, interpolation='bilinear')  # 글씨가 퍼지는 스타일 
plt.axis("off")

문제401.  어제 딥러닝으로 동아일보에서 조회했을 때 받은 텍스트 파일을 워드 
              클라우드로 시각화 하시오 !


1. 에러나는 학생들은 지금부터 봐줄께요
2. 다 됬으면 45분까지 쉬세요 ~~~

※ 텍스트 데이터 분석(마이닝) ?  웹스크롤링 ----> 시각화(워드 클라우드) 빈도 분석 
                                          웹스크롤링 -----> 시각화(워드 클라우드) 감정 분석 
                                          웹스크롤링 -----> 딥러닝(문서요약)

■ 웹스크롤링 -----> 시각화(워드 클라우드) 감정 분석 하기

예제1. 영화 라라랜드 네이버 영화리뷰 스크롤링 데이터를 data 폴더 밑에
         가져다 둡니다.


예제2. sample6_laland_review.txt 를 파이썬으로 불러옵니다. 

lala = open("d:\\data\\sample6_laland_review.txt", encoding="UTF8")
lala2 = lala.readlines()  # 리스트에 한행씩 요소로 담기게 됩니다. 
lala2

예제3. 위의 리스트의 요소중에서 평가 점수만 출력하시오 !

10점 중 10

lala = open("d:\\data\\sample6_laland_review.txt", encoding="UTF8")
lala2 = lala.readlines()  # 리스트에 한행씩 요소로 담기게 됩니다. 

for  i  in  lala2:
    print( int(i[6:8]) )

예제4. 라라랜드 평가글들중에서 평점이 6점 이상인 글들만 출력하시오 !

lala = open("d:\\data\\sample6_laland_review.txt", encoding="UTF8")
lala2 = lala.readlines()  # 리스트에 한행씩 요소로 담기게 됩니다. 

for  i  in  lala2:
    if  int(i[6:8]) >= 6:
        print( i, end= "" )

예제5. 라라랜드 평가글중에 평점이 6점 이상이면 pos 라는 비어있는 
         리스트에 해당 평가글을 append 하고 6점 미만이면 nag 라는
         비어있는 리스트에 평가글이 append 되게 하시오 

lala = open("d:\\data\\sample6_laland_review.txt", encoding="UTF8")
lala2 = lala.readlines()  # 리스트에 한행씩 요소로 담기게 됩니다. 
pos=[]
nag=[]
for  i  in  lala2:               # 네이버 라라랜드 영화리뷰를 한행씩 가져오는데
    if  int(i[6:8]) >= 6:       # 평점이 6점 이상이면 
        pos.append( i[8:] )   # 게시글을 pos 리스트에 append 되게하고 
    else:                         # 그렇지 않으면 
        nag.append( i[8:] )   # nag 리스트에 append 되게해라 ~

■ 예제154.  이진탐색 

* 탐색 방법 2가지 ?

1. 순차 탐색?  주어진 데이터를 처음부터 차례데로 비교하면서 찾는 방법
  
2. 이진 탐색? 정렬된 데이터를 좌우 둘로 나눠서 원하는 값의 탐색범위를
                  좁혀가며 찾는 방법

예제1.  순차 탐색 구현하기 

아래의 a 리스트에서 순차탐색으로 숫자 3을 조회하시오 !  

a = [ 15, 11, 1, 3, 8 ] 

결과:  a 리스트에 숫자 3이 있습니다. 

a = [ 15, 11, 1, 3, 8 ] 
for  i  in  a:
    if i == 3:
        print('숫자 3이 있습니다')
        break
else:
    print('숫자 3이 없습니다')

예제2.  위의 코드를 수정해서 숫자를 물어보게하고 숫자를 입력하면
          해당 숫자가 있는지 없는지 출력되게하시오 !

b = int( input('숫자를 입력하세요 ~') )
a = [ 15, 11, 1, 3, 8 ] 
for  i  in  a:
    if i == b:
        print('숫자', b, '이 있습니다')
        break
else:
    print('숫자',  b, '이 없습니다')

예제3. 이진 탐색을 구현하기 위해서 아래의 a 리스트를 만들고 아래의 
         a  리스트에서 중앙값을 출력하시오 !

a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]

import  numpy  as  np
a_n = np.array(a)
print (np.median(a_n) )

예제4.  아래의 a 리스트에서 첫번째 숫자부터 중앙값에 해당하는 숫자까지
          만 검색하시오 !

a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]

결과:  [ 1, 7, 11, 12, 14, 23, 33, 47 ]

import  numpy  as  np
a_n = np.array(a)
a_m = np.median(a_n)
print ( a [ :  a.index(a_m)+1] ) 

예제5. 아래의 a 리스트에서 중앙값까지의 데이터를 다 지우고 아래의 결과만
         남게 하시오 !

a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]

결과: [ 51, 64, 67, 77, 139, 672, 871 ]

import  numpy  as  np
a_n = np.array(a)
a_m = np.median(a_n)
del ( a [ :  a.index(a_m)+1] ) 
print(a)

예제6. 아래의 리스트에서 중앙값을 출력하시오 !

[ 51, 64, 67, 77, 139, 672, 871 ]

a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]
import  numpy  as  np
a_n = np.array(a)
a_m = np.median(a_n)
del ( a [ :  a.index(a_m)+1] ) 
print( np.median(a) )

예제7. 아래의 남아있는 리스트에서 중앙값 77을 포함해서 뒤의 요소들을 
         지우고 아래의 결과만 남게하시오 !

[ 51, 64, 67, 77, 139, 672, 871 ]

결과: [ 51, 64, 67 ]

a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]
import  numpy  as  np
a_n = np.array(a)
a_m = np.median(a_n)
del ( a [ :  a.index(a_m)+1] ) 
a_m2= np.median(a) 
del(  a[ a.index(a_m2) : ] )
print(a)                                     

예제8.  예제7번을 다시 작성하는데 아래에 남아있는 리스트의 중앙값이
          우리가 검색하고자 하는 67보다 크다면 중앙값 이후의 요소를
          지우고 그렇지 않다면 중앙값 이전의 요소를 지우시오 
          (중앙값 포함해서 지워져야합니다.)

[ 51, 64, 67, 77, 139, 672, 871 ]

결과: [ 51, 64, 67 ] 

a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]
import  numpy  as  np
a_n = np.array(a)
a_m = np.median(a_n)
del ( a [ :  a.index(a_m)+1] ) 
a_m2= np.median(a) 
if  a_m2 > 67:
    del( a[ a.index(a_m2) : ] )
else:
    del ( a[ : a.index(a_m2)+1] )
print(a)

예제9.  ebs 에 나온 영상데로 이진탐색을 구현하시오 (답글로 올려주세요)

a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]

a 리스트에서 검색할 숫자를 입력하세요 ~  67

67이 검색되었습니다.

a 리스트에서 검색할 숫자를 입력하세요 ~  68

68은 a 리스트에 없습니다. 

num = int( input('숫자를 입력하시오 !') ) 
a = [ 1, 7, 11, 12, 14, 23, 33, 47, 51, 64, 67, 77, 139, 672, 871 ]

for  i  in  range(1,5):    # 1, 2, 3, 4
    a_n = np.array(a)    # a 리스트를 numpy array 로 변환
    a_m = np.median(a_n)  # a 리스트에서 중앙값을 추출  47
    if  num  in  a :       # 만약에 a리스트 안에 있으면 아래의 실행문을 실행
        if  num == a_m: #  67 = [67] 이라면 아래의 문장을 실행하면서 
            print( num, '은', i, '번에 나왔습니다.')
            break           # break 해라 
        elif  num < a_m :  # 검색하고자 하는 숫자가 중앙값보다 작다면
            del( a[a.index(a_m) : ]) # 중앙값부터 끝가지의 요소를 a리스트에서
            print(a)                    # 지우고 출력해라 ~
        else:                    # 내가 검색하고자 하는 숫자가 중앙값보다 크다면
            del( a[  :a.index(a_m) +1 ] ) # 처음부터 중앙값까지의 요소를 a 
            print(a)             # 리스트에서 지우고 프린트해라 
    else:
        print ( num, '은 리스트에 없습니다')
        break

예제10. 위의 코드를 binary_search 라는 함수로 만들어서 아래와 같이
          실행되게하시오 !  답글로 올려주세요

binary_search()

검색할 숫자를 입력하세요 ~  67

67은 a 리스트 안에 있습니다. 

검색할 숫자를 입력하세요 ~  68

68은 a 리스트 안에 없습니다.              45분까지 쉬세요 ~~

■ 예제157. 재귀알고리즘

 재귀 알고리즘은 처음에는 이해하기가 어려운 알고리즘이지만
 많이 연습을 해서 잘 알아두면 loop 문을 최소화 하면서 코드를  
 간단하게 작성할 수 있는 알고리즘 입니다. 

1. 재귀함수란 ?  반복문 + 스택구조가 결합된 함수 입니다.
                                   ↓
                                후입선출(나중에 들어간게 먼저 나오는 구조)
                                   ↓
                                 관련 동영상

2. 함수내에서 다른 함수를 호출하는 예제 

def  hap(a,b):
    return (a+b)

def gob(a,b):
    return  (a*b)

def hap_gob(a,b):
    k = hap(a,b)
    m = gob(a,b)
    return  k + m

print ( hap_gob(2,3) )

예제1. 숫자를 입력하면 1부터 해당 숫자까지의 합을 출력하는 함수를
         아래와 같이 생성하시오 !

print (add_func(5) )

결과: 15 

def  add_func(n):
    cnt = 0
    for  i  in  range(1, n+1):
        cnt = cnt + i
    return  cnt

print (add_func(5) )

예제2. 위의 add_func 함수를 재귀함수로 구현하시오 !
         (재귀함수로 구현하게 되면 loop 문을 사용하지 않아도 됩니다.)

def  add_func(n):
    if  n == 0:
        return  0
    else:
        return  n + add_func(n-1)

print ( add_func(5) )
                ↓
                 5 + add_func(4) 
                            ↓
                           4 + add_func(3)
                                    ↓
                                    3 + add_func(2)
                                             ↓
                                             2 + add_func(1)
                                                      ↓
                                                      1 + add_func(0)

예제3. factorial 함수를 생성하시오 (재귀함수가 아닌 그냥 함수로 생성하세요)

 factorial(5)

  5x4x3x2x1 = 120

결과:  120 

def factorial(n):
    cnt = 1
    for i in range(1,n+1):
        cnt *= i
    return(cnt)

print(factorial(5))

예제4.  factorial 함수를 재귀함수로 생성하시오 !

참고 코드:

def  factorial(n):
    if  n == 1:
        return  1
    else:
        return  n * factoria(n-1)
                    
factorial(5)
           ↓ 
           5 * factorial(4)
                     ↓ 
                      4 *  factorial(3)
                                ↓ 
                                3 *   factorial(2)
                                          ↓
                                         2 *  factorial(1)

예제5. 오라클의 power 함수를 파이썬으로 구현하시오 ! (재귀함수로 하지말고)

SQL>  select  power(2,3) from  dual;         결과:  8

print ( power(2,3)  )    #  8  

def  power(n1, n2):
    cnt = 1
    for  i  in  range(1, n2+1):
        cnt = cnt * n1
    return  cnt 

print ( power(2,3) )

예제6.  이번에는 power 함수를 재귀함수로 구현하세요(카페에 올려주세요)

def power(x,n):
    if n==0:
        return 1
    else:
        return x*power(x,n-1)

print( power(2,3)  )
    
예제7. 구구단 2단을 아래와 같이 출력하는 함수를 생성하시오(재귀함수x)

multi_table_2dan(9)

 2 x 1 = 2
 2 x 2 = 4
 2 x 3 = 6
    :
    :
 2 x 9 = 18

def  multi_table_2dan(n):
    for  i  in  range(1, n+1):
        print ( '2 x  ' , i, '=', 2*i )

multi_table_2dan(9)

예제8. 이번에는 재귀함수로 구구단 2단을 출력하세요 ! (카페에 올려주세요)

def multi_table(num,x):
    if x == 10:
        return
    else:
        print(num, '*', x, '=', num * x)
        return multi_table(num,x+1)


print(multi_table(2,1))


def multi_table(num,x):
    if x == 0:
        return
    else:
        print(num, '*', 10-x, '=', num * (10-x))
        return multi_table(num,x-1)


print(multi_table(2,9))

예제9.  최대공약수를 출력하는 함수를 아래와 같이 생성하시오(재귀함수x)

print( gcd(16, 24)  )

결과: 8 

def   gcd(num1, num2):
    for  i  in   range(min(num1,num2), 0, -1):
        if  num1 % i ==0  and  num2 % i == 0:
            return  i 
    return   1

print( gcd(16, 24)  )

예제10. 최대공약수를 출력하는 함수를 재귀함수로 구현하세요
          (카페에 올려주세요)

def gcd(x,y):  
    if y== 0:
        return x
    return gcd(y, x%y)

print(gcd(16, 24)) #  x=16, y=24
              ↓
                gcd( 24, 16%24)   # x = 24,  y = 16
                        ↓
                       gcd( 16 ,  24%16 )  # x=16, y= 8
                            ↓
                         gcd(8, 16%8)  #  x =8, y= 0
                              ↓
                            gcd( 8, 0 )
                                ↓
                             if y== 0:
                                  return x
                            
예제11.  재귀 함수의 끝판왕인 하노이탑 구현을 생각해야할 문제에 
           올렸으니 나중에 시간을 가지고 한번 도전해보세요 ~


■ 예제158. LRU 알고리즘 
                 ↓                                     
       Least  Recent  Used 

 LRU 알고리즘이란 Oracle  database 의 메모리 관리를 효율적으로
 하기 위해 고안된 대표적인 알고리즘으로 최신 데이터를 메모리에
 유지시키고 오래된 데이터를 메모리에서 내보내게하는 알고리즘

 select  sal
   from  emp
   where ename='SCOTT';

  메모리에서 조회하게 되면 1초가 걸린다. ----> cache  hit
  메모리에 없어서 디스크에서 조회하면 5초 걸린다.---->  cache miss

cache hit 를 많이 할 수 있도록 메모리 관리를 하는 알고리즘? LRU 알고리즘 

select sal
 from emp
 where ename='SCOTT';

예제1. 아래의 리스트를 받아서 아래의 결과를 출력하시오 !

[“Jeju”, “Pangyo”, “Seoul”, “NewYork” ]

결과: ['jeju', 'pangyo', 'seoul', 'newyork']

답:
cities = ["Jeju", "Pangyo", "Seoul", "NewYork" ]
city=[]
for  i  in  cities:
    city.append(i.lower())
print(city)

만약에 한줄로 간추려서 작성하고 싶다면(comprehension 코드)

cities = ["Jeju", "Pangyo", "Seoul", "NewYork" ]
city = [ i.lower()  for  i  in  cities ]
print(city)

예제2. 메모리(cache) 를 아래와 같이 만드시오 ! (캐쉬사이즈 4 )

결과:  [ None, None, None, None ] 

cache = [ None for i  in range(1,5) ] 

예제3.  아래와 같이 cache 에 data 를 올리세요 ~

결과: [ None, None, None, 'jeju' ] 

cache = [ None for i  in range(1,5) ] 

cache.append('jeju')
print(cache)
del cache[0]
print (cache)

예제4. 아래와 같이 cache 에 data 를 올리세요 ~

결과: [ None, None, 'jeju', 'pangyo' ] 

cache = [ None for i  in range(1,5) ] 

cache.append('jeju')
del cache[0]
cache.append('pangyo')
del cache[0]
print (cache)

예제5. 위에서 만든 코드를 가지고 아래의 함수를 생성하시오 !
         ( 지정된 캐쉬 사이즈에 cities 의 내용을 소문자로 변경해서 
            append 시키고 append 된 결과를 리턴하는 함수)

cities = ["Jeju", "Pangyo",  "NewYork", "new york"]

print ( cacheProcess( cities, 4 )  )

결과: ['jeju', 'pangyo', 'newyork', 'newyork' ]

def  cacheProcess( cities, cachesize ):
    city = [ i.lower()  for  i  in  cities ]  # 도시이름을 다 소문자로 변경
    cache = [ None  for  i  in  range(1, cachesize + 1) ] # cache 생성
    for  i  in  range(0, len(city)):  # 메모리에 리스트에 있는 데이터를
        cache.append( city[i] )     # append 시키면서
        del  cache[0]                 # 오래된 data 내보낸다. 
    return  cache

예제6. 위의 함수의 결과가 cache 의 결과가 아니라 수행시간이
         되게하시오 !   (카페에 올려주세요)

cache  miss 면 5초
cache  hit   면 1초

cities = ["Jeju", "Pangyo",  "NewYork", "newyork"]
print( cacheProcess( cities, 4 ) ) 

결과: 16 


def cacheProcess(ls, num):
    city = [i.lower() for i in ls]              # 도시이름을 소문자로 다 변경합니다.
    cache = [None for i in range(num)] #  메모리를 구성합니다. 
    cnt = 0                                     #  총수행시간을 담을 변수 선언 
    for i in range(len(ls)):                    #  메모리에 데이터를 올리는데
        if city[i] in cache:                     #  메모리에 데이터가 있으면
            cnt += 1                           #  1초 증가시키고
        else:                                     # 없으면
            cnt += 5                           # 5초 증가 시킵니다.
        cache.append(city[i])                # 메모리에 데이터 올리고
        del cache[0]                           # 오래된 데이터를 지웁니다. 
    return cnt

cities = ["Jeju", "Pangyo", "NewYork", "newyork"]
print(cacheProcess(cities,4))


■ 예제160.  필수 알고리즘8 (비밀지도)

문제.  아래의 n 값과 십진수 2개의 리스트를 받아서 아래의 출력결과를 출력하시오

n = 5
arr1 = [ 9, 20, 28, 18, 11]
arr2 = [ 30, 1, 21, 17, 28]

secretmap( arr1, arr2, n )

출력: ["#####","# # #","### #", "#####"] 

문제를 해결하는 방법(큰 문제를 작은 문제로 나눈다)

1. 십진수를 이진수 변환한다
2. 이진수를  # 과 공백으로 나타낸다.
3. # 과 공백으로 된 2개의 지도를 합친다. 
4. 함수로 생성해서 코드를 완성 시킨다. 

예제1. 숫자 9를 이진수로 변환하시오 !

결과:  0b1001

print( bin(9) )

예제2. 위의 결과에서 0b 는 안나오고 1001 만 출력되게 하시오 !

결과: 1001 

print ( bin(9)[2:] )

예제3.  숫자 30의 이진수를 아래와 같이 출력하시오 !

결과:  11110 

print ( bin(30)[2:] )

예제4. 아래와 같이 출력되는 change 함수를 생성하시오 !

print( change(30) )

결과: 11110

def  change(num):
    return  bin(num)[2: ]

print( change(30) )

또는 

def  change(num):
    return  format(num, 'b')

print( change(30) )

예제5.  rjust 함수를 이용해서 1001 을 5자리로 출력하고 나머지 자리에
          숫자 0 을 채워 넣으시오 !

print(  '1001'.rjust(5,'0')   )  


 전체 5자리를 잡고 1001을 오른쪽에 채워넣는데 나머지 자리에
 0 을 채워넣어라 ~

예제6. 위의 change 함수를 수정하는데 아래와 같이 십진수 9를 
         넣고 실행하면 아래의 결과가 출력되게 하시오 !

print( change(9, 5) ) 

결과:    01001   

def  change( num, n):
    return  format( num,'b').rjust(n,'0')

print ( change(9,5 ) ) 

print ( change(9,5),  change(30,5)  )

예제7. 카카오 문제의 예제를 가지고 아래의 결과를 출력하시오 !
         (카페에 올려주세요 ~~) 
n = 5
arr1 = [ 9, 20, 28, 18, 11]
arr2 = [ 30, 1, 21, 17, 28 ]

결과:
01001 11110            점심시간 문제:  백화점 주말 방문이 많은 성별은?
10100 00001                 A 반은 라인검사
11100 10101                 B 반은 카페에 올려주세요 ~
10010 10001
01011 11100

arr1 = [9,20,28,18,11]
arr2 = [30,1,21,17,28]

def change(num,length):
    return format(num,'b').rjust(length,'0')

n = 5
for i,j in zip(arr1,arr2):
    print(change(i,n),change(j,n))

예제8.  아래의 리스트에서 숫자 0 은 공백(' ') 으로 출력되게하고 
          숫자 1은 # 으로 출력되게하시오 !

a =  [ 1,0,1,0,1]

#결과 : ['#', '  ', '#','  ', '#' ]

b =[]
for  i  in  a:
    if  i == 1:
        b.append('#')
    else:
        b.append(' ')
print(b)

예제9.  아래의 두개의 리스트를 받아서 아래의 결과를 출력하시오 !

a1 = [ 1, 0, 0, 1, 1 ]
a2 = [ 0, 0, 1, 0, 1 ]

결과 : [ '#', ' ', '#', '#', '#' ]

result= []
for  v1, v2  in  zip(a1, a2):     # a1 과 a2 리스트의 요소를 동시에 읽어오는데
    if   v1  or  v2:                #  v1 과 v2 둘중에 하나가 어떤거라도 1이라면 
        result.append('#')        #  이 문장을 실행합니다.
    else:                            # 그렇지 않다면 즉 둘다 0 이라면
        result.append(' ')        #  이 문장을 실행합니다. 
print(result)

예제10. [ '#', ' ', '#', '#', '#' ] 를  '# ####' 게 출력하시오 !

''.join(result)

예제11. 아래의 리스트와 n 값을 받아서 아래의 결과를 출력하는 함수를
         만드시오!  ( 카페에 올려주세요 ~)

n=5
arr1=[9, 20, 28, 18, 11]
arr2=[30, 1, 21, 17, 28]

print( secretmap(arr1, arr2, n ) )

결과:  ['#####', '# # #', '### #', '#  ##', '#####']













                                                                         











■ 예제 150. 파이썬과 mySQL 연동 

예제1.   mySQL 을 설치합니다.

예제2.  월급이 3000 이상인 사원들의 이름과 월급을 출력하시오 !

select ename, sal
 from  emp
where sal >= 3000;

예제3. 직업이 SALESMAN 인 사원들의 이름과 월급과 직업을 
         출력하는데 월급이 높은 사원부터 출력하시오 !

select ename, sal, job
 from  emp
where job='salesman'
order by sal desc;

※ 오라클과는 다르게 기본 셋팅이 데이터의 대소문자를 구분하지 않는데
   대소문자를 구분하고 싶다면 셋팅설정을 변경해줘야합니다.

예제4.  직업, 직업별 토탈월급을 출력하는데 직업별 토탈월급이 5000
          이상인것만 출력하고 직업별 토탈월급이 높은것부터 출력하시오 !

select job, sum(sal)
 from emp
 group by job
 having sum(sal) >= 5000
 order by 2 desc;

※ mySQL 도 Oracle 처럼 having 절이 지원됩니다.

예제5.  emp 와 dept 테이블 서로 조인해서 이름과 부서위치를 출력하시오 !

1. Oracle 조인 문법

select  e.ename, d.loc
  from  emp  e,  dept  d
  where  e.deptno = d.deptno ;

2. 1999 Ansi 조인문법 

select  e.ename,  d.loc
  from  emp  e  join   dept   d
  on  ( e.deptno = d.deptno); 

※ mySQL 에서 Oracle 조인문법 , 1999 ansi 조인문법 둘 다 가능합니다.

예제6.  JONES 보다 더 많은 월급을 받는 사원들의 이름과 월급을 출력
         하시오 ! 

select  ename, sal
  from  emp
  where  sal > ( select  sal
                        from  emp
                        where  ename='JONES');

예제7.  이름, 월급, 월급에 대한 순위를 출력하시오 ! 

 select  ename, sal, rank()  over ( order  by sal desc) 순위
  from  emp; 

 ※ Oracle 과  mySQL 의 함수 비교 

     Oracle                 vs   mySQL
1.     nvl                         ifnull
2.     sysdate                  sysdate()
3.    months_between      period_add
4.   decode                        if
5.    rollup                      with  rollup
6.    listagg                    group_concat

예제8.  이름, 커미션을 출력하는데 커미션이 null 인 사람들은 0 으로 
          출력하시오 !

select  ename, ifnull( comm, 0)
  from  emp;

예제9.  오늘 날짜를 출력하세요 !

select  sysdate();

※ Oracle 과는 다르게 dual 테이블이 없습니다.

예제10.  부서번호, 부서번호별 토탈월급을 출력하는데 맨 아래에 전체 
            토탈월급도 출력하시오 !

select  deptno,  sum(sal)
  from  emp
  group  by  deptno  with  rollup;

※ 이제부터가 아주 중요하니 잘 들어주세요 ~~

예제11.  scott 의 월급을 0 으로 변경하세요 !

update  emp
 set  sal = 0
 where  ename='scott';

select ename, sal
 from emp
 where ename='scott';

rollback;

※ mySQL 은 오라클과는 다르게 기본 자동커밋이 활성화 되어있습니다
  자동 커밋되어버려서 rollback 을 할 수 없습니다.
  mySQL 사용자들이 많이 하는 실수중에 하나이니 주의하세요 !

예제12. 자동 커밋이 활성화 되어져 있는지 확인해보세요 ~

select @@autocommit;

※ 숫자 1이면 autocommit 이 켜있는것입니다. 

예제13. 자동 커밋 기능을 끄세요 ~

set  autocommit = FALSE;

select @@autocommit;

※ mySQL 을 켰으면 제일 먼저 확인해야하는것이 자동 커밋이 활성화
   되어져있는지 확인하는게 아주 중요합니다. !!!!!!!!
예제14.  오라클의 listagg 함수와 같은 기능인 group_concat 을 이용해서
           부서번호, 부서번호별로 속한 사원들의 이름을 가로로 출력하시오

select  deptno,  group_concat(ename)
  from  emp
  group  by  deptno;

예제15. mySQL 과 파이썬을 연동해서 mySQL 의 emp 테이블을 
          파이썬에서 출력하시오 !

1. 아나콘다 프롬프트 창을 열고 pymysql 을 설치하세요

conda  install  pymysql 

2. 주피터 노트북에서 아래와 같이 코딩하세요

import  pymysql
import  pandas  as  pd

conn = pymysql.connect( host="localhost", user="root", password="1234",
                                   db="orcl", charset="utf8")
cursors = conn.cursor()        # mySQL 에 접속한 후 생성된 메모리 이름을
sql = "select * from emp"    # cursor 라고 합니다. 
cursors.execute(sql)         # sql 문장을 실행해서 cursor 메모리에 담습니다.
rows = cursors.fetchall()   # 메모리에 있는 결과를 rows 에 넣습니다.

colname = cursors.description
col = []
for  i  in  colname:
    col.append( i[0].lower() )

emp = pd.DataFrame( rows, columns=col)
print(emp)                 

예제16.  직업, 직업별 토탈월급을 출력하시오 !(판다스로 하세요)

emp.groupby('job')['sal'].sum().reset_index()

예제17. 위의 결과를 막대그래프로 그리시오 !

result=emp.groupby('job')['sal'].sum().reset_index()

# result.index=list(result['job'].values)
result.plot( kind='bar', color='red', x='job')

예제18. 부서번호, 부서번호별 토탈월급을 막대그래프로 시각화 하시오!

result=emp.groupby('deptno')['sal'].sum().reset_index()

result.plot( kind='bar', color='green', x='deptno', ylim=(1, 9000))

※ help 사용법 

import  pandas  as  pd 
help(pd.DataFrame.plot)

예제19.  입사한 년도4자리, 입사한 년도별 평균월급을 출력하시오 !

emp['hire_year'] =emp.hiredate.apply(lambda  x: x.year) # 년도만 추출
emp
emp.groupby('hire_year')['sal'].mean().reset_index()

예제20.  위의 결과를 막대그래프로 그리시오 !

emp['hire_year'] =emp.hiredate.apply(lambda  x: x.year) # 년도만 추출
emp
result =emp.groupby('hire_year')['sal'].mean().reset_index()
result.plot(kind='bar', color='red', x=hire_year)

예제21.  mySQL 에서 입사한 년도가 1980년도에 입사한 사원들의 월급을
           전부 200으로 변경하고 commit  하세요 !

select date_format(hiredate,'%Y')
 from emp;

update  emp
set sal = 200
where date_format(hiredate,'%Y')='1980';

commit;


■ 예제150. 이미지를 숫자로 변환하는 방법 ( 폐사진 )

 딥러닝 수업을 할 때 이미지를 인공신경망에 넣어서 학습을 시키는데
 인공신경망에 사진을 넣을 때 숫자로 변환을 해서 넣어야합니다.

 사진 --------------------> 인공지능 ----------------->  폐결절
                                                                      정상폐
                                                                       폐암
                                                                         :
                                                                7~10가지 분류로 판정 

예제1. c 드라이브 밑에 images 라는 폴더를 만들고 거기 폐사진 20장을
         넣어둡니다.


예제2. c 드라이브 밑에 images 라는 폴더에 있는 사진들의 이름을 
         불러오는 함수를 생성합니다.

import   os
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    return  file_list 

print( image_load(test_image) ) 

예제3.  위의 결과에서 숫자만 나오게 함수의 코드를 수정하시오 

결과: [ '1', '10', '11', '12', .................................. ]
import  re
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(a)
    return  file_name

print( image_load(test_image) ) 

예제4. 위의 결과를 아래와 같이 완전히 숫자로 출력되게 하시오 !

결과: [ 1, 10, 11, 12, 13, ................................  ] 

import  re
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(int(a))
    return  file_name

print( image_load(test_image) ) 

예제5. 출력되고있는 숫자 ascending 하게 정렬되게 하시오 !

결과: [ 1, 2, 3, 4, 5, ................................., 20 ]

import  re
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(int(a))
        file_name.sort()
    return  file_name

print( image_load(test_image) ) 

예제6.  위에서 출력되고 있는 숫자에 확장자 .png 를 붙여서 아래와 같이
          출력되겠금 함수를 수정하시오 !

['1.png', '2.png', '3.png', ..................  , '20.png' ]

import os
import  re
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(int(a))
        file_name.sort()
    
    file_res=[]
    for  i  in  file_name:
        file_res.append(  str(i) + '.png')    
    return  file_res

print( image_load(test_image) ) 

예제7. 위의 결과를 아래와 같이 경로도 붙어서 출력되게하시오 

['c:\\images\\1.png', 'c:\\images\\2.png', 'c:\\images\\3.png',............]

답: 
import os
import  re
test_image = 'c:\\images'

print( image_load(test_image) ) 

답:
import os
import  re
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(int(a))
        file_name.sort()
    
    file_res=[]
    for  i  in  file_name:
        file_res.append( path + '\\' +str(i) + '.png')    
    return  file_res

예제8. 사진 이미지를 숫자로 변환하기 위하여 필요한 파이썬 모듈을 설치하시오

아나콘다 프롬프트 창을 엽니다.

conda  install  opencv

위의 명령어로 했을때 혹시 에러가 나면 아래와 같이 하세요 !

pip   install   opencv-python

opencv 모듈은 이미지를 파이썬에서 숫자로 변환하고 다양한 이미지 처리를
할 수 있게 해주는 기술을 제공해주는 모듈

예제9.  opencv 를 이용해서 폐사진을 숫자로 변환하시오 !

import os
import  re
import  cv2  # opencv 모듈을 임폴트 하겠다.
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(int(a))
        file_name.sort()
    
    file_res=[]
    for  i  in  file_name:
        file_res.append( path + '\\' +str(i) + '.png')    
     
    image = [] 
    for  i  in  file_res:
        img = cv2.imread(i)  # 이미지를 숫자로 변환하는 코드 
        image.append(img)
    return   image

print( image_load(test_image) ) 

예제10.  위에서 출력되고 있는 리스트를 numpy  array 리스트로 출력되게하시오 !

import os
import  re
import  cv2  # opencv 모듈을 임폴트 하겠다.
import  numpy  as  np
test_image = 'c:\\images'

def  image_load(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(int(a))
        file_name.sort()
    
    file_res=[]
    for  i  in  file_name:
        file_res.append( path + '\\' +str(i) + '.png')    
     
    image = [] 
    for  i  in  file_res:
        img = cv2.imread(i)  # 이미지를 숫자로 변환하는 코드 
        image.append(img)

    return   np.array(image)

print( image_load(test_image) ) 


예제11.  위의 함수를 모듈로 만들어서 아래와 같이 실행될 수 있도록 하시오 !

import   yys_research

test_image = 'c:\\images'

yys_research.image_load(test_image) 

45분까지 쉬세요 ~~

■예제152.  이미지를 숫자로 변환하는 방법 (샌드위치)


예제1. 샌드위치 사진을  numpy array 형태의 숫자로 변경하겠금 image_load2 라는
         함수를 생성하시오 !

test_image = 'c:\\images2'

print ( image_load2(test_image) )


1_google.jpg

import os
import  re
import  cv2  # opencv 모듈을 임폴트 하겠다.
import  numpy  as  np
test_image = 'c:\\images2'

def  image_load2(path):
    file_list = os.listdir(path)  # 해당 디렉토리의 파일의 이름을 추출
    file_name =[ ]
    for  i  in   file_list:
        a = re.sub('[^0-9]', '', i)  # 숫자가 아닌것은 null 처리해라 ~
        file_name.append(int(a))
        file_name.sort()
    
    file_res=[]
    for  i  in  file_name:
        file_res.append( path + '\\' +str(i) + '_google.jpg')    
     
    image = [] 
    for  i  in  file_res:
        img = cv2.imread(i)  # 이미지를 숫자로 변환하는 코드 
        image.append(img)

    return   np.array(image)

print( image_load2(test_image) ) 

문제406. (오늘의 마지막 문제)  보스톤 하우징 데이터를 분석하는데
            찰스강에 인접한 집일 수록 집값이 더 높은지 알아내시오 !

 5시 신호 보냈습니다. 나머지 시간은 자유롭게 자습 또는 스터디하세요 ~
 6시 신호 보냈습니다. ~~~



■ 예제161. 통계 마지막 문제 (도박사 이야기)

※ 원본은 통계학(출판사 성안당) 책 78 페이지

해외여행중 어느 뒷골목에서 동전으로 내기를 하는 도박사를 만났다.
앞면이 나오면 당신에게 1달러, 뒷면이 나오면 나(도박사)에게 1달러를 
주라고 내기를 도박사가 나에게 걸어왔다.
그런데 동전에 부정이 있는 듯해서 실제로 알아봤더니 8회중 7회는
뒷면이 나왔다.
이 동전은 앞면과 뒷면이 나올 확률이 다르지 않느냐? 고 했더니
도박사는 아무렇지도 않게 "그런게 아니고 우연"이라고 했다.

어떻게 반론하면 좋을까?

예제1.  동전 하나를 10000번 던져서 앞면이 나오는 횟수를 출력하시오
           (힌트: random.randint(0,1) )  앞면: 0, 뒷면: 1

import  random

cnt = 0
for  i  in  range(1, 10001):
    result = random.randint(0,1) 
    if  result == 0:
        cnt += 1

print (cnt)

예제2.  동전하나를 8번 던졌을때 그 중에 뒷면이 5번이 나오는 횟수를
          출력하시오 !( 동전 하나를 8번 던지는 실험을 10000번 하세요)

import  random 

count = 0
for  k  in   range(1, 10001):
    cnt = 0                                     # 0으로 cnt 초기화
    for  i  in  range(1,9):                    # 동전을 8번 던져서 
        result = random.randint(0,1)
        if  result == 1:                       # 뒷면이 나오면 
            cnt += 1                          #  cnt 를 1씩 늘려라 
    if  cnt == 5:                             # 뒷면의 총횟수가 5라면 
        count += 1                          # count 를 1씩 증가시켜라

print ( count )

예제3.  아래와 같이 동전을 8번 던졌을 때 뒷면이 나오는 횟수를 출력하는데
           뒷면이 0번 ~ 8번 나오는 횟수가 아래와 같이 리스트에 담겨서 출력되게
            하시오 !  카페에 올려주세요. ~~

결과: [ 412,  3026, 10798, 22010, 27651, 21682, 10851, 3191, 379 ]



예제4. (오늘의 마지막 문제)  위의 횟수를 가지고 아래와 같이 확률이 출력되게하시오
                    ( 횟수 /10000 )

[0.00349, 0.03142, 0.10853, 0.21657, 0.27184, 0.21927, 0.11025, 0.03031, 0.00387]


import random

a = []
for j in range(0,9):
    count = 0
    for k in range(1,10001):
        cnt = 0
        for i in range(1,9):
            result = random.randint(0,1)
            if result == 1:
                cnt += 1
        if cnt == j:
            count += 1
    a.append(count/10000)
print(a)

예제5. 동전을 8번 던져서 뒷면이 0~8회인 횟수를 x 축으로 하고
         확률을 y 축으로해서 막대 그래프를 그리시오 

위의 코드들 ...
print(a)  # 확률 리스트
coin_cnt = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ]

import  matplotlib.pyplot as plt

plt.bar( coin_cnt, a , tick_label=coin_cnt, align='center', color='red')
plt.show()

예제6. coin_cnt 를 입력값으로 해서 coin_cnt 의 요소들의 평균값과 
         표준편차를 출력하시오

import  numpy  as  np 

coin_cnt = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ]

c_m = np.mean(coin_cnt)  # 평균값
c_s  = np.std(coin_cnt)     # 표준편차 

print( c_m )  # 4.0
print( c_s )   # 2.5819

예제7. 위에서 구한 평균값과 표준편차를 이용해서 coin_cnt 의 요소값에
         대한 확률밀도함수값을 출력하시오 !(scipy.stats 의 norm 을 사용)

※  확률 밀도 함수는 확률 변수의 분포를 나타내는 함수로, 
     확률 변수 X가 구간[a ,b]에 포함될 확률을 출력하는 함수

import  numpy  as  np
from   scipy.stats  import  norm   # 통계학 구현에 필요한 함수들 포함

coin_cnt = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ]

c_m = np.mean(coin_cnt)  # 평균값
c_s  = np.std(coin_cnt)     # 표준편차 
result = norm.pdf( coin_cnt, c_m, c_s)  # pdf(데이터, 평균값, 표준편차)
print (result)

[0.04653742 0.0786696  0.11446359 0.14334535 0.15450968 0.14334535
 0.11446359 0.0786696  0.04653742]

예제8.  coin_cnt 를 x 축으로 두고 위의 확률밀도 함수값을 y 축으로 두어서
          확률밀도함수 그래프를 그리시오 !

예제7번 코드들...

import  matplotlib.pyplot  as  plt

plt.plot( coin_cnt, result, color='black')
plt.show()

예제9. 위의 그래프에서 신뢰구간 68%에 해당하는 부분만 녹색으로
         색칠하시오 !

* 신뢰구간범위 (외우세요 ~)

1. 68% -->  평균 ± 1 * 표준편차 
2. 95% -->  평균 ± 1.96 * 표준편차 
3. 99% -->  평균 ± 2.58 * 표준편차 

예제8번 코드들 ...
plt.plot( coin_cnt, result, color='black')
plt.fill_between( coin_cnt, result, where=(coin_cnt < c_m+c_s) & (coin_cnt > c_m-c_s),
                    color='green')
plt.show()

예제10. 신뢰구간 95% 의 부분을 녹색으로 칠하시오 !

a = 1.96
plt.plot( coin_cnt, result, color='black')
plt.xticks( range(0, 9) )
plt.fill_between( coin_cnt, result, where=(coin_cnt < c_m+a*c_s) & (coin_cnt > c_m-a*c_s),
                    color='green')
plt.show()

예제11.   동전을 8번 던졌을때 동전이 뒷면이 나오는 횟수가 신뢰구간 68% 
            안에 드는지 아닌지를 출력하는 함수를 생성하시오 ! 답글로 달아주세요

print( coin_hypo(동전 뒷면의 횟수) )

print( coin_hypo(4) )

동전 8번 던졌을때 뒷면이 나오는 횟수가 4번이 나올 확률은 신뢰구간 68% 안에 있습니다

print( coin_hypo(8) )

동전 8번 던졌을때 뒷면이 나오는 횟수가 8번이 나올 확률은 신뢰구간 68% 안에 없습니다


파이썬 500문제_서동민.pdf





























































































































































■ 예제147. 웹에 있는 사진을 스크롤링 하는 방법 (구글 이미지)

######################################################

import urllib.request # 웹 url을 파이썬이 인식 할 수 있게하는 패키지
from  bs4 import BeautifulSoup # html에서 데이터 검색을 용이하게 하는 패키지
from selenium import webdriver  
# selenium : 웹 애플리케이션의 테스트를 자동화하기 위한 프레임 워크 
# 손으로 클릭하면서 컴퓨터가 대신하면서 스크롤링하게 하는 패키지

from selenium.webdriver.common.keys import Keys
import time       # 중간중간 sleep 을 걸어야 해서 time 모듈 import

########################### url 받아오기 ###########################

# 웹브라우져로 크롬을 사용할거라서 크롬 드라이버를 다운받아 아래 파일경로의 위치에 둔다
# 팬텀 js로 하면 백그라운드로 실행할 수 있음
binary = 'c://chromedriver//chromedriver.exe'

# 브라우져를 인스턴스화
browser = webdriver.Chrome(binary)

# 구글의 이미지 검색 url 받아옴(아무것도 안 쳤을때의 url) 
browser.get("https://www.google.co.kr/imghp?hl=ko&tab=wi&ei=l1AdWbegOcra8QXvtr-4Cw&ved=0EKouCBUoAQ") 

# 구글의 이미지 검색에 해당하는 input 창의 id 가 '  ?  ' 임(검색창에 해당하는 html코드를 찾아서 elem 사용하도록 설정)
# input창 찾는 방법은 원노트에 있음

# elem = browser.find_elements_by_class_name('gLFyf gsfi') # Tip : f12누른후 커서를 검색창에 올려두고 id를 찾으면 best

elem = browser.find_element_by_xpath("//*[@class='gLFyf gsfi']")  # 위의 코드대로 하거나 이렇게 하거나 둘 중 하나 select


########################### 검색어 입력 ###########################

# elem 이 input 창과 연결되어 스스로 햄버거를 검색
elem.send_keys("pineapple") # 여기에 스크롤링하고싶은 검색어를 입력

# 웹에서의 submit 은 엔터의 역할을 함
elem.submit()


########################### 반복할 횟수 ###########################

# 스크롤을 내리려면 브라우져 이미지 검색결과 부분(바디부분)에 마우스 클릭 한번 하고 End키를 눌러야함

for i in range(1, 6): # 5번 스크롤 내려가게 구현된 상태 range(1,5)
    browser.find_element_by_xpath("//body").send_keys(Keys.END)
    time.sleep(10)          # END 키 누르고 내려가는데 시간이 걸려서 sleep 해줌 / 키보드 end키를 총 5번 누르는데 end1번누르고 10초 쉼

time.sleep(10)                      # 네트워크 느릴까봐 안정성 위해 sleep 해줌(이거 안하면 하얀색 이미지가 다운받아질 수 있음.)
html = browser.page_source         # 크롬브라우져에서 현재 불러온 소스 가져옴
soup = BeautifulSoup(html, "lxml") # html 코드를 검색할 수 있도록 설정

browser.find_element_by_xpath("//*[@class='mye4qd']").click()  # 여기가 결과 더보기 코드입니다

for i in range(1, 5): # 4번 스크롤 내려가게 구현된 상태 range(1,5)
    browser.find_element_by_xpath("//body").send_keys(Keys.END)
    time.sleep(10)          # END 키 누르고 내려가는데 시간이 걸려서 sleep 해줌 / 키보드 end키를 총 5번 누르는데 end1번누르고 10초 쉼

time.sleep(10)                      # 네트워크 느릴까봐 안정성 위해 sleep 해줌(이거 안하면 하얀색 이미지가 다운받아질 수 있음.)
html = browser.page_source         # 크롬브라우져에서 현재 불러온 소스 가져옴
soup = BeautifulSoup(html, "lxml") # html 코드를 검색할 수 있도록 설정

########################### 그림파일 저장 ###########################

### 검색한 구글 이미지의 url을 따오는 코드 ###
def fetch_list_url():
    params = []
    imgList = soup.find_all("img", class_="rg_i Q4LuWd")  # 구글 이미지 url 이 있는 img 태그의 _img 클래스에 가서 (f12로 확인가능.)
    for im in imgList:
        try :
            params.append(im["src"])                   # params 리스트에 image url 을 담음.
        except KeyError:
            params.append(im["data-src"])
    return params

# except부분
# 이미지의 상세 url 의 값이 있는 src 가 없을 경우
# data-src 로 가져오시오 ~  


def fetch_detail_url():
    params = fetch_list_url()

    for idx,p in enumerate(params,1):
        # 다운받을 폴더경로 입력
        urllib.request.urlretrieve(p, "c://gimages2//" + str(idx) + "_google.jpg")

# enumerate 는 리스트의 모든 요소를 인덱스와 쌍으로 추출
# 하는 함수 . 숫자 1은 인덱스를 1부터 시작해라 ~

fetch_detail_url()

# 끝나면 브라우져 닫기
browser.quit()

문제403.  네이버 이미지 검색에서  파인애플로 검색했을때 나오는 이미지를
              c 드라이브 밑에 naver 라는 폴더 밑에 저장하시오 

https://search.naver.com/search.naver?where=image&amp;sm=stb_nmr&amp;


 코드를 답변 달아주세요 ~

문제404. 마이크로소프트사에서 만든 bing 사이트에서 이미지 검색을 했을때
            다운되는 이미지들을 c 드라이브 밑에 bing 폴더 밑에 저장하시오 !

3시 신호 보냈습니다. 

크몽에서 이미지 스크롤링으로 아르바이트 단가를 많이 받을 수 있는 사이트

1.쿠팡
2. gs
3. 중국의 유명 쇼핑물 사이트( 상품 이미지와 가격 다운로드)

www.taobao.com

https://www.aliexpress.com/


https://best.aliexpress.com/?lan=en&spm=a2g0o.productlist.1000002.1.49754582IW6uYx

위의 사이트에서 신발 이미지와 가격정보를 다운로드 하는 크롤러 만들기
(크몽 단가 10만원)


■ 예제149.  파이썬과 Oracle 연동

                                  연동 
 오라클 database ------------------------------- 파이썬 
       ↓                                                      ↓
 정형화된 데이터                                      통계구현, 시각화, 머신러닝, 업무자동화

 emp 테이블 ---> emp2.csv 로 내려서 판다스로 불러왔었는데  
                    이 경우는 실시간으로 데이터가 변경이 안된다면 그럭저럭 쓸만하지만
                   회사에서는 실시간으로 데이터가 변경이 되므로 바로 database 와
                  파이썬이 연동되어서 변경된 데이터가 바로바로 반영이 되어져야합니다.

* 오라클과 파이썬 연동 

1.  도스창을 열고 리스너의 상태를 확인합니다. 그리고 3가지 정보를 얻어냅니다.

 명령어:  lsnrctl status 
  
 * 3가지 정보

 1. ip 주소 ( 건물주소 )    :  DESKTOP-63APUGJ
 2. 포트번호 ( 건물안의 복도번호) :  1521
 3. 서비스 이름 ( 회사이름 ) : orcl

2. 위의 정보들을 이용해서 오라클 database 에 접속해봅니다.

 sqlplus  c##scott/tiger@DESKTOP-63APUGJ:1521/orcl

3. 아나콘다 프롬프트창을 열고  cx_Oracle 모듈을 설치합니다.

  conda  install  cx_Oracle 

4. 파이썬과 오라클을 연동하는 코드를 작성합니다 

import  cx_Oracle
import  pandas  as  pd

dsn = cx_Oracle.makedsn("DESKTOP-63APUGJ", 1521, 'orcl')  # 3가지 정보를 줍니다. 
db = cx_Oracle.connect('c##scott', 'tiger', dsn )  # 오라클에 접속할 유져 정보
cursor = db.cursor()         # 결과 데이터를 담을 메모리 이름을 cursor 로 선언함
cursor.execute(""" select * from emp """) # 작성한 쿼리문의 결과가 cursor 메모리에 담김
row = cursor.fetchall()     # cursor 메모리에 담긴 결과를 한번에 row 변수에 담는다. 
emp = pd.DataFrame(row)  # 판다스 데이터 프레임으로 변환한다. 
print(emp)                     

예제1.  사원 테이블에서 사원번호, 이름, 월급, 부서번호를 출력하시오 !
          ( 오라클과 파이썬 연동한 상태에서 결과를 파이썬에 출력하세요 )

import  cx_Oracle
import  pandas  as  pd

dsn = cx_Oracle.makedsn("DESKTOP-63APUGJ", 1521, 'orcl')  # 3가지 정보를 줍니다. 
db = cx_Oracle.connect('c##scott', 'tiger', dsn )  # 오라클에 접속할 유져 정보
cursor = db.cursor()         # 결과 데이터를 담을 메모리 이름을 cursor 로 선언함
cursor.execute(""" select empno, ename, sal, deptno from emp """) # 작성한 쿼리문의 결과가 cursor 메모리에 담김
row = cursor.fetchall()     # cursor 메모리에 담긴 결과를 한번에 row 변수에 담는다. 
emp = pd.DataFrame(row)  # 판다스 데이터 프레임으로 변환한다. 
print(emp)                     

예제2. 위의 결과에서는 컬럼명이 안나오므로 컬럼명이 나오게 하시오

import  cx_Oracle
import  pandas  as  pd

dsn = cx_Oracle.makedsn("DESKTOP-63APUGJ", 1521, 'orcl')  # 3가지 정보를 줍니다. 
db = cx_Oracle.connect('c##scott', 'tiger', dsn )  # 오라클에 접속할 유져 정보
cursor = db.cursor()         # 결과 데이터를 담을 메모리 이름을 cursor 로 선언함
cursor.execute(""" select * from emp """) # 작성한 쿼리문의 결과가 cursor 메모리에 담김
row = cursor.fetchall()     # cursor 메모리에 담긴 결과를 한번에 row 변수에 담는다. 
emp = pd.DataFrame(row)  # 판다스 데이터 프레임으로 변환한다. 
colname = cursor.description
col=[]
for  i  in  colname:
    col.append(i[0])

emp = pd.DataFrame( list(row), columns=col)
print(emp)

예제3.  부서번호가 30번인 사원들의 이름과 월급과 부서번호를 판다스로
          출력하시오 !

emp = pd.DataFrame( list(row), columns=col)
emp.columns = emp.columns.str.lower()
print(emp)
print ( emp[['ename','sal','deptno']] [ emp['deptno']==30 ] )

예제4.  오라클로 접속해서 부서번호가 30번인 사원들의 월급을 0 으로 변경
          하시오 !

SQL> update emp
  2   set  sal = 0
  3   where deptno = 30;

6 행이 업데이트되었습니다.

SQL> commit;

예제5. 판다스에서 예제3을 다시 수행하세요 ~


예제6.  다시 오라클에서 emp 테이블 생성하는 스크립트 다시 돌리고
          판다스에서 잘 반영되었는지 확인하시오 !


문제405. (오늘의 마지막 문제)  Oracle database 의 우리반 테이블(emp13)
            을 판다스로 불러와서 나이가 30살 이상인 학생들의 전공을 출력
            하시오 !

5시 신호 보냈습니다.

마지막 문제 올리고 자유롭게 자습 또는 스터디 하세요 ~
















































































































































































































































































































































































































































  































































































































  






























































































                    
                      










































































































































































































































 





















































































































































































 

























































































































































































































































































































































	




























































































































































    































 









































■예제52. 예제클래스 메소드 이해하기

  card 클래스의 charge 와 consume 가 메소드(기능) 입니다. 

예:  
a = [ 1, 2, 3, 4 ]
print ( type(a) )  # <class 'list'>

설명: 리스트가 클래스였다고 출력이 됩니다. 리스트가 class 라는 말은
       리스트 클래스 안에도 분명히 메소드(기능) 가 존재할 것입니다. 

card1.charge(10000)
  ↑       ↑
객체    메소드(기능)

a = [ 1, 2, 3, 4]
a.append(5)
↑       ↑
객체   메소드 
print (a)

* 리스트 객체의 유용한 메소드 

1. append()   :  리스트 맨 끝에 새로운 요소를 추가할 때 사용
2. count()     :  리스트에서 특정 요소의 갯수를 카운트할 때 사용
3. insert()     :  리스트의 특정 위치에 요소를 입력할 때 사용
4. remove()  :   리스트의 특정 요소를 제거할 때 사용
5. sort()       :   리스트의 요소를 순차적으로 정려할 때 사용 
6. reverse()   :   리스트의 요소를 역순으로 정렬할 때 사용 
7. index()     :   리스트의 특정요소의 위치를 출력할 때 사용 

a = [ 1, 2, 3, 1, 2, 2, 2, 2, 3, 4 ]
print ( a.count(2) )  # a 리스트에서 숫자 2가 몇개가 있는지 조회

문제156.  동전을 10번 던져서 앞면이 2번이 나올 확률을 출력하시오 !
             ( 동전을 10번 던지는 작업을 10000번 수행되게 하세요)

import  random
coin = ['앞면', '뒷면']
cnt = 0

for  i  in  range(1, 10001):   # 동전을 10번 던지는 작업을 10000번 수행 
    a = []                         # 동전의 앞면과 뒷면을 입력하기 위한 리스트
    for  j  in  range(1, 11):    # 동전을 10번 던진다. 
        result = random.choice(coin)  # 앞면 또는 뒷면이 나오면 
        a.append(result)        # 그 결과를 a 리스트에 추가합니다. 

    if  a.count('앞면') == 2:
        cnt = cnt + 1 
     
print (cnt/10000)   # 45분까지 쉬세요 ~~

문제157. (오늘의 마지막 문제) 위의 코드를 함수로 생성해서 확률이 출력되게하시오 !

coin_prob(2)  # 0.04314
coin_prob(4)  #  0.2065
             ↑
          앞면의 갯수 

5시 신호 보냈습니다. ~~~~~~~
6시 신호 보냈습니다. ~~~~~~~~

마지막 문제 올리고 자유롭게 자습 또는 스터디 하세요 ~~~~~

■ 예제53. 클래스 생성자 이해하기

클래스를 만드는 이유 ?   

여러개의 함수를 모아놓는거라면 모듈로도 할 수 있는데 왜 굳이
클래스를 만드는 것인가 ?

       모듈                          vs                   클래스 
    
    charge 함수                                       charge 함수 
    consume 함수                                    consume 함수 
          ↓                                                  ↓
  충전과 소비가 전혀 서로 상관없이           충전된 만큼 소비를 할 수 있도록
  독립적으로 작동한다.                            클래스 내에서 변수를 통해서
                                                         서로 관련이 있어짐

     gun1 = Gun()
       ↑        ↑
      제품    설계도
     (객체)   (클래스)

다른 제품(객체)을 생성하고 싶다면 ?

gun1 = Gun()
gun2 = Gun()

gun1.charge(10)

gun1.shoot(self,1)  --> 강력계 형사
gun2.shoot(self,1)  --> 교통경찰 

클래스를 가지고 객체를 만들때 자동적으로 호출되는 메소드가 
클래스 생성자 입니다.  클래스 생성자는 __init__(self)  입니다. 

카드의 기능?   0. 카드가 처음 만들어질때 0원으로 충전되겠금 하는 기능 
                   1. 충전
                   2. 소비

예제:
class  Card():
    def  __init__(self):  
        self.cash = 0
        print('카드가 발급되었습니다.' ,  self.cash, '원이 충전되어있습니다')

card1 = Card()

문제158.  위의 Card 클래스에  charge 메소드와 consume 메소드를 추가시키시오

class  Card():
    def  __init__(self):  
        self.cash = 0
        print('카드가 발급되었습니다.' ,  self.cash, '원이 충전되어있습니다')

card1 = Card()

답:
class  Card():
    def  __init__(self):  
        self.cash = 0
        print('카드가 발급되었습니다.' ,  self.cash, '원이 충전되어있습니다')

    def charge(self, num):
        self.money = num
        print('%d''원이 충전되었습니다.'  %self.money)    
        
    def consume(self, num):
        if self.cash < num:
            print('충전이 필요합니다.')
        else:
            self.cash -= num
            print('%d원이 사용되었습니다.' %num)
            print('잔액은 ', self.cash, '원 입니다.')

    def print(self):
        print('잔액은 ', self.cash, '원 입니다.')
        
card1 = Card()        
card1.charge(10000)


문제159. 카드를 사용할 때 아래와 같이 사용한 장소도 출력되게하시오 !

card1.consume(12000, '영화관')

영화관에서 12000 원이 사용되었습니다. 

47분까지 쉬세요 ~


■ 예제54. 클래스 소멸자 이해하기 

 객체가 사라질 때 자동으로 호출되는 함수를 소멸자(__del__) 라고 합니다. 
 총 클래스로 yys_gun1 이라는 총을 만들고 총을 사용하다가 이제 총을
 폐기를 하고 싶으면 del 명령어로 총을 폐기하면 되는데
 이때 자동으로 작동되는 메소드(함수)가 소멸자 함수 입니다. 

예:
class  Gun():
    def  __init__(self):
        self.bullet = 0
        print ('총 한정이 생성되었습니다')

    def  __del__(self):
        print('총이 폐기되었습니다')


yys_gun1 = Gun()

del  yys_gun1 

문제160. 문제159번에서 만든 카드 클래스에 소멸자 메소드를 추가해서 
            del  card1 하면 카드가 폐기되었습니다. 라는 메세지가 출력되게
            하시오

답:
class  Card():
    def  __init__(self):  
        self.cash = 0
        print('카드가 발급되었습니다.' ,  self.cash, '원이 충전되어있습니다')

    def charge(self, num):
        self.money = num
        print('%d''원이 충전되었습니다.'  %self.money)    
        
    def consume(self, num):
        if self.cash < num:
            print('충전이 필요합니다.')
        else:
            self.cash -= num
            print('%d원이 사용되었습니다.' %num)
            print('잔액은 ', self.cash, '원 입니다.')

    def print(self):
        print('잔액은 ', self.cash, '원 입니다.')

    def  __del__(self):
        print ('카드가 폐기되었습니다.')
        

■ 예제55. 클래스 상속 이해하기

면접문제:  객체 지향 언어의 장점이 무엇입니까 ?   상속입니다.  

 팀장님은 카드의 중요기능(메소드)을 담은 클래스(card) 를 만들고
 나는 팀장님 만든 card 클래스를 상속받아서 영화할인 card 클래스를 만드는데
 나는 팀장님 코딩한 카드의 주요기능을 코딩하지 않아도 되고 나는 단순히
 영화할인에만 집중해서 코드를 구현하면 된다. 

  card         팀장님 
   ↓
 movie_card    나 

예제.  class  자식클래스이름(부모클래스이름)

설명:  자식 클래스는 부모클래스에서 정의된 모든 멤버(변수)와 메소드(함수)
        를 그대로 상속 받습니다. 

1. 팀장님이 카드의 주요기능을 담고 있는 Card() 클래스를 생성한다.
 
   팀장님이 만든 카드 주요기능 3가지?  1. 카드가 발급되었을때 0원으로 충전하는 기능 
                                                   2. 카드는 충전하는 기능(charge)
                                                   3. 카드를 쓰는 기능(consume)

2. 팀원인 나는 영화할인 카드를 만들것인데 팀장님이 구현한 카드의 주요기능을
    다 상속받고 나는 팀장님이 구현한 코드는 구현하지 않습니다. 
    나는 그냥 영화할인에만 집중해서 메소드를 만들면 됩니다. 

class  Card():
    def  __init__(self):  
        self.cash = 0
        print('카드가 발급되었습니다.' ,  self.cash, '원이 충전되어있습니다')

    def charge(self, num):
        self.money = num
        print('%d''원이 충전되었습니다.'  %self.money)    
        
    def consume(self, num):
        if self.cash < num:
            print('충전이 필요합니다.')
        else:
            self.cash -= num
            print('%d원이 사용되었습니다.' %num)
            print('잔액은 ', self.cash, '원 입니다.')

    def print(self):
        print('잔액은 ', self.cash, '원 입니다.')

    def  __del__(self):
        print ('카드가 폐기되었습니다.')

나는 다음과 같이 하면 됩니다.

class  Movie_Card( Card ):
    pass

m_card1  = Movie_Card()

m_card1.charge(100000)

문제161. 영화관에가서 card 를 사용하면 10% 할인 될 수 있도록 Movie_Card() 클래스를
            만드시오 ~

class  Movie_Card( Card ):             # 부모에게서 부모의 멤버와 메소드들을 상속 받음
    def  consume(self, num, place) :  # 부모에게서 받은 consume 메소드를 내가 만든 
        if  place=='영화관':              # consume 로 덮어쓰기(overriding) 합니다. 
            num = 0.9 * num
            if  self.cash >= num:        # 잔액이 num 보다 크다면 카드를 사용하고 
                self.cash -= num
                print ( place, '에서 ', num, '원이 사용되었습니다.')
            else:                             # 아니면 잔액이 부족하다고 해라 ~
                print ('잔액이 부족합니다.')
        else:                                 # 영화관에서 사용한게 아니라면 아래의 코드가 수행
            if  self.cash >= num:        # 되게해라 ~
                self.cash -= num
                print ( place , '에서', num, '원이 사용되었습니다.')
            else:
                print('잔액이 부족합니다.') 

문제162.  자 그러면 영화할인 카드를 발급하고 영화관에서 위의 카드를 사용해보시오 !

m_card1 = Movie_Card()
m_card1.charge(20000)
m_card1.consume(12000,'영화관')
m_card1.consume(2000,'편의점')

46분까지 쉬세요 ~~~

설명:  자꾸 카드가 폐기되었다고 나오는 이유가 무엇인가 ?

 m_card1 로 카드를 만들었는데 다시 또 m_card1 로 카드를 생성하게 되면
 이전의 m_card1 은 폐기하고 다시 새로 m_card1 로 카드를 발급하기 때문입니다. 

문제163. 위의 영화할인 카드에 할인 장소를 추가해서 
            주유소에서도 10% 할인 될 수 있도록 코드를 수정하시오 !

m_card3 = Movie_Card()
m_card3.charge(200000)
m_card3.consume(12000,'영화관')
m_card3.consume(30000,'주유소')

답:
class  Movie_Card( Card ):             # 부모에게서 부모의 멤버와 메소드들을 상속 받음
    def  consume(self, num, place) :  # 부모에게서 받은 consume 메소드를 내가 만든 
        if  place in ('영화관', '주유소'):  # consume 로 덮어쓰기(overriding) 합니다. 
            num = 0.9 * num
            if  self.cash >= num:        # 잔액이 num 보다 크다면 카드를 사용하고 
                self.cash -= num
                print ( place, '에서 ', num, '원이 사용되었습니다.')
            else:                             # 아니면 잔액이 부족하다고 해라 ~
                print ('잔액이 부족합니다.')
        else:                                 # 영화관에서 사용한게 아니라면 아래의 코드가 수행
            if  self.cash >= num:        # 되게해라 ~
                self.cash -= num
                print ( place , '에서', num, '원이 사용되었습니다.')
            else:
                print('잔액이 부족합니다.') 

문제164.  위의 영화할인 카드에서 스타벅스 할인도 추가되게하는데
             스타벅스는 20% 할인되게 하세요 ~  (코드를 올려주세요 !)

m_card4 = Movie_Card()
m_card4.charge(200000)
m_card4.consume(12000,'영화관')
m_card4.consume(30000,'주유소')
m_card4.consume(12000,'스타벅스')

* 클래스를 사용하는 이유 ?    1. 상속때문입니다. 
                                       2. 메소드들끼리 서로 연관성을 가져야하는 경우

파이썬을 배웠다고 하면 가장 많이 물어보는 면접문제:

객체지향 언어의 장점이 무엇입니까 ?  상속입니다 

객체지향 언어가 무엇입니까 ?   클래스를 이용해서 객체를 생성하는 언어를
                                          말합니다. 

점심시간 문제:   a 리스트에서 소수를 출력하세요 ~~~

  a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]

A반은 라인 검사
B반은 카페에 올리세요 ~~
































 































































































































































































































































































































































































































































































































             














































































































































































































































































































































































































































































































































































                       


















































































   





